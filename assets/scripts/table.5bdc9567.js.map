{"version":3,"sources":["webpack://rap/./src/components/DataTable/index.tsx","webpack://rap/./src/hooks/useFetch.ts","webpack://rap/./src/validators/protocolBuffersWellKnownTypesValidators.ts","webpack://rap/./src/validators/googleSheetsApiResourceValidators.ts","webpack://rap/./src/components/FossLicenseComparisonTable/index.tsx","webpack://rap/./src/components/App/TablePage/messages.ts","webpack://rap/./src/components/App/TablePage/index.tsx"],"names":["compareStrings","a","b","isMobile","Bowser","navigator","userAgent","is","columns","rows","defaultSortOrder","sorts","setSorts","useState","primarySort","useMemo","createSortLabelClickHandler","useCallback","field","by","oldPrimarySort","oldRestSorts","in","fieldSortIndex","findIndex","sort","oldSorts","slice","sortedRows","reduceRight","result","sortBy","row","String","List","toArray","theme","useTheme","TableContainer","component","Paper","Table","size","TableHead","TableRow","map","column","TableCell","variant","sortDirection","find","style","minWidth","undefined","width","spacing","key","TableSortLabel","active","direction","onClick","label","TableBody","i","hover","OrderedMap","Object","entries","_value","value","valueSeq","useFetch","input","init","fetchPromise","setFetchPromise","response","setResponse","error","setError","state","setState","useEffect","fetch","shouldBePresent","then","catch","reason","Error","TypeError","asValue","asJson","asListValue","listOf","asDimension","asUnionOf","asValueRange","asObject","range","optional","asString","majorDimension","values","asSpreadsheet","sheets","asSheet","data","asGridData","columnMetadata","asDimensionProperties","pixelSize","asNumber","isCellValue","config","useInjection","columnMetadataResponse","generatePath","typed","get","spreadsheetId","sheetName","includeGridData","fields","apiKey","valuesResponse","setColumns","setRows","json","every","Array","isArray","firstRowValues","restRowsValues","cellValue","from","zipIterables","rowValues","fromEntries","defineMessages","table","createPage","formatMessage","useIntl","Helmet","title","messages","Suspense","fallback","CircularProgress"],"mappings":"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","file":"assets/scripts/table.5bdc9567.js","sourcesContent":["import { useTheme } from '@material-ui/core'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport Bowser from 'bowser'\nimport { List, OrderedMap } from 'immutable'\nimport React, { useCallback, useMemo, useState } from 'react'\n\ninterface Props {\n  columns: Column[]\n  rows: Row[]\n  defaultSortOrder?: SortOrder\n}\n\nexport interface Column {\n  field: Field\n  label?: React.ReactNode\n  width?: number // in pixels\n}\n\nexport type Row = {\n  [key in Field]: React.ReactNode\n}\n\ntype Field = string | number\n\n// TODO: remove\nfunction compareStrings(a: string, b: string): number {\n  if (a < b) return -1\n  else if (a > b) return 1\n  else return 0\n}\n\n// TODO: Remove\n// TODO: Detect UA changes?\nconst browser = Bowser.getParser(navigator.userAgent)\n\nconst isMobile = browser.is('Mobile')\n\nconst DataTable: React.FC<Props> = ({ columns, rows, defaultSortOrder = 'asc' }) => {\n  const [sorts, setSorts] = useState<Sort<Row>[]>([])\n\n  // NOTE: TypeScript のメンバーアクセス演算は部分関数ではない (cf. https://github.com/microsoft/TypeScript/issues/13778)\n  const primarySort = useMemo<Sort<Row> | undefined>(() => sorts[0], [sorts])\n\n  const createSortLabelClickHandler = useCallback((field: Field) => () => {\n    if (field === primarySort?.by) {\n      setSorts(([oldPrimarySort, ...oldRestSorts]) => [\n        {\n          by: oldPrimarySort.by,\n          in: oldPrimarySort.in === 'asc' ? 'desc' : 'asc',\n        },\n        ...oldRestSorts,\n      ])\n    } else {\n      const fieldSortIndex = sorts.findIndex((sort) => sort.by === field)\n\n      if (fieldSortIndex === -1) {\n        setSorts((oldSorts) => [\n          {\n            by: field,\n            in: defaultSortOrder,\n          },\n          ...oldSorts,\n        ])\n      } else {\n        setSorts((oldSorts) => {\n          // const oldFieldSortIndex = oldSorts.findIndex((oldSort) => oldSort.by === field)\n\n          return [\n            oldSorts[fieldSortIndex],\n            ...oldSorts.slice(0, fieldSortIndex),\n            ...oldSorts.slice(fieldSortIndex + 1),\n          ]\n        })\n      }\n    }\n  }, [defaultSortOrder, sorts, primarySort])\n\n  const sortedRows = useMemo(() => sorts.reduceRight((result, sort) => result.sortBy(\n    (row) => String(row[sort.by]),\n    (a, b) => {\n      switch (sort.in) {\n        case 'asc': return compareStrings(a, b)\n        case 'desc': return -compareStrings(a, b)\n      }\n    }\n  ), List(rows)).toArray(), [sorts, rows])\n\n  const theme = useTheme()\n\n  return (\n    <TableContainer component={ Paper }>\n      <Table size={ isMobile ? 'small' : 'medium' }>\n        <TableHead>\n          <TableRow>\n            { columns.map((column) => (\n              <TableCell\n                variant=\"head\"\n                sortDirection={ sorts.find((sort) => sort.by === column.field)?.in }\n                style={ { minWidth: column.width !== undefined ? column.width + 2 * theme.spacing(2) : undefined } }\n                key={ column.field }\n              >\n                <TableSortLabel\n                  active={ primarySort?.by === column.field }\n                  direction={ sorts.find((sort) => sort.by === column.field)?.in ?? defaultSortOrder }\n                  onClick={ createSortLabelClickHandler(column.field) }\n                >\n                  { column.label ?? column.field }\n                </TableSortLabel>\n              </TableCell>\n            )) }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          { sortedRows.map((row, i) => (\n            <TableRow hover key={ i }>\n              { OrderedMap(Object.entries(row)).sortBy((_value, field) => columns.findIndex((column) => column.field === field), (a, b) => a - b).map((value, field) => (\n                <TableCell key={ field }>\n                  { value }\n                </TableCell>\n              )).valueSeq().toArray() }\n            </TableRow>\n          )) }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default DataTable\n","import { useEffect, useState } from 'react'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport fetch, { NoAnyResponse } from '~/fetch'\n\n// TODO: remove?\ntype PromiseState =\n  | 'pending'\n  | 'fulfilled'\n  | 'rejected'\n\n/**\n * A hook to suspend a fetch result.\n *\n * @throws `Promise<void>` while pending.\n * @throws `Error` if rejected.\n */\nexport default function useFetch(input: RequestInfo, init?: RequestInit) {\n  const [fetchPromise, setFetchPromise] = useState<Promise<NoAnyResponse> | null>(null)\n  const [response, setResponse] = useState<NoAnyResponse | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const [state, setState] = useState<PromiseState | null>(null)\n\n  useEffect(() => {\n    setFetchPromise(fetch(input, init))\n    setState('pending')\n  }, [input, init])\n\n  switch (state) {\n    case 'pending':\n      shouldBePresent(fetchPromise)\n\n      throw fetchPromise.then((value) => {\n        setResponse(value)\n        setState('fulfilled')\n      }).catch((reason) => {\n        if (!(reason instanceof Error)) {\n          throw new TypeError('Non-error reason caught.')\n        }\n\n        setError(reason)\n        setState('rejected')\n      })\n    case null:\n    case 'fulfilled': return response\n    case 'rejected': throw error\n  }\n}\n","import { asJson, listOf } from './commonValidators'\n\nconst asValue = asJson\nexport const asListValue = listOf(asValue)\n","import { asNumber, asObject, asString, asUnionOf, listOf, optional } from './commonValidators'\nimport { asListValue } from './protocolBuffersWellKnownTypesValidators'\n\nconst asDimension = asUnionOf('DIMENSION_UNSPECIFIED', 'COLUMNS', 'ROWS')\n\nexport const asValueRange = asObject<GoogleSheetsApi.ValueRange>((input) => ({\n  range: optional(asString)(input.range),\n  majorDimension: optional(asDimension)(input.majorDimension),\n  values: optional(asListValue)(input.values),\n}))\n\nexport const asSpreadsheet = asObject<GoogleSheetsApi.Spreadsheet>((input) => ({\n  sheets: optional(listOf(asSheet))(input.sheets),\n}))\n\nexport const asSheet = asObject<GoogleSheetsApi.Sheet>((input) => ({\n  data: optional(listOf(asGridData))(input.data),\n}))\n\nexport const asGridData = asObject<GoogleSheetsApi.GridData>((input) => ({\n  columnMetadata: optional(listOf(asDimensionProperties))(input.columnMetadata),\n}))\n\nexport const asDimensionProperties = asObject<GoogleSheetsApi.DimensionProperties>((input) => ({\n  pixelSize: optional(asNumber)(input.pixelSize),\n}))\n","import { List } from 'immutable'\nimport { useInjection } from 'inversify-react'\nimport React, { useEffect, useState } from 'react'\nimport { generatePath } from 'react-router'\n\nimport DataTable, { Column, Row } from '~/components/DataTable'\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport zipIterables from '~/extensions/Iterable/zipIterables'\nimport useFetch from '~/hooks/useFetch'\nimport typed from '~/typed'\nimport { asSpreadsheet, asValueRange } from '~/validators/googleSheetsApiResourceValidators'\n\n// TODO: remove\ntype CellValue = string | number\n\n// TODO: remove\nfunction isCellValue(input: unknown): input is CellValue {\n  switch (typeof input) {\n    case 'string':\n    case 'number': return true\n    default: return false\n  }\n}\n\nconst FossLicenseComparisonTable: React.FC = () => {\n  const config = useInjection<ConfigRegistry>('EnvVarConfig')\n\n  const columnMetadataResponse = useFetch(generatePath(typed<[string]>`${ config.get('SHEETS_API_URL') }/spreadsheets/:spreadsheetId\\\\?ranges=:sheetName&includeGridData=:includeGridData&fields=:fields&key=:apiKey`, {\n    spreadsheetId: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID'),\n    sheetName: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME'),\n    includeGridData: true,\n    fields: 'sheets.data.columnMetadata',\n    apiKey: config.get('GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY'),\n  }))\n\n  const valuesResponse = useFetch(generatePath(typed<[string]>`${ config.get('SHEETS_API_URL') }/spreadsheets/:spreadsheetId/values/:sheetName\\\\?key=:apiKey`, {\n    spreadsheetId: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID'),\n    sheetName: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME'),\n    apiKey: config.get('GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY'),\n  }))\n\n  const [columns, setColumns] = useState<Column[] | null>(null)\n  const [rows, setRows] = useState<Row[] | null>(null)\n\n  useEffect(() => {\n    // tslint:disable-next-line:semicolon\n    ;(async () => {\n      if (columnMetadataResponse === null || valuesResponse === null) {\n        return\n      }\n\n      const columnMetadata = asSpreadsheet(await columnMetadataResponse.json()).sheets?.[0].data?.[0].columnMetadata\n      const sheets = asValueRange(await valuesResponse.json())\n\n      if (columnMetadata === undefined) {\n        throw new Error('No columnMetadata found.')\n      }\n\n      if (sheets?.majorDimension !== 'ROWS') {\n        throw new Error('Dimension unsupported.')\n      }\n\n      if (sheets.values === undefined || !sheets.values.every<JsonArray>(Array.isArray)) {\n        throw new Error('Less than 2 dimensions found.')\n      }\n\n      if (!sheets.values.every((row): row is CellValue[] => row.every(isCellValue))) {\n        throw new Error('Neither string nor number value found.')\n      }\n\n      const [firstRowValues, ...restRowsValues] = sheets.values\n\n      const fields = firstRowValues.map((cellValue, i) => typed<[CellValue, number]>`${ cellValue }_${ i }`)\n\n      setColumns(Array.from(zipIterables(fields, zipIterables(firstRowValues, columnMetadata))).map(([field, [cellValue, { pixelSize }]]) => ({\n        field,\n        label: cellValue,\n        width: pixelSize,\n      })))\n\n      setRows(restRowsValues.map((rowValues) => Object.fromEntries(zipIterables(fields, rowValues))))\n    })()\n  }, [columnMetadataResponse, valuesResponse])\n\n  if (columns === null || rows === null) {\n    return null\n  }\n\n  return (\n    <DataTable\n      columns={ List(columns).sortBy((column) => column.field, (a, b) => {\n        if (a < b) return -1\n        else if (a > b) return 1\n        else return 0\n      }).toArray() }\n      rows={ rows }\n    />\n  )\n}\n\nexport default FossLicenseComparisonTable\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  table: 'Table',\n})\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport React, { Suspense } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport FossLicenseComparisonTable from '~/components/FossLicenseComparisonTable'\nimport { createPage } from '~/components/PageTemplate'\nimport messages from './messages'\n\nconst TablePage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.table) } />\n      <Suspense fallback={ <CircularProgress /> }>\n        <FossLicenseComparisonTable />\n      </Suspense>\n    </>\n  )\n}\n\nexport default createPage(TablePage)\n"],"sourceRoot":""}