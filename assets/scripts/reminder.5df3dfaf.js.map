{"version":3,"sources":["webpack://rap/./src/lib/curry.ts","webpack://rap/./src/components/Reminder/AddTaskButton/messages.ts","webpack://rap/./src/components/Reminder/AddTaskButton/index.tsx","webpack://rap/./src/components/Reminder/TaskList/index.tsx","webpack://rap/./src/components/Reminder/TaskListItem/classes.css?3117","webpack://rap/./src/components/Reminder/TaskListItem/messages.ts","webpack://rap/./src/components/Reminder/TaskListItem/index.tsx","webpack://rap/./src/components/Reminder/TaskListItemDropTarget/index.tsx","webpack://rap/./src/components/Reminder/index.tsx","webpack://rap/./src/components/App/ReminderPage/messages.ts","webpack://rap/./src/components/App/ReminderPage/index.tsx","webpack://rap/./src/lib/validators/stringValidators.ts","webpack://rap/./src/lib/guards/stringGuards.ts","webpack://rap/./src/components/Reminder/TaskListItem/classes.css"],"names":["f","x","xs","defineMessages","add","addTask","Button","onClick","variant","color","messages","children","List","options","asBoundedLengthStringErrorMessage","value","index","onChange","onDelete","validate","useDrag","item","type","isDragging","monitor","getItem","isIdenticalTo","collect","dragging","drag","preview","className","useMemo","classnames","classes","handleContentChange","useCallback","event","content","target","handleDoneChange","_checked","done","checked","useIntl","formatMessage","locale","errors","hasError","Object","values","some","error","undefined","helperText","isOneOf","keys","key","text","Case","Error","ref","ListItem","container","ListItemIcon","DragHandle","Checkbox","TextField","fullWidth","disabled","ListItemSecondaryAction","IconButton","edge","Delete","moveTask","div","useRef","useDrop","accept","hover","shouldBePresent","current","clientOffset","getClientOffset","boundingClientRect","getBoundingClientRect","pointerY","y","top","middleY","bottom","drop","asObject","input","leftOnly","named","asBoundedLengthString","upperBound","asBoolean","mapDispatchToProps","getTasks","getTasksAsync","addTaskAsync","changeTaskContent","changeTaskContentAsync","markTaskAsDone","markTaskAsDoneAsync","markTaskAsUndone","markTaskAsUndoneAsync","deleteTask","deleteTaskAsync","connect","tasks","reminder","useEffect","changeTask","taskId","map","task","id","curry","toArray","createPage","Helmet","title","lowerBound","Infinity","inputAsString","asString","length","ValidationError","typed","asUrl","URL","isUrl","___CSS_LOADER_EXPORT___","push","module","locals"],"mappings":"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","file":"assets/scripts/reminder.5df3dfaf.js","sourcesContent":["type CurryFunction = <T0, Ts extends unknown[], U>(f: (x: T0, ...xs: Ts) => U) => (x: T0) => (...xs: Ts) => U\n\nconst curry: CurryFunction = (f) => (x) => (...xs) => f(x, ...xs)\n\nexport default curry\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  add: 'Add',\n})\n","import Button from '@material-ui/core/Button'\nimport React from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport messages from './messages'\n\nexport interface Props {\n  addTask(): void\n}\n\nconst AddTaskButton: React.FC<Props> = ({ addTask }) => (\n  <Button onClick={ addTask } variant=\"contained\" color=\"secondary\">\n    <FormattedMessage { ...messages.add } />\n  </Button>\n)\n\nexport default AddTaskButton\n","import List from '@material-ui/core/List'\nimport React from 'react'\n\nimport { Props as TaskListItemDropTargetProps } from '~/components/Reminder/TaskListItemDropTarget'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemDropTargetProps, React.ComponentType<TaskListItemDropTargetProps>> | React.ReactElement<TaskListItemDropTargetProps, React.ComponentType<TaskListItemDropTargetProps>>[]\n}\n\nconst TaskList: React.FC<Props> = ({ children }) => (\n  <List>\n    { children }\n  </List>\n)\n\nexport default TaskList\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  asBoundedLengthStringErrorMessage: '{ name } must be 0-{ upperBound } characters.',\n})\n","import Checkbox from '@material-ui/core/Checkbox'\nimport IconButton from '@material-ui/core/IconButton'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport TextField from '@material-ui/core/TextField'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport DragHandleIcon from '@material-ui/icons/DragHandle'\nimport Case from 'case'\nimport classnames from 'classnames'\nimport React, { useCallback, useMemo } from 'react'\nimport { DragObjectWithType, useDrag } from 'react-dnd'\nimport { useIntl } from 'react-intl'\n\nimport Task, { TaskParams } from '~/domain/entity/Task'\nimport { isOneOf } from '~/lib/guards/commonGuards'\nimport ValidationError from '~/lib/validators/ValidationError'\nimport classes from './classes.css'\nimport messages from './messages'\n\nexport interface Props {\n  value: Task\n  index: number\n\n  onChange(value: Partial<TaskParams>): void\n  onDelete(): void\n  validate(input: Task): Partial<Record<keyof Task, ValidationError>>\n}\n\ninterface CollectedProps {\n  dragging: boolean\n}\n\nexport interface DragObject extends DragObjectWithType {\n  value: Task\n  index: number\n}\n\nconst TaskListItem: React.FC<Props> = ({ value, index, onChange, onDelete, validate }) => {\n  const [{ dragging }, drag, preview] = useDrag<DragObject, unknown, CollectedProps>({\n    item: {\n      type: 'TaskListItem',\n      value,\n      index,\n    },\n    isDragging: (monitor) => {\n      const item: DragObject = monitor.getItem()\n\n      return value.isIdenticalTo(item.value)\n    },\n    collect: (monitor) => ({\n      dragging: monitor.isDragging(),\n    }),\n  })\n\n  const className = useMemo(() => classnames(classes.TaskListItemContainer, {\n    [classes.Dragging]: dragging,\n  }), [dragging])\n\n  const handleContentChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    onChange({\n      content: event.target.value,\n    })\n  }, [onChange])\n\n  const handleDoneChange = useCallback((event: React.ChangeEvent<HTMLInputElement>, _checked: boolean) => {\n    onChange({\n      done: event.target.checked,\n    })\n  }, [onChange])\n\n  const { formatMessage, locale } = useIntl()\n\n  const errors = useMemo(() => validate(value), [value, validate])\n  const hasError = useMemo(() => Object.values(errors).some((error) => error !== undefined), [errors])\n\n  const helperText = useMemo(() => {\n    if (errors.content === undefined) {\n      return null\n    }\n\n    if (isOneOf(...Object.keys(messages))(errors.content.key)) {\n      const text = formatMessage(messages[errors.content.key], errors.content.values)\n\n      switch (locale) {\n        case 'en': return Case.sentence(text)\n        case 'he':\n        case 'ja': return text\n        default: throw new Error // TODO\n      }\n    }\n\n    return null // TODO\n  }, [locale, formatMessage, errors.content])\n\n  return (\n    <div ref={ preview }>\n      <ListItem\n        classes={ {\n          container: className,\n        } }\n      >\n        <ListItemIcon>\n          <div ref={ drag }>\n            <DragHandleIcon />\n          </div>\n        </ListItemIcon>\n        <ListItemIcon>\n          <Checkbox\n            color=\"primary\" // NOTE: 選択コントロールには secondary を使うべきとされている (https://material.io/design/color/the-color-system.html) が、これは強調のためであって、リマインダーのチェックボックスは項目を強調するためのものではない。\n            checked={ value.done }\n            onChange={ handleDoneChange }\n          />\n        </ListItemIcon>\n        <TextField\n          variant=\"standard\"\n          fullWidth\n          value={ value.content }\n          onChange={ handleContentChange }\n          disabled={ value.done }\n          error={ hasError }\n          helperText={ helperText }\n        />\n        <ListItemSecondaryAction>\n          <IconButton onClick={ onDelete } edge=\"end\">\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n    </div>\n  )\n}\n\nexport default TaskListItem\n","import React, { useRef } from 'react'\nimport { useDrop } from 'react-dnd'\n\nimport { DragObject, Props as TaskListItemProps } from '~/components/Reminder/TaskListItem'\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemProps, React.ComponentType<TaskListItemProps>>\n  index: number\n\n  moveTask(sourceIndex: number, targetIndex: number): void\n}\n\nconst TaskListItemDropTarget: React.FC<Props> = ({ children, index, moveTask }) => {\n  const div = useRef<HTMLDivElement>(null)\n\n  const [, drop] = useDrop<DragObject, unknown, unknown>({\n    accept: 'TaskListItem',\n    hover(item, monitor) {\n      shouldBePresent(div.current)\n\n      if (item.index === index) {\n        return\n      }\n\n      const clientOffset = monitor.getClientOffset()\n\n      shouldBePresent(clientOffset)\n\n      const boundingClientRect = div.current.getBoundingClientRect()\n      const pointerY = clientOffset.y - boundingClientRect.top\n      const middleY = (boundingClientRect.bottom - boundingClientRect.top) / 2\n\n      // downwards\n      if (item.index < index && pointerY < middleY) {\n        return\n      }\n\n      // upwards\n      if (item.index > index && pointerY > middleY) {\n        return\n      }\n\n      moveTask(item.index, index)\n\n      // tslint:disable-next-line:no-object-mutation\n      item.index = index\n    },\n  })\n\n  drop(div)\n\n  return (\n    <div ref={ div }>\n      { children }\n    </div>\n  )\n}\n\nexport default TaskListItemDropTarget\n","import { List } from 'immutable'\nimport React, { useCallback, useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport Task, { TaskParams } from '~/domain/entity/Task'\nimport TaskId from '~/domain/vo/TaskId'\nimport curry from '~/lib/curry'\nimport { asBoolean, asObject, leftOnly, named } from '~/lib/validators/commonValidators'\nimport { asBoundedLengthString } from '~/lib/validators/stringValidators'\nimport { State } from '~/redux'\nimport { addTaskAsync, changeTaskContentAsync, deleteTaskAsync, getTasksAsync, markTaskAsDoneAsync, markTaskAsUndoneAsync, moveTask } from '~/redux/modules/reminder'\nimport AddTaskButton from './AddTaskButton'\nimport TaskList from './TaskList'\nimport TaskListItem from './TaskListItem'\nimport TaskListItemDropTarget from './TaskListItemDropTarget'\n\ninterface StateProps {\n  tasks: List<Task>\n}\n\ninterface DispatchProps {\n  getTasks(): void\n  addTask(): void\n  changeTaskContent(taskId: TaskId, content: string): void\n  markTaskAsDone(taskId: TaskId): void\n  markTaskAsUndone(taskId: TaskId): void\n  deleteTask(taskId: TaskId): void\n  moveTask(source: number, dest: number): void\n}\n\ntype Props =\n  & StateProps\n  & DispatchProps\n\nconst validate = asObject('a Task for presentation', (input) => ({\n  content: leftOnly(named('content', asBoundedLengthString({\n    upperBound: 140,\n  })))(input.content),\n  done: leftOnly(asBoolean)(input.done),\n}))\n\nconst Reminder: React.FC<Props> = ({ tasks, getTasks, addTask, changeTaskContent, markTaskAsDone, markTaskAsUndone, deleteTask, moveTask }) => {\n  useEffect(() => {\n    getTasks()\n  }, [getTasks])\n\n  const changeTask = useCallback((taskId: TaskId, { content, done }: Partial<Alt.Omit<TaskParams, 'id'>>) => {\n    if (content !== undefined) {\n      changeTaskContent(taskId, content)\n    }\n\n    if (done !== undefined) {\n      if (done) {\n        markTaskAsDone(taskId)\n      } else {\n        markTaskAsUndone(taskId)\n      }\n    }\n  }, [changeTaskContent, markTaskAsDone, markTaskAsUndone])\n\n  return (\n    <>\n      <TaskList>\n        {\n          tasks.map((task, index) => (\n            <TaskListItemDropTarget\n              key={ index }\n              index={ index }\n              moveTask={ moveTask }\n            >\n              <TaskListItem\n                key={ task.id.value }\n                value={ task }\n                index={ index }\n                onChange={ curry(changeTask)(task.id) }\n                onDelete={ curry(deleteTask)(task.id) }\n                validate={ validate }\n              />\n            </TaskListItemDropTarget>\n          )).toArray()\n        }\n      </TaskList>\n      <AddTaskButton addTask={ addTask } />\n    </>\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ reminder: { tasks } }: State): StateProps => ({\n  tasks,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  getTasks: getTasksAsync,\n  addTask: addTaskAsync,\n  changeTaskContent: changeTaskContentAsync,\n  markTaskAsDone: markTaskAsDoneAsync,\n  markTaskAsUndone: markTaskAsUndoneAsync,\n  deleteTask: deleteTaskAsync,\n  moveTask,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  reminder: 'Reminder',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport { createPage } from '~/components/PageTemplate'\nimport Reminder from '~/components/Reminder'\nimport messages from './messages'\n\nconst ReminderPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.reminder) } />\n      <Reminder />\n    </>\n  )\n}\n\nexport default createPage(ReminderPage)\n","import assert from 'assert'\n\nimport { isUrl } from '~/lib/guards/stringGuards'\nimport typed from '~/lib/typed'\nimport ValidationError from './ValidationError'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new ValidationError(\n    typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`,\n    'asBoundedLengthStringErrorMessage',\n    {\n      input: inputAsString.length,\n      lowerBound,\n      upperBound,\n    }\n  )\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new ValidationError(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n","export function isUrl(input: string): input is string.Url {\n  try {\n    // tslint:disable-next-line:no-unused-expression\n    new URL(input)\n\n    return true\n  } catch (error: unknown) {\n    return false\n  }\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-Reminder-TaskListItem-classes__TaskListItemContainer--3OHhp.src-components-Reminder-TaskListItem-classes__Dragging--2_mhr {\\n  opacity: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Reminder/TaskListItem/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,UAAU;AACZ\",\"sourcesContent\":[\".TaskListItemContainer.Dragging {\\n  opacity: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"TaskListItemContainer\": \"src-components-Reminder-TaskListItem-classes__TaskListItemContainer--3OHhp\",\n\t\"Dragging\": \"src-components-Reminder-TaskListItem-classes__Dragging--2_mhr\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}