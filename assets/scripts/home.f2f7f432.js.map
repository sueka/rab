{"version":3,"sources":["webpack://rap/./src/atoms/cookieDialogKeyState.ts","webpack://rap/./src/atoms/reloadNotToAcceptCookiesBannerKeyState.ts","webpack://rap/./src/components/FormattedTimeOfDay/index.tsx","webpack://rap/./src/components/CurrentTimeOfDay/index.tsx","webpack://rap/./src/identity.ts","webpack://rap/./src/polyfills/Notification.ts","webpack://rap/./src/components/NotifyMeButton/messages.ts","webpack://rap/./src/components/NotifyMeButton/index.tsx","webpack://rap/./src/hooks/useOnceForEachEffect.ts","webpack://rap/./src/components/ObtainCookieConsentBanner/index.tsx","webpack://rap/./src/components/ObtainCookieConsentButton/messages.ts","webpack://rap/./src/components/ObtainCookieConsentButton/index.tsx","webpack://rap/./src/components/SetClockButton/messages.ts","webpack://rap/./src/components/SetClockButton/index.tsx","webpack://rap/./src/components/Today/index.tsx","webpack://rap/./src/components/App/HomePage/messages.ts","webpack://rap/./src/components/App/HomePage/index.tsx","webpack://rap/./src/components/Banner/index.tsx","webpack://rap/./src/components/ObtainCookieConsentBanner/messages.ts","webpack://rap/./src/hooks/useBanner.ts"],"names":["cookieDialogKeyState","atom","key","default","v4","reloadNotToAcceptCookiesBannerKeyState","props","weekday","undefined","era","year","month","day","connect","io","now","value","format","it","Notification","globalThis","constructor","args","super","_timestamp","this","Date","getTime","defineMessages","sendPushNotification","inputFor","ref","notifications","setNotifications","useRecoilState","notificationsState","disabled","useMemo","current","test","handleNotifyButtonClick","useCallback","async","input","requestPermission","ns","handleNotificationClose","event","notification","target","filter","n","xs","identify","identity","effect","deps","useEffect","cleanups","doneIds","x","id","includes","push","cleanup","useOnceForEachEffect","addEventListener","Tooltip","title","messages","disableFocusListener","disableHoverListener","disableTouchListener","IconButton","onClick","Send","onAgree","onCancel","handleAgree","useRecoilCallback","set","cookieConsentObtainedState","Banner","leading","Avatar","Security","text","actions","Button","variant","color","consentToUseCookies","youHaveAlreadyConsentedToUseCookies","gtmContainerId","useInjection","get","gtm","useGtm","banner","useBanner","enqueueSnackbar","useSnackbar","cookieConsentObtained","useRecoilValue","cookieDialogKey","currentBanner","currentBannerState","reloadNotToAcceptCookiesBannerKey","shouldBePresent","hide","safe","install","handleCancel","handleClick","show","replaceable","setTheClock","mapDispatchToProps","updateNow","home","crateImport","createPage","formatMessage","useIntl","useRef","setText","useState","handleChange","add","console","log","Helmet","Typography","TextField","onChange","InputProps","endAdornment","InputAdornment","position","inputProps","isMobile","Bowser","navigator","userAgent","is","square","elevation","display","flexWrap","alignItems","my","ml","alignSelf","flexGrow","gridColumnGap","gridRowGap","mt","mb","mr","mx","weUseCookiesToAnalyzeOurTraffic","agree","cancel","options","Error","bannersState","banners","i","findIndex","slice"],"mappings":"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","file":"assets/scripts/home.f2f7f432.js","sourcesContent":["import { atom } from 'recoil'\nimport { v4 } from 'uuid'\n\nconst cookieDialogKeyState = atom({\n  key: 'cookieDialogKeyState',\n  default: v4(),\n})\n\nexport default cookieDialogKeyState\n","import { atom } from 'recoil'\nimport { v4 } from 'uuid'\n\nconst reloadNotToAcceptCookiesBannerKeyState = atom({\n  key: 'reloadNotToAcceptCookiesBannerKeyState',\n  default: v4(),\n})\n\nexport default reloadNotToAcceptCookiesBannerKeyState\n","import React from 'react'\nimport { CustomFormatConfig, FormattedTime } from 'react-intl'\n\ntype Props =\n  & Alt.Omit<Intl.DateTimeFormatOptions, /* 'dateStyle' |  */'weekday' | 'era' | 'year' | 'month' | 'day'>\n  & CustomFormatConfig\n  & {\n      value: string | number | Date | undefined\n    }\n\nconst FormattedTimeOfDay: React.FC<Props> = (props) => (\n  <FormattedTime\n    { ...props }\n    // dateStyle={ undefined }\n    weekday={ undefined }\n    era={ undefined }\n    year={ undefined }\n    month={ undefined }\n    day={ undefined }\n  />\n)\n\nexport default FormattedTimeOfDay\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport FormattedTimeOfDay from '~/components/FormattedTimeOfDay'\nimport { State } from '~/redux'\n\ninterface StateProps {\n  now: Date\n}\n\ntype Props =\n  & StateProps\n\n// TODO: delete?\nconst CurrentTimeOfDay: React.FC<Props> = ({ now }) => (\n  <FormattedTimeOfDay value={ now } format=\"medium\" />\n)\n\n// connect\n\nconst mapStateToProps = ({ io: { now } }: State): StateProps => ({\n  now,\n})\n\nexport default connect(mapStateToProps)(CurrentTimeOfDay)\n","const identity = <T extends U, U>(it: T): U => it\n\nexport default identity\n","// NOTE: undefined を継承すると super に失敗するため、 class {} にフォールバックする。 globalThis.Notification を polyfill すると globalThis.Notification の有無を判定できなくなる。\nexport default class Notification\n  extends (globalThis.Notification ?? class {}) // tslint:disable-line:max-classes-per-file\n{\n  private _timestamp: number\n\n  constructor(...args: ConstructorParameters<typeof globalThis.Notification>) {\n    super(...args)\n\n    this._timestamp = new Date().getTime()\n  }\n\n  public override get timestamp() {\n    return this._timestamp\n  }\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  sendPushNotification: 'Send push notification',\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport SendIcon from '@material-ui/icons/Send'\nimport React, { useCallback, useMemo } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useRecoilState } from 'recoil'\n\nimport notificationsState from '~/atoms/notificationsState'\nimport useOnceForEachEffect from '~/hooks/useOnceForEachEffect'\nimport Notification from '~/polyfills/Notification'\nimport messages from './messages'\n\ninterface Props {\n  inputFor: React.RefObject<HTMLInputElement | HTMLTextAreaElement>\n}\n\nconst NotifyMeButton: React.FC<Props> = ({ inputFor: ref }) => {\n  const [notifications, setNotifications] = useRecoilState(notificationsState)\n  const disabled = useMemo(() => ref.current === null || /^\\p{White_Space}*$/u.test(ref.current.value), [ref.current?.value])\n\n  const handleNotifyButtonClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(async () => {\n    const input = ref.current\n\n    if (input === null) {\n      return\n    }\n\n    const permission = await Notification.requestPermission()\n\n    if (permission === 'granted') {\n      setNotifications((ns) => [...ns, new Notification(input.value)])\n    }\n  }, [ref])\n\n  const handleNotificationClose = useCallback<NonNullable<Notification['onclose']>>((event) => {\n    const notification = event.target\n\n    if (!(notification instanceof Notification)) {\n      return\n    }\n\n    setNotifications((ns) => ns.filter((n) => n !== notification))\n  }, [])\n\n  useOnceForEachEffect(notifications, undefined, (notification) => {\n    notification.addEventListener('close', handleNotificationClose)\n  }, [notifications, handleNotificationClose])\n\n  if (!('Notification' in globalThis)) {\n    return null\n  }\n\n  return (\n    <Tooltip\n      title={ <FormattedMessage { ...messages.sendPushNotification } /> }\n      disableFocusListener={ disabled }\n      disableHoverListener={ disabled }\n      disableTouchListener={ disabled }\n    >\n      <span>\n        <IconButton\n          onClick={ handleNotifyButtonClick }\n          disabled={ disabled }\n        >\n          <SendIcon />\n        </IconButton>\n      </span>\n    </Tooltip>\n  )\n}\n\nexport default NotifyMeButton\n","import { DependencyList, useEffect } from 'react'\n\nimport identity from '~/identity'\n\ntype OnceForEachEffectCallback<T> = (x: T) => (void | ((x: T) => void | undefined))\n\n/**\n * @param identify that meets `a` is `b` in SameValueZero → `identify(a) === identify(b)`\n */\nexport default function useOnceForEachEffect<T, U = T>(xs: readonly T[], identify: (x: T) => U = identity as (x: T) => U, effect: OnceForEachEffectCallback<T>, deps?: DependencyList) { // TODO: delete `as (x: T) => U`; 引数の型は反変なので、デフォルト引数の型は、引数の型と同じかそれより狭い型に安全に変換できるが、 TypeScript の実装はそうなっていない。\n  useEffect(() => {\n    const cleanups: {\n      x: T,\n      cleanup: ReturnType<typeof effect>\n    }[] = []\n\n    const doneIds: U[] = []\n\n    // tslint:disable-next-line:no-loop-statement\n    for (const x of xs) {\n      const id = identify(x)\n\n      if (!doneIds.includes(id)) {\n        // tslint:disable-next-line:no-array-mutation\n        cleanups.push({\n          x,\n          cleanup: effect(x),\n        })\n\n        // tslint:disable-next-line:no-array-mutation\n        doneIds.push(id)\n      }\n    }\n\n    return () => {\n      // tslint:disable-next-line:no-loop-statement\n      for (const { x, cleanup } of cleanups) {\n        // cleanup?.(x)\n\n        if (typeof cleanup !== 'undefined') {\n          cleanup(x)\n        }\n      }\n    }\n  }, deps ?? []) // eslint-disable-line react-hooks/exhaustive-deps\n}\n","import Avatar from '@material-ui/core/Avatar'\nimport Button from '@material-ui/core/Button'\nimport SecurityIcon from '@material-ui/icons/Security'\nimport React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useRecoilCallback } from 'recoil'\n\nimport cookieConsentObtainedState from '~/atoms/cookieConsentObtainedState'\nimport Banner from '~/components/Banner'\nimport messages from './messages'\n\ninterface Props {\n  onAgree?(): void\n  onCancel?(): void\n}\n\nconst ObtainCookieConsentBanner: React.FC<Props> = ({ onAgree, onCancel }) => {\n  const handleAgree = useRecoilCallback(({ set }) => () => {\n    set(cookieConsentObtainedState, true)\n\n    onAgree?.()\n  }, [onAgree])\n\n  return (\n    <Banner\n      leading={ <Avatar>\n        <SecurityIcon />\n      </Avatar> }\n      text={ <FormattedMessage { ...messages.weUseCookiesToAnalyzeOurTraffic } /> }\n      actions={ <>\n        <Button variant=\"text\" color=\"primary\" onClick={ handleAgree }>\n          <FormattedMessage { ...messages.agree } />\n        </Button>\n        <Button variant=\"text\" color=\"primary\" onClick={ onCancel }>\n          <FormattedMessage { ...messages.cancel } />\n        </Button>\n      </> }\n    />\n  )\n}\n\nexport default ObtainCookieConsentBanner\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  consentToUseCookies: 'Consent to use cookies…',\n  youHaveAlreadyConsentedToUseCookies: 'You have already consented to use cookies.',\n})\n","import Button from '@material-ui/core/Button'\nimport { useInjection } from 'inversify-react'\nimport { useSnackbar } from 'notistack'\nimport React, { useCallback } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useRecoilValue } from 'recoil'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport cookieConsentObtainedState from '~/atoms/cookieConsentObtainedState'\nimport cookieDialogKeyState from '~/atoms/cookieDialogKeyState'\nimport reloadNotToAcceptCookiesBannerKeyState from '~/atoms/reloadNotToAcceptCookiesBannerKeyState'\nimport ObtainCookieConsentBanner from '~/components/ObtainCookieConsentBanner'\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport useBanner from '~/hooks/useBanner'\nimport useGtm from '~/hooks/useGtm'\nimport currentBannerState from '~/selectors/currentBannerState'\nimport messages from './messages'\n\n// NOTE: このコンポーネントがアンマウント、再マウントされても dismiss がうまく動くように、 `cookieDialogKey` を Recoil 経由で共有している。これを解消するには、 `cookieDialogKey` を prop にするか、 <RecoilRoot> を分割する。\n/**\n * クッキーダイアログを表示するボタンを表現する.\n *\n * NOTE: https://github.com/mdn/content/blob/f4556b8707dcdd6fec9c6f121a24e6988309f95c/files/en-us/web/api/notification/requestpermission/index.html#L87-L89 と同じような理由で、 Rap では、ユーザーの操作無しにクッキーダイアログを表示することはしない。\n */\nconst ObtainCookieConsentButton: React.FC = () => {\n  const config = useInjection<ConfigRegistry>('EnvVarConfig')\n  const gtmContainerId = config.get('GTM_CONTAINER_ID')\n  const gtm = useGtm()\n  const banner = useBanner()\n  const { enqueueSnackbar } = useSnackbar()\n  const cookieConsentObtained = useRecoilValue(cookieConsentObtainedState)\n  const cookieDialogKey = useRecoilValue(cookieDialogKeyState)\n  const currentBanner = useRecoilValue(currentBannerState)\n  const reloadNotToAcceptCookiesBannerKey = useRecoilValue(reloadNotToAcceptCookiesBannerKeyState)\n\n  const handleAgree = useCallback(() => {\n    shouldBePresent(gtmContainerId)\n\n    // NOTE: 画面のちらつきを減らすために、裏にある方を先に隠す。\n    banner.hide({\n      key: reloadNotToAcceptCookiesBannerKey,\n      safe: true,\n    })\n\n    banner.hide({ key: cookieDialogKey })\n\n    gtm.install(gtmContainerId)\n  }, [banner, reloadNotToAcceptCookiesBannerKey, cookieDialogKey, gtm, gtmContainerId])\n\n  const handleCancel = useCallback(() => {\n    banner.hide({ key: cookieDialogKey })\n  }, [banner, cookieDialogKey])\n\n  // NOTE: すでに表示されているバナーに `handleAgree` や `handleCancel` の変更を反映させるには、 useEffect 等を使って、 `handleAgree` や `handleCancel` が変更されるたびに、現在のバナーの `key` が `cookieDialogKey` と一致するかどうかを調べ、一致する場合は同じ `key` を使って `banner.show()` する。\n  const handleClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(() => {\n    if (!cookieConsentObtained) {\n      banner.show(<ObtainCookieConsentBanner\n        onAgree={ handleAgree }\n        onCancel={ handleCancel }\n      />, {\n        key: cookieDialogKey,\n        replaceable: true,\n      })\n    } else {\n      enqueueSnackbar(<FormattedMessage { ...messages.youHaveAlreadyConsentedToUseCookies } />)\n    }\n  }, [cookieConsentObtained, banner, handleAgree, handleCancel, cookieDialogKey, enqueueSnackbar])\n\n  return (\n    <Button onClick={ handleClick } disabled={ currentBanner?.key === cookieDialogKey }>\n      <FormattedMessage { ...messages.consentToUseCookies } />\n    </Button>\n  )\n}\n\nexport default ObtainCookieConsentButton\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  setTheClock: 'Set the clock',\n})\n","import Button from '@material-ui/core/Button'\nimport React from 'react'\nimport { FormattedMessage} from 'react-intl'\nimport { connect } from 'react-redux'\n\nimport { updateNow } from '~/redux/modules/io'\nimport messages from './messages'\n\ninterface DispatchProps {\n  updateNow(): void\n}\n\ntype Props =\n  & DispatchProps\n\n// TODO: delete\nconst SetClockButton: React.FC<Props> = ({ updateNow }) => (\n  <Button onClick={ updateNow }>\n    <FormattedMessage { ...messages.setTheClock } />\n  </Button>\n)\n\n// connect\n\nconst mapDispatchToProps: DispatchProps = {\n  updateNow,\n}\n\nexport default connect(null, mapDispatchToProps)(SetClockButton)\n","import React from 'react'\nimport { FormattedDate } from 'react-intl'\nimport { connect } from 'react-redux'\n\nimport { State } from '~/redux'\n\ninterface StateProps {\n  now: Date\n}\n\ntype Props =\n  & StateProps\n\n// TODO: delete?\nconst Today: React.FC<Props> = ({ now }) => (\n  <FormattedDate value={ now } format=\"medium\" />\n)\n\n// connect\n\nconst mapStateToProps = ({ io: { now } }: State): StateProps => ({\n  now,\n})\n\nexport default connect(mapStateToProps)(Today)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  home: 'Home',\n})\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport { useInjection } from 'inversify-react'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport Helmet from 'react-helmet'\nimport { FormattedNumber, useIntl } from 'react-intl'\n\nimport CurrentTimeOfDay from '~/components/CurrentTimeOfDay'\nimport NotifyMeButton from '~/components/NotifyMeButton'\nimport ObtainCookieConsentButton from '~/components/ObtainCookieConsentButton'\nimport { createPage } from '~/components/PageTemplate'\nimport SetClockButton from '~/components/SetClockButton'\nimport Today from '~/components/Today'\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport messages from './messages'\n\nconst crateImport = import('~/crate/pkg')\n\nconst HomePage: React.FC = () => {\n  const config = useInjection<ConfigRegistry>('EnvVarConfig')\n  const gtmContainerId = config.get('GTM_CONTAINER_ID')\n  const { formatMessage } = useIntl()\n  const input = useRef<HTMLInputElement>(null)\n  const [text, setText] = useState('')\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  useEffect(() => {\n    // tslint:disable-next-line:semicolon\n    ;(async () => {\n      const { add } = await crateImport\n\n      console.log(add(1, 1)) // tslint:disable-line:no-console\n    })()\n  }, [])\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.home) } />\n      <Typography>\n        <FormattedNumber format=\"usd\" value={ 100 } />\n      </Typography>\n      <Typography>\n        <Today /> <CurrentTimeOfDay />\n      </Typography>\n      <SetClockButton />\n      <TextField\n        value={ text }\n        onChange={ handleChange }\n        InputProps={ {\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <NotifyMeButton inputFor={ input } />\n            </InputAdornment>\n          ),\n        } }\n        inputProps= { {\n          ref: input,\n        } }\n      />\n      { gtmContainerId !== undefined && <ObtainCookieConsentButton /> }\n    </>\n  )\n}\n\nexport default createPage(HomePage)\n","import { AvatarProps } from '@material-ui/core/Avatar'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Bowser from 'bowser'\nimport React from 'react'\n\nimport Spacer from '~/components/Spacer'\n\nexport interface Props {\n  leading?: React.ReactElement<AvatarProps, React.ComponentType<AvatarProps>>\n  text: React.ReactNode\n  actions: React.ReactNode\n}\n\n// TODO: Remove\n// TODO: Detect UA changes?\nconst browser = Bowser.getParser(navigator.userAgent)\n\nconst isMobile = browser.is('Mobile')\n\n/**\n * An implementation of https://material.io/components/banners.\n *\n * NOTE: Not support the no leading, mobile, one-line version.\n */\nconst Banner: React.FC<Props> = ({ leading, text, actions }) => (\n  <Paper square elevation={ 0 }>\n    <Box\n      display=\"flex\"\n      flexWrap=\"nowrap\"\n      alignItems={ isMobile ? 'flex-start' : 'center' }\n    >\n      { leading !== undefined && (\n        <Box\n          my={ isMobile ? 3 : 2 }\n          ml={ 2 }\n        >\n          { leading }\n        </Box>\n      ) }\n      <Box\n        alignSelf=\"stretch\"\n        display=\"flex\"\n        flexGrow={ 1 }\n        alignItems={ isMobile ? 'flex-start' : 'center' }\n        flexWrap={ isMobile ? 'wrap' : undefined }\n        gridColumnGap={ (isMobile ? 36 : 90) - 16 }\n        gridRowGap={ isMobile ? (leading !== undefined ? 20 : 12) - 10 : undefined }\n      >\n        <Box\n          mt={ isMobile ? 3 : 2 }\n          mb={ isMobile ? undefined : 2 }\n          ml={ isMobile ? 2 : 3 }\n          mr={ 1 }\n        >\n          <Typography variant=\"body2\">{ text }</Typography>{ /* TODO: Align to baseline */ }\n        </Box>\n        <Box\n          alignSelf=\"flex-end\"\n          display=\"flex\"\n          flexGrow={ 1 }\n        >\n          <Spacer />\n          <Box\n            mt={ isMobile ? 1.25 : 1 }\n            mx={ 1 }\n            mb={ 1 }\n            display=\"flex\"\n            gridColumnGap={ 8 }\n          >\n            { actions }\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  </Paper>\n)\n\nexport default Banner\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  weUseCookiesToAnalyzeOurTraffic: 'We use cookies to analyze our traffic.',\n  agree: 'Agree',\n  cancel: 'Cancel',\n})\n","import { useRecoilCallback } from 'recoil'\nimport { v4 } from 'uuid'\n\nimport bannersState from '~/atoms/bannersState'\nimport { Props as BannerProps } from '~/components/Banner'\nimport currentBannerState from '~/selectors/currentBannerState'\n\ntype BannerElement = React.ReactElement<BannerProps, React.ComponentType<BannerProps>>\n\ninterface ShowOptions {\n  key?: string\n  replaceable?: boolean\n}\n\ninterface HideOptions {\n  key?: string\n  safe?: boolean // no failures if true\n}\n\nconst useBanner = () => {\n  const show = useRecoilCallback(({ set }) => (banner: BannerElement, options?: ShowOptions) => {\n    const key = options?.key ?? v4()\n    const replaceable = options?.replaceable ?? false\n\n    set(currentBannerState, {\n      banner,\n      key,\n      replaceable,\n    })\n\n    return key\n  })\n\n  const hide = useRecoilCallback(({ set }) => (options?: HideOptions) => {\n    const key = options?.key\n    const safe = options?.safe ?? false\n\n    if (key === undefined) {\n      set(currentBannerState, (currentBanner) => {\n        if (currentBanner === null && !safe) {\n          throw new Error('No banner found.')\n        }\n\n        return null\n      })\n    } else {\n      set(bannersState, (banners) => {\n        const i = banners.findIndex((banner) => banner.key === key)\n\n        if (i === -1 && !safe) {\n          throw new Error('No banner found.')\n        }\n\n        if (i !== -1) {\n          return [\n            ...banners.slice(0, i),\n            ...banners.slice(i + 1),\n          ]\n        }\n\n        return banners\n      })\n    }\n  })\n\n  return { show, hide }\n}\n\nexport default useBanner\n"],"sourceRoot":""}