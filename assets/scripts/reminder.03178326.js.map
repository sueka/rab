{"version":3,"sources":["webpack://react-app-prototype/./src/lib/curry.ts","webpack://react-app-prototype/./src/components/Reminder/AddTaskButton/messages.ts","webpack://react-app-prototype/./src/components/Reminder/AddTaskButton/index.tsx","webpack://react-app-prototype/./src/components/Reminder/TaskList/index.tsx","webpack://react-app-prototype/./src/components/Reminder/TaskListItem/DeleteTaskButton/index.tsx","webpack://react-app-prototype/./src/components/Reminder/TaskListItem/messages.ts","webpack://react-app-prototype/./src/components/Reminder/TaskListItem/index.tsx","webpack://react-app-prototype/./src/components/Reminder/TaskListItemDropTarget/index.tsx","webpack://react-app-prototype/./src/components/Reminder/index.tsx","webpack://react-app-prototype/./src/components/App/ReminderPage/messages.ts","webpack://react-app-prototype/./src/components/App/ReminderPage/index.tsx","webpack://react-app-prototype/./src/lib/asserters/commonAsserters.ts","webpack://react-app-prototype/./src/lib/validators/stringValidators.ts","webpack://react-app-prototype/./src/components/Reminder/TaskListItem/classes.css","webpack://react-app-prototype/./src/components/Reminder/TaskListItem/classes.css?f08a"],"names":["f","x","xs","defineMessages","add","addTask","Button","onClick","variant","color","messages","children","List","IconButton","Delete","asBoundedLengthStringErrorMessage","value","index","onChange","onDelete","validate","useDrag","item","type","isDragging","monitor","getItem","isIdenticalTo","collect","dragging","drag","preview","dir","useContext","IntlProviderContext","className","useMemo","classnames","classes","handleContentChange","useCallback","event","content","target","handleDoneChange","_checked","done","checked","useIntl","formatMessage","locale","errors","hasError","Object","values","some","error","undefined","helperText","isOneOf","keys","key","text","Case","Error","ref","ListItem","container","secondaryAction","ListItemIcon","DragHandle","Checkbox","TextField","fullWidth","disabled","ListItemSecondaryAction","moveTask","div","useRef","useDrop","accept","hover","shouldBePresent","current","clientOffset","getClientOffset","boundingClientRect","getBoundingClientRect","pointerY","y","top","middleY","bottom","drop","asObject","input","leftOnly","named","asBoundedLengthString","upperBound","asBoolean","mapDispatchToProps","getTasks","getTasksAsync","addTaskAsync","changeTaskContent","changeTaskContentAsync","markTaskAsDone","markTaskAsDoneAsync","markTaskAsUndone","markTaskAsUndoneAsync","deleteTask","deleteTaskAsync","connect","tasks","reminder","useEffect","changeTask","taskId","map","task","id","curry","toArray","createPage","Helmet","title","it","shouldBeNullable","lowerBound","Infinity","inputAsString","asString","length","ValidationError","typed","asUrl","isUrl","exports","___CSS_LOADER_API_IMPORT___","push","module","locals","api","__esModule","default","options"],"mappings":"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","file":"assets/scripts/reminder.03178326.js","sourcesContent":["type CurryFunction = <T0, Ts extends unknown[], U>(f: (x: T0, ...xs: Ts) => U) => (x: T0) => (...xs: Ts) => U\n\nconst curry: CurryFunction = (f) => (x) => (...xs) => f(x, ...xs)\n\nexport default curry\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  add: 'add',\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport Button from '@material-ui/core/Button'\n\nimport messages from './messages'\n\nexport interface Props {\n  addTask(): void\n}\n\nconst AddTaskButton: React.FC<Props> = ({ addTask }) => (\n  <Button onClick={ addTask } variant=\"contained\" color=\"secondary\">\n    <FormattedMessage { ...messages.add } />\n  </Button>\n)\n\nexport default AddTaskButton\n","import React from 'react'\n\nimport List from '@material-ui/core/List'\n\nimport { Props as TaskListItemDropTargetProps } from '~/components/Reminder/TaskListItemDropTarget'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemDropTargetProps, React.ComponentType<TaskListItemDropTargetProps>> | Array<React.ReactElement<TaskListItemDropTargetProps, React.ComponentType<TaskListItemDropTargetProps>>>\n}\n\nconst TaskList: React.FC<Props> = ({ children }) => (\n  <List>\n    { children }\n  </List>\n)\n\nexport default TaskList\n","import React from 'react'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nexport interface Props {\n  onClick(): void\n}\n\nconst DeleteTaskButton: React.FC<Props> = ({ onClick }) => (\n  <IconButton onClick={ onClick }>\n    <DeleteIcon />\n  </IconButton>\n)\n\nexport default DeleteTaskButton\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  asBoundedLengthStringErrorMessage: '{ name } must be 0-{ upperBound } characters.',\n})\n","import Case from 'case'\nimport classnames from 'classnames'\nimport React, { useCallback, useContext, useMemo } from 'react'\nimport { DragObjectWithType, useDrag } from 'react-dnd'\nimport { useIntl } from 'react-intl'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport TextField from '@material-ui/core/TextField'\nimport DragHandleIcon from '@material-ui/icons/DragHandle'\n\nimport Task, { TaskParams } from '~/domain/entity/Task'\nimport IntlProviderContext from '~/lib/contexts/IntlProviderContext'\nimport { isOneOf } from '~/lib/guards/commonGuards'\nimport ValidationError from '~/lib/validators/ValidationError'\nimport DeleteTaskButton from './DeleteTaskButton'\nimport classes from './classes.css'\nimport messages from './messages'\n\nexport interface Props {\n  value: Task\n  index: number\n\n  onChange(value: Partial<TaskParams>): void\n  onDelete(): void\n  validate(input: Task): Partial<Record<keyof Task, ValidationError>>\n}\n\ninterface CollectedProps {\n  dragging: boolean\n}\n\nexport interface DragObject extends DragObjectWithType {\n  value: Task\n  index: number\n}\n\nconst TaskListItem: React.FC<Props> = ({ value, index, onChange, onDelete, validate }) => {\n  const [{ dragging }, drag, preview] = useDrag<DragObject, unknown, CollectedProps>({\n    item: {\n      type: 'TaskListItem',\n      value,\n      index,\n    },\n    isDragging: (monitor) => {\n      const item: DragObject = monitor.getItem()\n\n      return value.isIdenticalTo(item.value)\n    },\n    collect: (monitor) => ({\n      dragging: monitor.isDragging(),\n    }),\n  })\n\n  const { dir } = useContext(IntlProviderContext)\n\n  const className = useMemo(() => classnames(classes.TaskListItemContainer, {\n    [classes.Ltr]: dir === 'ltr',\n    [classes.Rtl]: dir === 'rtl',\n    [classes.Dragging]: dragging,\n  }), [dir, dragging])\n\n  const handleContentChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    onChange({\n      content: event.target.value,\n    })\n  }, [onChange])\n\n  const handleDoneChange = useCallback((event: React.ChangeEvent<HTMLInputElement>, _checked: boolean) => {\n    onChange({\n      done: event.target.checked,\n    })\n  }, [onChange])\n\n  const { formatMessage, locale } = useIntl()\n\n  const errors = useMemo(() => validate(value), [value, validate])\n  const hasError = useMemo(() => Object.values(errors).some((error) => error !== undefined), [errors])\n\n  const helperText = useMemo(() => {\n    if (errors.content === undefined) {\n      return null\n    }\n\n    if (isOneOf(...Object.keys(messages))(errors.content.key)) {\n      const text = formatMessage(messages[errors.content.key], errors.content.values)\n\n      switch (locale) {\n        case 'en': return Case.sentence(text)\n        case 'ja':\n        case 'he': return text\n        default: throw new Error // TODO\n      }\n    }\n\n    return null // TODO\n  }, [locale, formatMessage, errors.content])\n\n  return (\n    <div ref={ preview }>\n      <ListItem\n        classes={ {\n          container: className,\n          secondaryAction: classes.ListItemSecondaryAction,\n        } }\n      >\n        <ListItemIcon>\n          <div ref={ drag }>\n            <DragHandleIcon />\n          </div>\n        </ListItemIcon>\n        <ListItemIcon>\n          <Checkbox checked={ value.done } onChange={ handleDoneChange } />\n        </ListItemIcon>\n        <TextField\n          fullWidth\n          value={ value.content }\n          onChange={ handleContentChange }\n          disabled={ value.done }\n          error={ hasError }\n          helperText={ helperText }\n        />\n        <ListItemSecondaryAction>\n          <DeleteTaskButton onClick={ onDelete } />\n        </ListItemSecondaryAction>\n      </ListItem>\n    </div>\n  )\n}\n\nexport default TaskListItem\n","import React, { useRef } from 'react'\nimport { useDrop } from 'react-dnd'\n\nimport { DragObject, Props as TaskListItemProps } from '~/components/Reminder/TaskListItem'\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemProps, React.ComponentType<TaskListItemProps>>\n  index: number\n\n  moveTask(sourceIndex: number, targetIndex: number): void\n}\n\nconst TaskListItemDropTarget: React.FC<Props> = ({ children, index, moveTask }) => {\n  const div = useRef<HTMLDivElement>(null)\n\n  const [, drop] = useDrop<DragObject, unknown, unknown>({\n    accept: 'TaskListItem',\n    hover(item, monitor) {\n      shouldBePresent(div.current)\n\n      if (item.index === index) {\n        return\n      }\n\n      const clientOffset = monitor.getClientOffset()\n\n      shouldBePresent(clientOffset)\n\n      const boundingClientRect = div.current.getBoundingClientRect()\n      const pointerY = clientOffset.y - boundingClientRect.top\n      const middleY = (boundingClientRect.bottom - boundingClientRect.top) / 2\n\n      // downwards\n      if (item.index < index && pointerY < middleY) {\n        return\n      }\n\n      // upwards\n      if (item.index > index && pointerY > middleY) {\n        return\n      }\n\n      moveTask(item.index, index)\n\n      // tslint:disable-next-line:no-object-mutation\n      item.index = index\n    },\n  })\n\n  drop(div)\n\n  return (\n    <div ref={ div }>\n      { children }\n    </div>\n  )\n}\n\nexport default TaskListItemDropTarget\n","import { List } from 'immutable'\nimport React, { useCallback, useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport Task, { TaskParams } from '~/domain/entity/Task'\nimport TaskId from '~/domain/vo/TaskId'\nimport curry from '~/lib/curry'\nimport { asBoolean, asObject, leftOnly, named } from '~/lib/validators/commonValidators'\nimport { asBoundedLengthString } from '~/lib/validators/stringValidators'\nimport { State } from '~/redux'\nimport { addTaskAsync, changeTaskContentAsync, deleteTaskAsync, getTasksAsync, markTaskAsDoneAsync, markTaskAsUndoneAsync, moveTask } from '~/redux/modules/reminder'\nimport AddTaskButton from './AddTaskButton'\nimport TaskList from './TaskList'\nimport TaskListItem from './TaskListItem'\nimport TaskListItemDropTarget from './TaskListItemDropTarget'\n\ninterface StateProps {\n  tasks: List<Task>\n}\n\ninterface DispatchProps {\n  getTasks(): void\n  addTask(): void\n  changeTaskContent(taskId: TaskId, content: string): void\n  markTaskAsDone(taskId: TaskId): void\n  markTaskAsUndone(taskId: TaskId): void\n  deleteTask(taskId: TaskId): void\n  moveTask(source: number, dest: number): void\n}\n\ntype Props =\n  & StateProps\n  & DispatchProps\n\nconst validate = asObject('a Task for presentation', (input) => ({\n  content: leftOnly(named('content', asBoundedLengthString({\n    upperBound: 140,\n  })))(input.content),\n  done: leftOnly(asBoolean)(input.done),\n}))\n\nconst Reminder: React.FC<Props> = ({ tasks, getTasks, addTask, changeTaskContent, markTaskAsDone, markTaskAsUndone, deleteTask, moveTask }) => {\n  useEffect(() => {\n    getTasks()\n  }, [getTasks])\n\n  const changeTask = useCallback((taskId: TaskId, { content, done }: Partial<Alt.Omit<TaskParams, 'id'>>) => {\n    if (content !== undefined) {\n      changeTaskContent(taskId, content)\n    }\n\n    if (done !== undefined) {\n      if (done) {\n        markTaskAsDone(taskId)\n      } else {\n        markTaskAsUndone(taskId)\n      }\n    }\n  }, [changeTaskContent, markTaskAsDone, markTaskAsUndone])\n\n  return (\n    <>\n      <TaskList>\n        {\n          tasks.map((task, index) => (\n            <TaskListItemDropTarget\n              key={ index }\n              index={ index }\n              moveTask={ moveTask }\n            >\n              <TaskListItem\n                key={ task.id.value }\n                value={ task }\n                index={ index }\n                onChange={ curry(changeTask)(task.id) }\n                onDelete={ curry(deleteTask)(task.id) }\n                validate={ validate }\n              />\n            </TaskListItemDropTarget>\n          )).toArray()\n        }\n      </TaskList>\n      <AddTaskButton addTask={ addTask } />\n    </>\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ reminder: { tasks } }: State): StateProps => ({\n  tasks,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  getTasks: getTasksAsync,\n  addTask: addTaskAsync,\n  changeTaskContent: changeTaskContentAsync,\n  markTaskAsDone: markTaskAsDoneAsync,\n  markTaskAsUndone: markTaskAsUndoneAsync,\n  deleteTask: deleteTaskAsync,\n  moveTask,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  reminder: 'reminder',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport Reminder from '~/components/Reminder'\nimport { createPage } from '~/templates/PageTemplate'\nimport messages from './messages'\n\nconst ReminderPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.reminder) } />\n      <Reminder />\n    </>\n  )\n}\n\nexport default createPage(ReminderPage)\n","export function shouldBePresent<T>(it: T | null | undefined): asserts it is T {\n  if (it == null) {\n    throw new Error //\n  }\n}\n\nexport function shouldBeNullable<T>(it: T | null | undefined): asserts it is null | undefined {\n  if (it != null) {\n    throw new Error //\n  }\n}\n","import assert from 'assert'\n\nimport { isUrl } from '~/lib/guards/stringGuards'\nimport typed from '~/lib/typed'\nimport ValidationError from './ValidationError'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new ValidationError(\n    typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`,\n    'asBoundedLengthStringErrorMessage',\n    {\n      input: inputAsString.length,\n      lowerBound,\n      upperBound,\n    }\n  )\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new ValidationError(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".src-components-Reminder-TaskListItem-classes__TaskListItemContainer--3F5ef.src-components-Reminder-TaskListItem-classes__Dragging--1TtFC {\\n  opacity: 0;\\n}\\n\\n.src-components-Reminder-TaskListItem-classes__ListItemSecondaryAction--3QycB {\\n  -webkit-padding-end: 72px;\\n          padding-inline-end: 72px; /* TODO */\\n}\\n\\n/* TODO: Polyfill and delete the following */\\n.src-components-Reminder-TaskListItem-classes__ListItemSecondaryAction--3QycB.src-components-Reminder-TaskListItem-classes__Ltr--3iC7d {\\n  padding-right: 72px;\\n}\\n\\n.src-components-Reminder-TaskListItem-classes__ListItemSecondaryAction--3QycB.src-components-Reminder-TaskListItem-classes__Rtl--1yl21 {\\n  padding-left: 72px;\\n}\\n\", \"\"]);\n// Exports\nexports.locals = {\n\t\"TaskListItemContainer\": \"src-components-Reminder-TaskListItem-classes__TaskListItemContainer--3F5ef\",\n\t\"Dragging\": \"src-components-Reminder-TaskListItem-classes__Dragging--1TtFC\",\n\t\"ListItemSecondaryAction\": \"src-components-Reminder-TaskListItem-classes__ListItemSecondaryAction--3QycB\",\n\t\"Ltr\": \"src-components-Reminder-TaskListItem-classes__Ltr--3iC7d\",\n\t\"Rtl\": \"src-components-Reminder-TaskListItem-classes__Rtl--1yl21\"\n};\nmodule.exports = exports;\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../../node_modules/postcss-loader/src/index.js!./classes.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"sourceRoot":""}