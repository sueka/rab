{"version":3,"sources":["webpack://rap/./node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js","webpack://rap/./node_modules/@material-ui/icons/Send.js","webpack://rap/./src/lib/components/FormattedTimeOfDay/index.tsx","webpack://rap/./src/components/CurrentTimeOfDay/index.tsx","webpack://rap/./src/lib/identity.ts","webpack://rap/./src/lib/polyfills/Notification.ts","webpack://rap/./src/components/NotifyMeButton/messages.ts","webpack://rap/./src/components/NotifyMeButton/index.tsx","webpack://rap/./src/lib/hooks/useOnceForEachEffect.ts","webpack://rap/./src/components/SetClockButton/messages.ts","webpack://rap/./src/components/SetClockButton/index.tsx","webpack://rap/./src/components/Today/index.tsx","webpack://rap/./src/components/App/HomePage/messages.ts","webpack://rap/./src/components/App/HomePage/index.tsx"],"names":["InputAdornment","props","ref","children","classes","className","_props$component","component","Component","_props$disablePointer","disablePointerEvents","_props$disableTypogra","disableTypography","position","variantProp","variant","other","muiFormControl","value","root","hiddenLabel","filled","positionStart","positionEnd","margin","marginDense","color","display","height","maxHeight","alignItems","whiteSpace","marginTop","marginRight","marginLeft","pointerEvents","name","_interopRequireDefault","_interopRequireWildcard","exports","React","_default","default","createElement","d","weekday","undefined","era","year","month","day","connect","now","io","format","it","Notification","args","_timestamp","Date","getTime","this","globalThis","defineMessages","sendANotificationToYourBrowser","inputFor","useRecoilState","notificationsState","notifications","setNotifications","handleNotifyButtonClick","useCallback","input","current","requestPermission","ns","handleNotificationClose","event","notification","target","filter","n","xs","identify","identity","effect","deps","useEffect","cleanups","doneIds","x","id","includes","push","cleanup","useOnceForEachEffect","addEventListener","Tooltip","title","messages","IconButton","onClick","disabled","test","Send","setTheClock","mapDispatchToProps","updateNow","Button","home","createPage","formatMessage","useIntl","useRef","useState","text","setText","handleChange","Helmet","Typography","TextField","onChange","InputProps","endAdornment","inputProps"],"mappings":"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","file":"assets/scripts/home.c67f3eac.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {\n      'start': classes.positionStart,\n      'end': classes.positionEnd\n    }[position], muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import React from 'react'\nimport { CustomFormatConfig, FormattedTime } from 'react-intl'\n\ntype Props =\n  & Alt.Omit<Intl.DateTimeFormatOptions, /* 'dateStyle' |  */'weekday' | 'era' | 'year' | 'month' | 'day'>\n  & CustomFormatConfig\n  & {\n      value: string | number | Date | undefined\n    }\n\nconst FormattedTimeOfDay: React.FC<Props> = (props) => (\n  <FormattedTime\n    { ...props }\n    // dateStyle={ undefined }\n    weekday={ undefined }\n    era={ undefined }\n    year={ undefined }\n    month={ undefined }\n    day={ undefined }\n  />\n)\n\nexport default FormattedTimeOfDay\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport FormattedTimeOfDay from '~/lib/components/FormattedTimeOfDay'\nimport { State } from '~/redux'\n\ninterface StateProps {\n  now: Date\n}\n\ntype Props =\n  & StateProps\n\n// TODO: delete?\nconst CurrentTimeOfDay: React.FC<Props> = ({ now }) => (\n  <FormattedTimeOfDay value={ now } format=\"medium\" />\n)\n\n// connect\n\nconst mapStateToProps = ({ io: { now } }: State): StateProps => ({\n  now,\n})\n\nexport default connect(mapStateToProps)(CurrentTimeOfDay)\n","const identity = <T extends U, U>(it: T): U => it\n\nexport default identity\n","// NOTE: undefined を継承すると super に失敗するため、 class {} にフォールバックする。 globalThis.Notification を polyfill すると globalThis.Notification の有無を判定できなくなる。\nexport default class Notification\n  extends (globalThis.Notification ?? class {}) // tslint:disable-line:max-classes-per-file\n{\n  private _timestamp: number\n\n  constructor(...args: ConstructorParameters<typeof globalThis.Notification>) {\n    super(...args)\n\n    this._timestamp = new Date().getTime()\n  }\n\n  public get timestamp() {\n    return this._timestamp\n  }\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  sendANotificationToYourBrowser: 'Send a notification to your browser',\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport SendIcon from '@material-ui/icons/Send'\nimport React, { useCallback } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useRecoilState } from 'recoil'\n\nimport notificationsState from '~/atoms/notificationsState'\nimport useOnceForEachEffect from '~/lib/hooks/useOnceForEachEffect'\nimport Notification from '~/lib/polyfills/Notification'\nimport messages from './messages'\n\ninterface Props {\n  inputFor: React.RefObject<HTMLInputElement | HTMLTextAreaElement>\n}\n\nconst NotifyMeButton: React.FC<Props> = ({ inputFor: ref }) => {\n  const [notifications, setNotifications] = useRecoilState(notificationsState)\n\n  const handleNotifyButtonClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(async () => {\n    const input = ref.current\n\n    if (input === null) {\n      return\n    }\n\n    const permission = await Notification.requestPermission()\n\n    if (permission === 'granted') {\n      setNotifications((ns) => [...ns, new Notification(input.value)])\n    }\n  }, [ref])\n\n  const handleNotificationClose = useCallback<NonNullable<Notification['onclose']>>((event) => {\n    const notification = event.target\n\n    if (!(notification instanceof Notification)) {\n      return\n    }\n\n    setNotifications((ns) => ns.filter((n) => n !== notification))\n  }, [])\n\n  useOnceForEachEffect(notifications, undefined, (notification) => {\n    notification.addEventListener('close', handleNotificationClose)\n  }, [notifications, handleNotificationClose])\n\n  if (!('Notification' in globalThis)) {\n    return null\n  }\n\n  return (\n    <Tooltip title={ <FormattedMessage { ...messages.sendANotificationToYourBrowser } /> }>\n      <IconButton\n        onClick={ handleNotifyButtonClick }\n        disabled={ ref.current === null || /^\\p{White_Space}*$/u.test(ref.current.value) }\n      >\n        <SendIcon />\n      </IconButton>\n    </Tooltip>\n  )\n}\n\nexport default NotifyMeButton\n","import { DependencyList, useEffect } from 'react'\n\nimport identity from '~/lib/identity'\n\ntype OnceForEachEffectCallback<T> = (x: T) => (void | ((x: T) => void | undefined))\n\n/**\n * @param identify that meets `a` is `b` in SameValueZero → `identify(a) === identify(b)`\n */\nexport default function useOnceForEachEffect<T, U = T>(xs: readonly T[], identify: (x: T) => U = identity as (x: T) => U, effect: OnceForEachEffectCallback<T>, deps?: DependencyList) { // TODO: delete `as (x: T) => U`; 引数の型は反変なので、デフォルト引数の型は、引数の型と同じかそれより狭い型に安全に変換できるが、 TypeScript の実装はそうなっていない。\n  useEffect(() => {\n    const cleanups: {\n      x: T,\n      cleanup: ReturnType<typeof effect>\n    }[] = []\n\n    const doneIds: U[] = []\n\n    // tslint:disable-next-line:no-loop-statement\n    for (const x of xs) {\n      const id = identify(x)\n\n      if (!doneIds.includes(id)) {\n        // tslint:disable-next-line:no-array-mutation\n        cleanups.push({\n          x,\n          cleanup: effect(x),\n        })\n\n        // tslint:disable-next-line:no-array-mutation\n        doneIds.push(id)\n      }\n    }\n\n    return () => {\n      // tslint:disable-next-line:no-loop-statement\n      for (const { x, cleanup } of cleanups) {\n        // cleanup?.(x)\n\n        if (typeof cleanup !== 'undefined') {\n          cleanup(x)\n        }\n      }\n    }\n  }, deps ?? []) // eslint-disable-line react-hooks/exhaustive-deps\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  setTheClock: 'Set the clock',\n})\n","import Button from '@material-ui/core/Button'\nimport React from 'react'\nimport { FormattedMessage} from 'react-intl'\nimport { connect } from 'react-redux'\n\nimport { updateNow } from '~/redux/modules/io'\nimport messages from './messages'\n\ninterface DispatchProps {\n  updateNow(): void\n}\n\ntype Props =\n  & DispatchProps\n\n// TODO: delete\nconst SetClockButton: React.FC<Props> = ({ updateNow }) => (\n  <Button onClick={ updateNow }>\n    <FormattedMessage { ...messages.setTheClock } />\n  </Button>\n)\n\n// connect\n\nconst mapDispatchToProps: DispatchProps = {\n  updateNow,\n}\n\nexport default connect(null, mapDispatchToProps)(SetClockButton)\n","import React from 'react'\nimport { FormattedDate } from 'react-intl'\nimport { connect } from 'react-redux'\n\nimport { State } from '~/redux'\n\ninterface StateProps {\n  now: Date\n}\n\ntype Props =\n  & StateProps\n\n// TODO: delete?\nconst Today: React.FC<Props> = ({ now }) => (\n  <FormattedDate value={ now } format=\"medium\" />\n)\n\n// connect\n\nconst mapStateToProps = ({ io: { now } }: State): StateProps => ({\n  now,\n})\n\nexport default connect(mapStateToProps)(Today)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  home: 'Home',\n})\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport React, { useCallback, useRef, useState } from 'react'\nimport Helmet from 'react-helmet'\nimport { FormattedNumber, useIntl } from 'react-intl'\n\nimport CurrentTimeOfDay from '~/components/CurrentTimeOfDay'\nimport NotifyMeButton from '~/components/NotifyMeButton'\nimport { createPage } from '~/components/PageTemplate'\nimport SetClockButton from '~/components/SetClockButton'\nimport Today from '~/components/Today'\nimport messages from './messages'\n\nconst HomePage: React.FC = () => {\n  const { formatMessage } = useIntl()\n  const input = useRef<HTMLInputElement>(null)\n  const [text, setText] = useState('')\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.home) } />\n      <Typography>\n        <FormattedNumber format=\"usd\" value={ 100 } />\n      </Typography>\n      <Typography>\n        <Today /> <CurrentTimeOfDay />\n      </Typography>\n      <SetClockButton />\n      <TextField\n        value={ text }\n        onChange={ handleChange }\n        InputProps={ {\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <NotifyMeButton inputFor={ input } />\n            </InputAdornment>\n          ),\n        } }\n        inputProps= { {\n          ref: input,\n        } }\n      />\n    </>\n  )\n}\n\nexport default createPage(HomePage)\n"],"sourceRoot":""}