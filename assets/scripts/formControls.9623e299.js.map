{"version":3,"sources":["webpack://rap/./src/components/CodeField/classes.css?a617","webpack://rap/./src/components/CodeField/index.tsx","webpack://rap/./src/components/CopyTextButton/messages.ts","webpack://rap/./src/components/CopyTextButton/index.tsx","webpack://rap/./src/components/FileUpload/classes.css?bd7d","webpack://rap/./src/components/FileUpload/messages.ts","webpack://rap/./src/components/FileUpload/index.tsx","webpack://rap/./src/components/MicSwitch/messages.ts","webpack://rap/./src/components/MicSwitch/index.tsx","webpack://rap/./src/components/App/FormControlsPage/messages.ts","webpack://rap/./src/components/App/FormControlsPage/index.tsx","webpack://rap/./src/components/CodeField/classes.css","webpack://rap/./src/components/FileUpload/classes.css"],"names":["options","useStyles","makeStyles","Pre","direction","width","startAdornmentWidth","endAdornmentWidth","marginLeft","marginRight","TextArea","flip","getWidth","element","globalThis","getComputedStyle","offsetWidth","parseFloat","lightTheme","darkTheme","className","InputProps","classes","InputPropsClasses","ref","InputRefProp","RestInputProps","inputProps","spellCheck","inputRefProp","restInputProps","preProps","value","onChange","restProps","inputMultiline","InputPropsRestClasses","dir","useContext","IntlProviderContext","dark","useRecoilState","darkState","defaultDark","DefaultDarkContext","hlText","setHlText","useState","setStartAdornmentWidth","setEndAdornmentWidth","jssClasses","undefined","containerClassName","useMemo","classnames","cssClasses","InputInputMultilineClassName","preClassName","OwnInputRef","useRef","InputRef","useRefsMerged","ownInputRef","inputRef","useEffect","startAdornment","current","querySelector","endAdornment","hljs","handleChange","useCallback","event","target","shouldBePresent","Helmet","rel","href","typed","dangerouslySetInnerHTML","__html","TextField","fullWidth","multiline","defineMessages","textCopied","copyText","ContentCopyIcon","style","FilterNone","transform","restStyle","Error","inputFor","input","formatMessage","useIntl","enqueueSnackbar","useSnackbar","handleClick","copy","messages","disabled","setDisabled","Tooltip","title","disableFocusListener","disableHoverListener","disableTouchListener","IconButton","onClick","browse","noFileSelected","nFilesSelected","isSafari","Bowser","navigator","userAgent","is","multiple","buttonLabel","renderResultMessage","fs","length","name","values","n","propClasses","component","Component","FormLabel","ButtonProps","files","setFiles","rootClassName","root","buttonClassName","button","resultMessage","handleInputChange","Array","from","fireInputClick","dispatchEvent","MouseEvent","handleButtonClick","isDefaultPrevented","tabIndex","Button","type","typeWithYourVoice","stop","speechRecognitionErrorOccurred","onResult","fallback","locale","useSelector","state","localeSelector","listening","setListening","recognition","SpeechRecognition","tooltip","handleRecognitionStart","handleRecognitionEnd","handleRecognitionError","error","variant","handleRecognitionResult","results","map","result","transcript","join","continuous","interimResults","maxAlternatives","addEventListener","removeEventListener","lang","handleMicChange","_event","checked","start","abort","Checkbox","color","icon","MicNone","checkedIcon","Mic","formControls","CopiableTextField","text","setText","label","InputAdornment","position","MicIncludedTextField","handleResult","scrollTop","scrollHeight","offsetHeight","scrollLeft","scrollWidth","MicIncludedCopiableTextField","Image","maxWidth","maxHeight","height","ImageFile","file","src","setSrc","reader","FileReader","useScreen","handleReaderLoad","ArrayBuffer","test","readAsDataURL","createPage","renderResult","fileUploadMessages","i","key","code","setCode","handleCodeFieldChange","codeFieldInput","List","ListItem","ListItemText","accept","___CSS_LOADER_EXPORT___","push","module","id","locals"],"mappings":"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","file":"assets/scripts/formControls.9623e299.js","sourcesContent":["import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import TextField, { TextFieldProps as OriginalTextFieldProps } from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport classnames from 'classnames'\nimport hljs from 'highlight.js'\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useRecoilState } from 'recoil'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport DefaultDarkContext from '~/contexts/DefaultDarkContext'\nimport IntlProviderContext from '~/contexts/IntlProviderContext'\nimport useRefsMerged from '~/hooks/useRefsMerged'\nimport darkState from '~/selectors/darkState'\nimport typed from '~/typed'\nimport cssClasses from './classes.css'\n\ntype TextFieldProps =\n  & Alt.Omit<OriginalTextFieldProps,\n      | 'className'\n      | 'fullWidth' // TODO\n      | 'multiline' // TODO\n    >\n  & {\n      value?: string\n    }\n\ntype HighlightTheme = string // TODO\n\ninterface OwnProps {\n  lightTheme?: HighlightTheme\n  darkTheme?: HighlightTheme\n  className?: string\n  preProps?: Alt.Omit<React.InputHTMLAttributes<HTMLPreElement>, 'dangerouslySetInnerHTML'>\n}\n\n/**\n * @param className of the container\n */\ntype Props =\n  & TextFieldProps\n  & OwnProps\n\ninterface StyleProps {\n  direction?: Direction\n  startAdornmentWidth?: number\n  endAdornmentWidth?: number\n}\n\nconst useStyles = makeStyles<never, StyleProps, 'Pre' | 'TextArea'>({\n  Pre: {\n    '&$Pre': {\n      direction: 'ltr',\n      width: ({ startAdornmentWidth, endAdornmentWidth }) => `calc(100% - ${ (startAdornmentWidth ?? 0) + (endAdornmentWidth ?? 0) }px)`,\n\n      // NOTE: ページの direction が \"rtl\" なら starAdornment は右側に配置されるが、この要素の direction は \"ltr\" に固定されるので、 marginInlineStart 等を使うことはできない。\n      marginLeft: ({ direction, startAdornmentWidth, endAdornmentWidth }) => direction === 'rtl' ? endAdornmentWidth : startAdornmentWidth,\n      marginRight: ({ direction, startAdornmentWidth, endAdornmentWidth }) => direction === 'rtl' ? startAdornmentWidth : endAdornmentWidth,\n    },\n  },\n  TextArea: {\n    '&$TextArea': {\n      direction: 'ltr',\n    },\n  },\n}, {\n  flip: false,\n})\n\n// TODO: remove?\n// TODO: null check を抽出する\nfunction getWidth(element: HTMLElement | null | undefined): number | null {\n  if (element == null) {\n    return null\n  }\n\n  const { marginLeft, marginRight } = globalThis.getComputedStyle(element)\n\n  return element.offsetWidth + parseFloat(marginLeft) + parseFloat(marginRight)\n}\n\nconst CodeField: React.FC<Props> = ({\n  lightTheme = 'atom-one-light',\n  darkTheme = 'atom-one-dark',\n  className,\n  InputProps: { classes: InputPropsClasses, ref: InputRefProp, ...RestInputProps } = {},\n  inputProps: { spellCheck, ref: inputRefProp, ...restInputProps } = {},\n  preProps,\n  value,\n  onChange,\n  ...restProps\n}) => {\n  const { inputMultiline, ...InputPropsRestClasses } = InputPropsClasses ?? {}\n\n  const { dir } = useContext(IntlProviderContext)\n  const [dark] = useRecoilState(darkState)\n  const { defaultDark } = useContext(DefaultDarkContext)\n\n  const [hlText, setHlText] = useState<string | null>(null)\n  const [startAdornmentWidth, setStartAdornmentWidth] = useState<number | null>(null)\n  const [endAdornmentWidth, setEndAdornmentWidth] = useState<number | null>(null)\n\n  const jssClasses = useStyles({\n    direction: dir ?? undefined,\n    startAdornmentWidth: startAdornmentWidth ?? undefined,\n    endAdornmentWidth: endAdornmentWidth ?? undefined,\n  })\n\n  const containerClassName = useMemo(() => classnames(className, cssClasses.Container), [className])\n  const InputInputMultilineClassName = useMemo(() => classnames(jssClasses.TextArea, cssClasses.TextArea, inputMultiline), [jssClasses.TextArea, inputMultiline])\n  const preClassName = useMemo(() => classnames(jssClasses.Pre, cssClasses.Pre, preProps?.className), [jssClasses.Pre, preProps?.className])\n\n  const OwnInputRef = useRef<HTMLDivElement>(null)\n  const InputRef = useRefsMerged(InputRefProp ?? null, OwnInputRef)\n\n  const ownInputRef = useRef<HTMLTextAreaElement>(null)\n  const inputRef = useRefsMerged(inputRefProp ?? null, ownInputRef)\n\n  useEffect(() => {\n    const startAdornment = OwnInputRef.current?.querySelector<HTMLElement>(':scope > [class*=\"MuiInputAdornment-positionStart\"]') // TODO\n    const endAdornment = OwnInputRef.current?.querySelector<HTMLElement>(':scope > [class*=\"MuiInputAdornment-positionEnd\"]') // TODO\n\n    setStartAdornmentWidth(getWidth(startAdornment))\n    setEndAdornmentWidth(getWidth(endAdornment))\n  }, [OwnInputRef])\n\n  useEffect(() => {\n    setHlText(hljs.highlightAuto(ownInputRef.current?.value ?? '').value)\n  }, [ownInputRef])\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLTextAreaElement>>((event) => {\n    onChange?.(event)\n\n    setHlText(hljs.highlightAuto(\n      (onChange === undefined ? value : undefined) // NOTE: `onChange` が無く、 `value` がある場合、テキストフィールドの内容は変更されない。また、 `onChange` がある場合、このイベントが発火した時の `value` の値は `onChange` 中の setState が完了する前のものなので、 `event.target.value` （または `input.current?.value ?? ''` ）を参照する必要がある。\n      ?? event.target.value\n    ).value)\n  }, [value, onChange])\n\n  shouldBePresent(defaultDark)\n\n  return (\n    <div className={ containerClassName }>\n      <Helmet>\n        <link\n          rel=\"stylesheet\"\n          href={ typed<[HighlightTheme]>`/assets/stylesheets/highlight.js/styles/${ (dark ?? defaultDark) ? darkTheme : lightTheme }.css` }\n        />\n      </Helmet>\n      <pre className={ preClassName } dangerouslySetInnerHTML={ { __html: hlText ?? '' } } />\n      <TextField\n        fullWidth // TODO: false でもうまく動くようにする\n        multiline // TODO: false でもうまく動くようにする\n        value={ value }\n        onChange={ handleChange }\n        InputProps={ {\n          classes: {\n            inputMultiline: InputInputMultilineClassName,\n            ...InputPropsRestClasses,\n          },\n          ref: InputRef,\n          ...RestInputProps,\n        } }\n        inputProps={ {\n          spellCheck: spellCheck ?? false,\n          ref: inputRef,\n          ...restInputProps,\n        } }\n        { ...restProps }\n      />\n    </div>\n  )\n}\n\nexport default CodeField\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  textCopied: 'Text copied.',\n  copyText: 'Copy text',\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FilterNoneIcon from '@material-ui/icons/FilterNone'\nimport copy from 'copy-to-clipboard'\nimport { useSnackbar } from 'notistack'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport messages from './messages'\n\ninterface Props {\n  inputFor: React.RefObject<HTMLInputElement | HTMLTextAreaElement>\n}\n\n// TODO: @material-ui/icons/ContentCopy が実装されたら削除する\nconst ContentCopyIcon: React.FC<React.PropsOf<typeof FilterNoneIcon>> = ({ style, ...restProps }) => {\n  if (style === undefined) {\n    return <FilterNoneIcon style={ { transform: 'scaleY(-1)' } } { ...restProps } />\n  }\n\n  const { transform, ...restStyle } = style\n\n  if (transform !== undefined) {\n    throw new Error\n  }\n\n  return <FilterNoneIcon style={ { transform: 'scaleY(-1)', ...restStyle } } { ...restProps } />\n}\n\nconst CopyTextButton: React.FC<Props> = ({ inputFor: input }) => {\n  const { formatMessage } = useIntl()\n  const { enqueueSnackbar } = useSnackbar()\n\n  const handleClick = useCallback(() => {\n    shouldBePresent(input.current)\n\n    if (input.current.value === '') {\n      return\n    }\n\n    copy(input.current.value) // TODO: await navigator.clipboard.writeText(input.current.value)\n\n    enqueueSnackbar(\n      <FormattedMessage { ...messages.textCopied } />\n    )\n  }, [enqueueSnackbar, input])\n\n  // NOTE: input が render された後の input.current が必要なので、 useMemo ではなく useState + useEffect を使う。\n  const [disabled, setDisabled] = useState(true)\n\n  useEffect(() => {\n    setDisabled(input.current === null || input.current.value === '' || input.current.disabled)\n  })\n\n  return (\n    <Tooltip\n      title={ formatMessage(messages.copyText) }\n      disableFocusListener={ disabled }\n      disableHoverListener={ disabled }\n      disableTouchListener={ disabled }\n    >\n      <span>\n        <IconButton onClick={ handleClick } disabled={ disabled }>\n          <ContentCopyIcon />\n        </IconButton>\n      </span>\n    </Tooltip>\n  )\n}\n\nexport default CopyTextButton\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  browse: 'Browse…',\n  noFileSelected: 'No file selected.',\n  nFilesSelected: '{ n } files selected.',\n})\n","import Button, { ButtonProps } from '@material-ui/core/Button'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Bowser from 'bowser'\nimport classnames from 'classnames'\nimport React, { useCallback, useMemo, useRef, useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport cssClasses from './classes.css'\nimport messages from './messages'\n\nexport interface Props extends Alt.Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'onClick' | 'onChange'> {\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n  buttonLabel?: React.ReactNode\n  renderResultMessage?(files: File[] | null): React.ReactNode\n  classes?: {\n    root?: string\n    button?: string\n  }\n  component?: React.ElementType\n\n  /**\n   * Merges className, with mimicking Material-UI.\n   */\n  ButtonProps?: Alt.Omit<ButtonProps, 'disabled' | 'onClick'>\n}\n\n// TODO: Remove?\nconst browser = Bowser.getParser(navigator.userAgent)\n\nconst isSafari = browser.is('Safari')\n\nconst FileUpload: React.FC<Props> = ({\n  className,\n  disabled,\n  multiple,\n  onClick,\n  onChange,\n  buttonLabel = <FormattedMessage { ...messages.browse } />,\n  renderResultMessage = (fs) => {\n    if (fs === null || fs.length === 0) {\n      return <FormattedMessage { ...messages.noFileSelected } />\n    }\n\n    switch (fs.length) {\n      case 1:\n        return fs[0].name\n      default:\n        return <FormattedMessage { ...messages.nFilesSelected } values={ { n: fs.length } } />\n    }\n  },\n  classes: propClasses,\n  component: Component = FormLabel,\n  ButtonProps,\n  ...restInputProps\n}: Props) => {\n  const [files, setFiles] = useState<File[] | null>(null) // NOTE: (event: ChangeEvent).target.files をそのまま使うと参照が変わらないので re-render されない。\n\n  const rootClassName = useMemo(() => classnames(className, propClasses?.root, cssClasses.FileUpload, {\n    [cssClasses.Safari]: isSafari,\n  }), [className, propClasses?.root])\n  const buttonClassName = useMemo(() => classnames(propClasses?.button, cssClasses.Button, ButtonProps?.className), [propClasses?.button, ButtonProps?.className])\n\n  const resultMessage = useMemo(() => renderResultMessage(files), [renderResultMessage, files])\n\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleInputChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    onChange?.(event)\n    setFiles(event.target.files !== null ? Array.from(event.target.files) : event.target.files)\n  }, [onChange])\n\n  const fireInputClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(() => {\n    shouldBePresent(input.current)\n\n    input.current.dispatchEvent(new MouseEvent('click')) // FIXME: Element.click()\n  }, [input])\n\n  const handleButtonClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>((event) => {\n    onClick?.(event)\n\n    if (!event.isDefaultPrevented()) {\n      fireInputClick(event)\n    }\n  }, [onClick, fireInputClick])\n\n  return (\n    <Component className={ rootClassName } tabIndex={ isSafari ? -1 : 0 }>\n      <Button\n        disabled={ disabled }\n        onClick={ handleButtonClick }\n        { ...ButtonProps }\n        className={ buttonClassName } // NOTE: Overrides ButtonProps.className\n        tabIndex={ -1 }\n      >\n        { buttonLabel }\n      </Button>\n      { resultMessage }\n      <input\n        className={ cssClasses.Input }\n        type=\"file\"\n        disabled={ disabled }\n        multiple={ multiple }\n        onChange={ handleInputChange }\n        ref={ input }\n        { ...restInputProps }\n      />\n    </Component>\n  )\n}\n\nexport default FileUpload\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  typeWithYourVoice: 'Type with your voice…',\n  stop: 'Stop',\n  speechRecognitionErrorOccurred: 'Speech recognition error occurred: { error }',\n})\n","import Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport MicIcon from '@material-ui/icons/Mic'\nimport MicNoneIcon from '@material-ui/icons/MicNone'\nimport { useSnackbar } from 'notistack'\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useSelector } from 'react-redux'\n\nimport { State } from '~/redux'\nimport messages from './messages'\n\nexport interface Props {\n  inputFor: React.RefObject<HTMLInputElement>\n  fallback?: React.ReactElement | null\n  onResult(event: SpeechRecognitionEvent, value: string): void\n}\n\nconst MicSwitch: React.FC<Props> = ({ inputFor: input, onResult, fallback }) => {\n  const { formatMessage } = useIntl()\n  const locale = useSelector((state: State) => state.localeSelector.locale)\n  const [listening, setListening] = useState(false)\n  const recognition = useMemo(() => 'SpeechRecognition' in globalThis ? new SpeechRecognition() : null, [])\n  const tooltip = useMemo(() => listening ? formatMessage(messages.stop) : formatMessage(messages.typeWithYourVoice), [listening, formatMessage])\n  const { enqueueSnackbar } = useSnackbar()\n\n  const handleRecognitionStart = useCallback<NonNullable<SpeechRecognition['onstart']>>(() => {\n    setListening(true)\n  }, [])\n\n  const handleRecognitionEnd = useCallback<NonNullable<SpeechRecognition['onend']>>(() => {\n    setListening(false)\n  }, [])\n\n  const handleRecognitionError = useCallback<NonNullable<SpeechRecognition['onerror']>>((event) => {\n    enqueueSnackbar(<FormattedMessage { ...messages.speechRecognitionErrorOccurred } values={ { error: event.error } } />, {\n      variant: 'error',\n    })\n\n    // TODO: recognition が終了しない致命的なエラーがあれば、 recognition.abort() する。\n  }, [enqueueSnackbar])\n\n  const handleRecognitionResult = useCallback<NonNullable<SpeechRecognition['onresult']>>((event) => {\n    onResult(event, Array.from(event.results).map(result => result[0].transcript).join('')) // TODO: result.isFinal な result をメモしてパフォーマンスを改善させる。\n  }, [onResult])\n\n  useEffect(() => () => {\n    recognition?.stop()\n  }, [recognition])\n\n  useEffect(() => {\n    if (recognition === null) {\n      return\n    }\n\n    /* tslint:disable:no-object-mutation */\n    recognition.continuous = true\n    recognition.interimResults = true\n    recognition.maxAlternatives = 1\n    /* tslint:enable:no-object-mutation */\n\n    recognition.addEventListener('start', handleRecognitionStart)\n    recognition.addEventListener('end', handleRecognitionEnd)\n    recognition.addEventListener('error', handleRecognitionError)\n    recognition.addEventListener('result', handleRecognitionResult)\n\n    return () => {\n      recognition.removeEventListener('start', handleRecognitionStart)\n      recognition.removeEventListener('end', handleRecognitionEnd)\n      recognition.removeEventListener('error', handleRecognitionError)\n      recognition.removeEventListener('result', handleRecognitionResult)\n    }\n  }, [recognition, handleRecognitionStart, handleRecognitionEnd, handleRecognitionError, handleRecognitionResult])\n\n  // NOTE: locale は recognition やイベントハンドラーと比べると変わりやすい。\n  useEffect(() => {\n    if (recognition === null) {\n      return\n    }\n\n    recognition.stop() // NOTE: recognition の言語を途中で変更することはできないので、 locale が変更されたら停止する。\n\n    recognition.lang = locale // tslint:disable-line:no-object-mutation\n  }, [recognition, locale])\n\n  const handleMicChange = useCallback<NonNullable<CheckboxProps['onChange']>>((_event, checked) => {\n    if (recognition === null) {\n      return\n    }\n\n    setListening(checked) // NOTE: onrecognitionstart/onrecognitionend でも同じことを行うが、一般に onChange で value を変更しないと状態がおかしくなることがある。\n\n    if (checked) {\n      recognition.start()\n    } else {\n      recognition.stop()\n    }\n  }, [recognition])\n\n  // NOTE: input が render された後の input.current が必要なので、 useMemo ではなく useState + useEffect を使う。\n  const [disabled, setDisabled] = useState(true)\n\n  useEffect(() => {\n    // NOTE: `input.current === null` のときに not disabled だと、レンダリングの途中でクリックすることで、本来は disabled な <input> で onChange が発生させることができる。\n    setDisabled(input.current === null || input.current.disabled)\n  })\n\n  useEffect(() => {\n    if (recognition === null) {\n      return\n    }\n\n    if (disabled) {\n      recognition.abort()\n    }\n  }, [disabled, recognition])\n\n  if (recognition === null && fallback !== undefined) {\n    return fallback\n  }\n\n  return (\n    <Tooltip\n      title={ tooltip }\n      disableFocusListener={ disabled }\n      disableHoverListener={ disabled }\n      disableTouchListener={ disabled }\n    >\n      <span>\n        <Checkbox\n          disabled={ disabled }\n          color=\"default\"\n          icon={ <MicNoneIcon /> }\n          checkedIcon={ <MicIcon /> }\n          checked={ listening }\n          onChange={ handleMicChange }\n        />\n      </span>\n    </Tooltip>\n  )\n}\n\nexport default MicSwitch\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  formControls: 'Form controls',\n})\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport TextField from '@material-ui/core/TextField'\nimport { Theme, makeStyles } from '@material-ui/core/styles'\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport Helmet from 'react-helmet'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport CodeField from '~/components/CodeField'\nimport CopyTextButton from '~/components/CopyTextButton'\nimport FileUpload, { Props as FileUploadProps } from '~/components/FileUpload'\nimport fileUploadMessages from '~/components/FileUpload/messages' // TODO\nimport MicSwitch, { Props as MicSwitchProps } from '~/components/MicSwitch'\nimport { createPage } from '~/components/PageTemplate'\nimport IntlProviderContext from '~/contexts/IntlProviderContext'\nimport useScreen from '~/hooks/useScreen'\nimport messages from './messages'\n\nconst CopiableTextField: React.FC = () => {\n  const [text, setText] = useState('')\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  return (\n    <TextField\n      label=\"label\"\n      value={ text }\n      onChange={ handleChange }\n      inputRef={ input }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <CopyTextButton inputFor={ input } />\n          </InputAdornment>\n        ),\n      } }\n    />\n  )\n}\n\nconst MicIncludedTextField: React.FC = () => {\n  const { dir } = useContext(IntlProviderContext)\n  const [text, setText] = useState('')\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  const handleResult = useCallback<MicSwitchProps['onResult']>((_event, value) => {\n    if (input.current === null) {\n      return\n    }\n\n    setText(value)\n\n    /* tslint:disable:no-object-mutation */\n    input.current.scrollTop = input.current.scrollHeight - input.current.offsetHeight\n\n    switch (dir) {\n      case 'ltr':\n        input.current.scrollLeft = input.current.scrollWidth - input.current.offsetWidth\n        break\n      case 'rtl':\n        input.current.scrollLeft = -(input.current.scrollWidth - input.current.offsetWidth)\n    }\n    /* tslint:enable:no-object-mutation */\n  }, [\n    dir,\n    input,\n    // To handle resizing, DOM updates, etc:\n    input.current?.scrollWidth,\n    input.current?.scrollHeight,\n    input.current?.offsetWidth,\n    input.current?.offsetHeight,\n  ])\n\n  return (\n    <TextField\n      label=\"label\"\n      value={ text }\n      onChange={ handleChange }\n      inputRef={ input }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <MicSwitch\n              inputFor={ input }\n              onResult={ handleResult }\n              fallback={ null }\n            />\n          </InputAdornment>\n        ),\n      } }\n    />\n  )\n}\n\nconst MicIncludedCopiableTextField: React.FC = () => {\n  const { dir } = useContext(IntlProviderContext)\n  const [text, setText] = useState('')\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  const handleResult = useCallback<MicSwitchProps['onResult']>((_event, value) => {\n    if (input.current === null) {\n      return\n    }\n\n    setText(value)\n\n    /* tslint:disable:no-object-mutation */\n    input.current.scrollTop = input.current.scrollHeight - input.current.offsetHeight\n\n    switch (dir) {\n      case 'ltr':\n        input.current.scrollLeft = input.current.scrollWidth - input.current.offsetWidth\n        break\n      case 'rtl':\n        input.current.scrollLeft = -(input.current.scrollWidth - input.current.offsetWidth)\n    }\n    /* tslint:enable:no-object-mutation */\n  }, [\n    dir,\n    input,\n    // To handle resizing, DOM updates, etc:\n    input.current?.scrollWidth,\n    input.current?.scrollHeight,\n    input.current?.offsetWidth,\n    input.current?.offsetHeight,\n  ])\n\n  return (\n    <TextField\n      label=\"label\"\n      value={ text }\n      onChange={ handleChange }\n      inputRef={ input }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <MicSwitch\n              inputFor={ input }\n              onResult={ handleResult }\n              fallback={ null }\n            />\n            <CopyTextButton inputFor={ input } />\n          </InputAdornment>\n        ),\n      } }\n    />\n  )\n}\n\ninterface ImageFileProps {\n  file: File\n}\n\ninterface StyleProps {\n  width: number | null\n  height: number | null\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, 'Image'>({\n  Image: {\n    maxWidth: ({ width }) => width !== null ? width / 2 : undefined,\n    maxHeight: ({ height }) => height !== null ? height / 2 : undefined,\n  },\n})\n\nconst ImageFile: React.FC<ImageFileProps> = ({ file }) => {\n  const [src, setSrc] = useState<string | null>(null)\n  const reader = useMemo(() => new FileReader, [])\n  const { width, height } = useScreen()\n  const jssClasses = useStyles({ width, height })\n\n  const handleReaderLoad = useCallback<NonNullable<FileReader['onload']>>((event) => {\n    if (event.target?.result == null) {\n      return\n    }\n\n    if (event.target.result instanceof ArrayBuffer) {\n      throw new Error //\n    }\n\n    setSrc(event.target.result)\n  }, [])\n\n  useEffect(() => {\n    reader.addEventListener('load', handleReaderLoad)\n\n    return () => {\n      reader.removeEventListener('load', handleReaderLoad)\n    }\n  }, [reader, handleReaderLoad])\n\n  useEffect(() => {\n    if (!/^image\\/[0-9A-Za-z][!#$&+-.0-9A-Z^_a-z]*$/.test(file.type)) {\n      throw new Error\n    }\n\n    reader.readAsDataURL(file)\n  }, [file, reader])\n\n  return (\n    <img src={ src ?? undefined } className={ jssClasses.Image } />\n  )\n}\n\nconst FormControlsPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  const renderResult = useCallback<Required<FileUploadProps>['renderResultMessage']>((files) => {\n    if (files === null || files.length === 0) {\n      return <FormattedMessage { ...fileUploadMessages.noFileSelected } />\n    }\n\n    return Array.from(files).map((file, i) => <ImageFile key={ i } file={ file } />)\n  }, [])\n\n  const [code, setCode] = useState('')\n\n  const handleCodeFieldChange = useCallback<React.ChangeEventHandler<HTMLTextAreaElement>>((event) => {\n    setCode(event.target?.value)\n  }, [])\n\n  const codeFieldInput = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.formControls) } />\n      <List>\n        <ListItem>\n          <ListItemText>\n            <FileUpload\n              accept=\"image/*\"\n              multiple\n              renderResultMessage={ renderResult }\n            />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <CopiableTextField />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <MicIncludedTextField />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <MicIncludedCopiableTextField />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <CodeField\n              label=\"code\"\n              value={ code }\n              onChange={ handleCodeFieldChange }\n              InputProps={ {\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <CopyTextButton inputFor={ codeFieldInput } />\n                  </InputAdornment>\n                ),\n              } }\n              inputProps={ {\n                ref: codeFieldInput,\n              } }\n            />\n          </ListItemText>\n        </ListItem>\n      </List>\n    </>\n  )\n}\n\nexport default createPage(FormControlsPage)\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-CodeField-classes__Container--nU10n {\\n  position: relative;\\n}\\n\\n.src-components-CodeField-classes__Pre--3c2a_ {\\n  /* font-family: monospace; */\\n  font-size: 16px;\\n  line-height: 1.1876em;\\n  margin: 0;\\n  padding: 18.5px 14px;\\n  position: absolute;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  word-break: break-word;\\n}\\n\\n.src-components-CodeField-classes__TextArea--ZPHX8 {\\n  font-family: monospace;\\n  font-size: 16px;\\n  /* line-height: 1.1876em; */\\n  /* margin: 0; */\\n  -webkit-text-fill-color: transparent;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  /* word-break: break-word; */\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/CodeField/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,qBAAqB;EACrB,SAAS;EACT,oBAAoB;EACpB,kBAAkB;EAClB,gBAAgB;EAChB,qBAAqB;EACrB,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,2BAA2B;EAC3B,eAAe;EACf,oCAAoC;EACpC,qBAAqB;EACrB,iBAAiB;EACjB,4BAA4B;AAC9B\",\"sourcesContent\":[\".Container {\\n  position: relative;\\n}\\n\\n.Pre {\\n  /* font-family: monospace; */\\n  font-size: 16px;\\n  line-height: 1.1876em;\\n  margin: 0;\\n  padding: 18.5px 14px;\\n  position: absolute;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  word-break: break-word;\\n}\\n\\n.TextArea {\\n  font-family: monospace;\\n  font-size: 16px;\\n  /* line-height: 1.1876em; */\\n  /* margin: 0; */\\n  -webkit-text-fill-color: transparent;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  /* word-break: break-word; */\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Container\": \"src-components-CodeField-classes__Container--nU10n\",\n\t\"Pre\": \"src-components-CodeField-classes__Pre--3c2a_\",\n\t\"TextArea\": \"src-components-CodeField-classes__TextArea--ZPHX8\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-FileUpload-classes__FileUpload--3TET6 {\\n  display: inline-block; /* TODO: polyfill */\\n  display: inline flow-root;\\n  cursor: pointer;\\n}\\n\\n.src-components-FileUpload-classes__FileUpload--3TET6.src-components-FileUpload-classes__Safari--1vKak:focus {\\n  outline: none;\\n}\\n\\n.src-components-FileUpload-classes__Button--2nXHq.src-components-FileUpload-classes__Button--2nXHq {\\n  text-transform: none;\\n  cursor: unset;\\n}\\n\\n.src-components-FileUpload-classes__Input--3_D1z {\\n  display: none;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/FileUpload/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,qBAAqB,EAAE,mBAAmB;EAC1C,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,oBAAoB;EACpB,aAAa;AACf;;AAEA;EACE,aAAa;AACf\",\"sourcesContent\":[\".FileUpload {\\n  display: inline-block; /* TODO: polyfill */\\n  display: inline flow-root;\\n  cursor: pointer;\\n}\\n\\n.FileUpload.Safari:focus {\\n  outline: none;\\n}\\n\\n.Button.Button {\\n  text-transform: none;\\n  cursor: unset;\\n}\\n\\n.Input {\\n  display: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"FileUpload\": \"src-components-FileUpload-classes__FileUpload--3TET6\",\n\t\"Safari\": \"src-components-FileUpload-classes__Safari--1vKak\",\n\t\"Button\": \"src-components-FileUpload-classes__Button--2nXHq\",\n\t\"Input\": \"src-components-FileUpload-classes__Input--3_D1z\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}