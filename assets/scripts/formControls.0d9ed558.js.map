{"version":3,"sources":["webpack://react-app-prototype/./src/components/CodeField/classes.css?a617","webpack://react-app-prototype/./src/components/CodeField/index.tsx","webpack://react-app-prototype/./src/lib/components/CopyTextButton/messages.ts","webpack://react-app-prototype/./src/lib/components/CopyTextButton/index.tsx","webpack://react-app-prototype/./src/lib/components/FileUpload/classes.css?b2ef","webpack://react-app-prototype/./src/lib/components/FileUpload/messages.ts","webpack://react-app-prototype/./src/lib/components/FileUpload/index.tsx","webpack://react-app-prototype/./src/lib/components/MicSwitch/messages.ts","webpack://react-app-prototype/./src/lib/components/MicSwitch/index.tsx","webpack://react-app-prototype/./src/components/App/FormControlsPage/messages.ts","webpack://react-app-prototype/./src/components/App/FormControlsPage/index.tsx","webpack://react-app-prototype/./src/components/CodeField/classes.css","webpack://react-app-prototype/./src/lib/components/FileUpload/classes.css"],"names":["options","lightTheme","darkTheme","className","InputProps","InputPropsClasses","classes","rest_InputProps","inputProps","spellCheck","restInputProps","preProps","value","onChange","restProps","inputMultiline","InputPropsRestClasses","useState","hlText","setHlText","dark","useContext","ThemeProviderContext","containerClassName","useMemo","classnames","cssClasses","InputInputMultilineClassName","classNames","preClassName","input","useRef","useEffect","hljs","current","handleChange","useCallback","event","undefined","target","dir","Helmet","rel","href","typed","dangerouslySetInnerHTML","__html","TextField","fullWidth","multiline","inputRef","defineMessages","textCopied","copyText","ContentCopyIcon","style","FilterNone","transform","restStyle","Error","inputFor","formatMessage","useIntl","enqueueSnackbar","useSnackbar","handleClick","shouldBePresent","copy","messages","disabled","setDisabled","IconButton","onClick","Tooltip","title","browse","noFileSelected","nFilesSelected","multiple","buttonLabel","renderResultMessage","fs","length","name","values","n","propClasses","component","Component","FormLabel","ButtonProps","files","setFiles","rootClassName","root","buttonClassName","button","resultMessage","handleInputChange","Array","from","fireInputClick","dispatchEvent","MouseEvent","handleButtonClick","isDefaultPrevented","tabIndex","Button","type","ref","typeWithYourVoice","stop","speechRecognitionErrorOccurred","onResult","fallback","locale","useSelector","state","localeSelector","listening","setListening","recognition","globalThis","SpeechRecognition","tooltip","handleRecognitionStart","handleRecognitionEnd","handleRecognitionError","error","variant","handleRecognitionResult","results","map","result","transcript","join","continuous","interimResults","maxAlternatives","addEventListener","removeEventListener","lang","handleMicChange","_event","checked","start","abort","Checkbox","color","icon","MicNone","checkedIcon","Mic","formControls","CopiableTextField","text","setText","label","endAdornment","InputAdornment","position","MicIncludedTextField","IntlProviderContext","handleResult","scrollTop","scrollHeight","offsetHeight","scrollLeft","scrollWidth","offsetWidth","MicIncludedCopiableTextField","useStyles","makeStyles","Image","maxWidth","width","maxHeight","height","ImageFile","file","src","setSrc","reader","FileReader","useScreen","jssClasses","handleReaderLoad","ArrayBuffer","test","readAsDataURL","createPage","renderResult","fileUploadMessages","i","key","code","setCode","handleCodeFieldChange","List","ListItem","ListItemText","accept","___CSS_LOADER_EXPORT___","push","module","id","locals"],"mappings":"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","file":"assets/scripts/formControls.0d9ed558.js","sourcesContent":["import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import TextField, { TextFieldProps as OriginalTextFieldProps } from '@material-ui/core/TextField'\nimport classNames from 'classnames'\nimport classnames from 'classnames'\nimport hljs from 'highlight.js'\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport ThemeProviderContext from '~/contexts/ThemeProviderContext'\nimport typed from '~/lib/typed'\nimport cssClasses from './classes.css'\n\ntype TextFieldProps =\n  & Alt.Omit<OriginalTextFieldProps,\n      | 'className'\n      | 'fullWidth' // TODO\n      | 'multiline' // TODO\n    >\n  & {\n      value?: string\n    }\n\ninterface OwnProps {\n  lightTheme?: string\n  darkTheme?: string\n  className?: string\n  preProps?: Alt.Omit<React.InputHTMLAttributes<HTMLPreElement>, 'dangerouslySetInnerHTML'>\n}\n\n/**\n * @param className of the container\n */\ntype Props =\n  & TextFieldProps\n  & OwnProps\n\nconst CodeField: React.FC<Props> = ({\n  lightTheme = 'atom-one-light',\n  darkTheme = 'atom-one-dark',\n  className,\n  InputProps: { classes: InputPropsClasses, ...rest_InputProps } = {},\n  inputProps: { spellCheck, ...restInputProps } = {},\n  preProps,\n  value,\n  onChange,\n  ...restProps\n}) => {\n  const { inputMultiline, ...InputPropsRestClasses } = InputPropsClasses ?? {}\n  const [hlText, setHlText] = useState<string | null>(null)\n  const { dark } = useContext(ThemeProviderContext)\n  const containerClassName = useMemo(() => classnames(className, cssClasses.Container), [className])\n  const InputInputMultilineClassName = useMemo(() => classNames(cssClasses.TextArea, inputMultiline), [inputMultiline])\n  const preClassName = useMemo(() => classnames(cssClasses.Pre, preProps?.className), [preProps?.className])\n  const input = useRef<HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    setHlText(hljs.highlightAuto(input.current?.value ?? '').value)\n  }, [input])\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLTextAreaElement>>((event) => {\n    onChange?.(event)\n\n    setHlText(hljs.highlightAuto(\n      (onChange === undefined ? value : undefined) // NOTE: `onChange` が無く、 `value` がある場合、テキストフィールドの内容は変更されない。また、 `onChange` がある場合、このイベントが発火した時の `value` の値は `onChange` 中の setState が完了する前のものなので、 `event.target.value` （または `input.current?.value ?? ''` ）を参照する必要がある。\n      ?? event.target.value\n    ).value)\n  }, [value, onChange])\n\n  if (dark == null) {\n    return null\n  }\n\n  return (\n    <div className={ containerClassName } dir=\"ltr\">\n      <Helmet>\n        <link\n          rel=\"stylesheet\"\n          href={ typed<[string]>`/assets/stylesheets/highlight.js/styles/${ dark ? darkTheme : lightTheme }.css` }\n        />\n      </Helmet>\n      <pre className={ preClassName } dangerouslySetInnerHTML={ { __html: hlText ?? '' } } />\n      <TextField\n        fullWidth // TODO: false でもうまく動くようにする\n        multiline // TODO: false でもうまく動くようにする\n        inputRef={ input }\n        value={ value }\n        onChange={ handleChange }\n        InputProps={ {\n          classes: {\n            inputMultiline: InputInputMultilineClassName,\n            ...InputPropsRestClasses,\n          },\n          ...rest_InputProps,\n        } }\n        inputProps={ {\n          spellCheck: spellCheck ?? false,\n          ...restInputProps,\n        } }\n        { ...restProps }\n      />\n    </div>\n  )\n}\n\nexport default CodeField\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  textCopied: 'Text copied.',\n  copyText: 'Copy text',\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FilterNoneIcon from '@material-ui/icons/FilterNone'\nimport copy from 'copy-to-clipboard'\nimport { useSnackbar } from 'notistack'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\nimport messages from './messages'\n\ninterface Props {\n  inputFor: React.RefObject<HTMLInputElement>\n}\n\n// TODO: @material-ui/icons/ContentCopy が実装されたら削除する\nconst ContentCopyIcon: React.FC<React.PropsOf<typeof FilterNoneIcon>> = ({ style, ...restProps }) => {\n  if (style === undefined) {\n    return <FilterNoneIcon style={ { transform: 'scaleY(-1)' } } { ...restProps } />\n  }\n\n  const { transform, ...restStyle } = style\n\n  if (transform !== undefined) {\n    throw new Error\n  }\n\n  return <FilterNoneIcon style={ { transform: 'scaleY(-1)', ...restStyle } } { ...restProps } />\n}\n\nconst CopyTextButton: React.FC<Props> = ({ inputFor: input }) => {\n  const { formatMessage } = useIntl()\n  const { enqueueSnackbar } = useSnackbar()\n\n  const handleClick = useCallback(() => {\n    shouldBePresent(input.current)\n\n    if (input.current.value === '') {\n      return\n    }\n\n    copy(input.current.value) // TODO: await navigator.clipboard.writeText(input.current.value)\n\n    enqueueSnackbar(\n      <FormattedMessage { ...messages.textCopied } />\n    )\n  }, [enqueueSnackbar, input])\n\n  // NOTE: input が render された後の input.current が必要なので、 useMemo ではなく useState + useEffect を使う。\n  const [disabled, setDisabled] = useState(true)\n\n  useEffect(() => {\n    setDisabled(input.current === null || input.current.value === '' || input.current.disabled)\n  })\n\n  if (disabled) {\n    return (\n      <IconButton onClick={ handleClick } disabled>\n        <ContentCopyIcon />\n      </IconButton>\n    )\n  }\n\n  return (\n    <Tooltip title={ formatMessage(messages.copyText) }>\n      <IconButton onClick={ handleClick }>\n        <ContentCopyIcon />\n      </IconButton>\n    </Tooltip>\n  )\n}\n\nexport default CopyTextButton\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  browse: 'Browse…',\n  noFileSelected: 'No file selected.',\n  nFilesSelected: '{ n } files selected.',\n})\n","import Button, { ButtonProps } from '@material-ui/core/Button'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport classnames from 'classnames'\nimport React, { useCallback, useMemo, useRef, useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\nimport cssClasses from './classes.css'\nimport messages from './messages'\n\nexport interface Props extends Alt.Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'onClick' | 'onChange'> {\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n  buttonLabel?: React.ReactNode\n  renderResultMessage?(files: File[] | null): React.ReactNode\n  classes?: {\n    root?: string\n    button?: string\n  }\n  component?: React.ElementType\n\n  /**\n   * Merges className, with mimicking Material-UI.\n   */\n  ButtonProps?: Alt.Omit<ButtonProps, 'disabled' | 'onClick'>\n}\n\nconst FileUpload: React.FC<Props> = ({\n  className,\n  disabled,\n  multiple,\n  onClick,\n  onChange,\n  buttonLabel = <FormattedMessage { ...messages.browse } />,\n  renderResultMessage = (fs) => {\n    if (fs === null || fs.length === 0) {\n      return <FormattedMessage { ...messages.noFileSelected } />\n    }\n\n    switch (fs.length) {\n      case 1:\n        return fs[0].name\n      default:\n        return <FormattedMessage { ...messages.nFilesSelected } values={ { n: fs.length } } />\n    }\n  },\n  classes: propClasses,\n  component: Component = FormLabel,\n  ButtonProps,\n  ...restInputProps\n}: Props) => {\n  const [files, setFiles] = useState<File[] | null>(null) // NOTE: (event: ChangeEvent).target.files をそのまま使うと参照が変わらないので re-render されない。\n\n  const rootClassName = useMemo(() => classnames(className, propClasses?.root, cssClasses.FileUpload), [className, propClasses?.root])\n  const buttonClassName = useMemo(() => classnames(propClasses?.button, cssClasses.Button, ButtonProps?.className), [propClasses?.button, ButtonProps?.className])\n\n  const resultMessage = useMemo(() => renderResultMessage(files), [renderResultMessage, files])\n\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleInputChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    onChange?.(event)\n    setFiles(event.target.files !== null ? Array.from(event.target.files) : event.target.files)\n  }, [onChange])\n\n  const fireInputClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(() => {\n    shouldBePresent(input.current)\n\n    input.current.dispatchEvent(new MouseEvent('click')) // FIXME: Element.click()\n  }, [input])\n\n  const handleButtonClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>((event) => {\n    onClick?.(event)\n\n    if (!event.isDefaultPrevented()) {\n      fireInputClick(event)\n    }\n  }, [onClick, fireInputClick])\n\n  return (\n    <Component className={ rootClassName } tabIndex={ 0 }>\n      <Button\n        disabled={ disabled }\n        onClick={ handleButtonClick }\n        { ...ButtonProps }\n        className={ buttonClassName } // NOTE: Overrides ButtonProps.className\n        tabIndex={ -1 }\n      >\n        { buttonLabel }\n      </Button>\n      { resultMessage }\n      <input\n        className={ cssClasses.Input }\n        type=\"file\"\n        disabled={ disabled }\n        multiple={ multiple }\n        onChange={ handleInputChange }\n        ref={ input }\n        { ...restInputProps }\n      />\n    </Component>\n  )\n}\n\nexport default FileUpload\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  typeWithYourVoice: 'Type with your voice…',\n  stop: 'Stop',\n  speechRecognitionErrorOccurred: 'Speech recognition error occurred: { error }',\n})\n","import Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport MicIcon from '@material-ui/icons/Mic'\nimport MicNoneIcon from '@material-ui/icons/MicNone'\nimport { useSnackbar } from 'notistack'\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useSelector } from 'react-redux'\n\nimport { State } from '~/redux'\nimport messages from './messages'\n\nexport interface Props {\n  inputFor: React.RefObject<HTMLInputElement>\n  fallback?: React.ReactElement | null\n  onResult(event: SpeechRecognitionEvent, value: string): void\n}\n\nconst MicSwitch: React.FC<Props> = ({ inputFor: input, onResult, fallback }) => {\n  const { formatMessage } = useIntl()\n  const locale = useSelector((state: State) => state.localeSelector.locale)\n  const [listening, setListening] = useState(false)\n  const recognition = useMemo(() => 'SpeechRecognition' in globalThis ? new SpeechRecognition() : null, [])\n  const tooltip = useMemo(() => listening ? formatMessage(messages.stop) : formatMessage(messages.typeWithYourVoice), [listening, formatMessage])\n  const { enqueueSnackbar } = useSnackbar()\n\n  const handleRecognitionStart = useCallback<NonNullable<SpeechRecognition['onstart']>>(() => {\n    setListening(true)\n  }, [])\n\n  const handleRecognitionEnd = useCallback<NonNullable<SpeechRecognition['onend']>>(() => {\n    setListening(false)\n  }, [])\n\n  const handleRecognitionError = useCallback<NonNullable<SpeechRecognition['onerror']>>((event) => {\n    enqueueSnackbar(<FormattedMessage { ...messages.speechRecognitionErrorOccurred } values={ { error: event.error } } />, {\n      variant: 'error',\n    })\n\n    // TODO: recognition が終了しない致命的なエラーがあれば、 recognition.abort() する。\n  }, [enqueueSnackbar])\n\n  const handleRecognitionResult = useCallback<NonNullable<SpeechRecognition['onresult']>>((event) => {\n    onResult(event, Array.from(event.results).map(result => result[0].transcript).join('')) // TODO: result.isFinal な result をメモしてパフォーマンスを改善させる。\n  }, [onResult])\n\n  useEffect(() => {\n    if (recognition === null) {\n      return\n    }\n\n    /* tslint:disable:no-object-mutation */\n    recognition.continuous = true\n    recognition.interimResults = true\n    recognition.maxAlternatives = 1\n    /* tslint:enable:no-object-mutation */\n\n    recognition.addEventListener('start', handleRecognitionStart)\n    recognition.addEventListener('end', handleRecognitionEnd)\n    recognition.addEventListener('error', handleRecognitionError)\n    recognition.addEventListener('result', handleRecognitionResult)\n\n    return () => {\n      recognition.stop()\n\n      recognition.removeEventListener('start', handleRecognitionStart)\n      recognition.removeEventListener('end', handleRecognitionEnd)\n      recognition.removeEventListener('error', handleRecognitionError)\n      recognition.removeEventListener('result', handleRecognitionResult)\n    }\n  }, [recognition, handleRecognitionStart, handleRecognitionEnd, handleRecognitionError, handleRecognitionResult])\n\n  // NOTE: locale は recognition やイベントハンドラーと比べると変わりやすい。\n  useEffect(() => {\n    if (recognition === null) {\n      return\n    }\n\n    recognition.stop() // NOTE: recognition の言語を途中で変更することはできないので、 locale が変更されたら停止する。\n\n    recognition.lang = locale // tslint:disable-line:no-object-mutation\n  }, [recognition, locale])\n\n  const handleMicChange = useCallback<NonNullable<CheckboxProps['onChange']>>((_event, checked) => {\n    if (recognition === null) {\n      return\n    }\n\n    setListening(checked) // NOTE: onrecognitionstart/onrecognitionend でも同じことを行うが、一般に onChange で value を変更しないと状態がおかしくなることがある。\n\n    if (checked) {\n      recognition.start()\n    } else {\n      recognition.stop()\n    }\n  }, [recognition])\n\n  // NOTE: input が render された後の input.current が必要なので、 useMemo ではなく useState + useEffect を使う。\n  const [disabled, setDisabled] = useState(true)\n\n  useEffect(() => {\n    // NOTE: `input.current === null` のときに not disabled だと、レンダリングの途中でクリックすることで、本来は disabled な <input> で onChange が発生させることができる。\n    setDisabled(input.current === null || input.current.disabled)\n  })\n\n  useEffect(() => {\n    if (recognition === null) {\n      return\n    }\n\n    if (disabled) {\n      recognition.abort()\n    }\n  }, [disabled, recognition])\n\n  if (recognition === null && fallback !== undefined) {\n    return fallback\n  }\n\n  return (\n    <Tooltip title={ tooltip }>\n      <Checkbox\n        disabled={ disabled }\n        color=\"default\"\n        icon={ <MicNoneIcon /> }\n        checkedIcon={ <MicIcon /> }\n        checked={ listening }\n        onChange={ handleMicChange }\n      />\n    </Tooltip>\n  )\n}\n\nexport default MicSwitch\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  formControls: 'Form controls',\n})\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport TextField from '@material-ui/core/TextField'\nimport { Theme, makeStyles } from '@material-ui/core/styles'\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport Helmet from 'react-helmet'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport CodeField from '~/components/CodeField'\nimport { createPage } from '~/components/PageTemplate'\nimport CopyTextButton from '~/lib/components/CopyTextButton'\nimport FileUpload, { Props as FileUploadProps } from '~/lib/components/FileUpload'\nimport fileUploadMessages from '~/lib/components/FileUpload/messages'\nimport MicSwitch, { Props as MicSwitchProps } from '~/lib/components/MicSwitch'\nimport IntlProviderContext from '~/lib/contexts/IntlProviderContext'\nimport useScreen from '~/lib/hooks/useScreen'\nimport messages from './messages'\n\nconst CopiableTextField: React.FC = () => {\n  const [text, setText] = useState('')\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  return (\n    <TextField\n      label=\"label\"\n      value={ text }\n      onChange={ handleChange }\n      inputRef={ input }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <CopyTextButton inputFor={ input } />\n          </InputAdornment>\n        ),\n      } }\n    />\n  )\n}\n\nconst MicIncludedTextField: React.FC = () => {\n  const { dir } = useContext(IntlProviderContext)\n  const [text, setText] = useState('')\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  const handleResult = useCallback<MicSwitchProps['onResult']>((_event, value) => {\n    if (input.current === null) {\n      return\n    }\n\n    setText(value)\n\n    /* tslint:disable:no-object-mutation */\n    input.current.scrollTop = input.current.scrollHeight - input.current.offsetHeight\n\n    switch (dir) {\n      case 'ltr':\n        input.current.scrollLeft = input.current.scrollWidth - input.current.offsetWidth\n        break\n      case 'rtl':\n        input.current.scrollLeft = -(input.current.scrollWidth - input.current.offsetWidth)\n    }\n    /* tslint:enable:no-object-mutation */\n  }, [\n    dir,\n    input,\n    // To handle resizing, DOM updates, etc:\n    input.current?.scrollWidth,\n    input.current?.scrollHeight,\n    input.current?.offsetWidth,\n    input.current?.offsetHeight,\n  ])\n\n  return (\n    <TextField\n      label=\"label\"\n      value={ text }\n      onChange={ handleChange }\n      inputRef={ input }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <MicSwitch\n              inputFor={ input }\n              onResult={ handleResult }\n              fallback={ null }\n            />\n          </InputAdornment>\n        ),\n      } }\n    />\n  )\n}\n\nconst MicIncludedCopiableTextField: React.FC = () => {\n  const { dir } = useContext(IntlProviderContext)\n  const [text, setText] = useState('')\n  const input = useRef<HTMLInputElement>(null)\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setText(event.target.value)\n  }, [])\n\n  const handleResult = useCallback<MicSwitchProps['onResult']>((_event, value) => {\n    if (input.current === null) {\n      return\n    }\n\n    setText(value)\n\n    /* tslint:disable:no-object-mutation */\n    input.current.scrollTop = input.current.scrollHeight - input.current.offsetHeight\n\n    switch (dir) {\n      case 'ltr':\n        input.current.scrollLeft = input.current.scrollWidth - input.current.offsetWidth\n        break\n      case 'rtl':\n        input.current.scrollLeft = -(input.current.scrollWidth - input.current.offsetWidth)\n    }\n    /* tslint:enable:no-object-mutation */\n  }, [\n    dir,\n    input,\n    // To handle resizing, DOM updates, etc:\n    input.current?.scrollWidth,\n    input.current?.scrollHeight,\n    input.current?.offsetWidth,\n    input.current?.offsetHeight,\n  ])\n\n  return (\n    <TextField\n      label=\"label\"\n      value={ text }\n      onChange={ handleChange }\n      inputRef={ input }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <MicSwitch\n              inputFor={ input }\n              onResult={ handleResult }\n              fallback={ null }\n            />\n            <CopyTextButton inputFor={ input } />\n          </InputAdornment>\n        ),\n      } }\n    />\n  )\n}\n\ninterface ImageFileProps {\n  file: File\n}\n\ninterface StyleProps {\n  width: number | null\n  height: number | null\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, 'Image'>({\n  Image: {\n    maxWidth: ({ width }) => width !== null ? width / 2 : undefined,\n    maxHeight: ({ height }) => height !== null ? height / 2 : undefined,\n  },\n})\n\nconst ImageFile: React.FC<ImageFileProps> = ({ file }) => {\n  const [src, setSrc] = useState<string | null>(null)\n  const reader = useMemo(() => new FileReader, [])\n  const { width, height } = useScreen()\n  const jssClasses = useStyles({ width, height })\n\n  const handleReaderLoad = useCallback<NonNullable<FileReader['onload']>>((event) => {\n    if (event.target?.result == null) {\n      return\n    }\n\n    if (event.target.result instanceof ArrayBuffer) {\n      throw new Error //\n    }\n\n    setSrc(event.target.result)\n  }, [])\n\n  useEffect(() => {\n    reader.addEventListener('load', handleReaderLoad)\n\n    return () => {\n      reader.removeEventListener('load', handleReaderLoad)\n    }\n  }, [reader, handleReaderLoad])\n\n  useEffect(() => {\n    if (!/^image\\/[0-9A-Za-z][!#$&+-.0-9A-Z^_a-z]*$/.test(file.type)) {\n      throw new Error\n    }\n\n    reader.readAsDataURL(file)\n  }, [file, reader])\n\n  return (\n    <img src={ src ?? undefined } className={ jssClasses.Image } />\n  )\n}\n\nconst FormControlsPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  const renderResult = useCallback<Required<FileUploadProps>['renderResultMessage']>((files) => {\n    if (files === null || files.length === 0) {\n      return <FormattedMessage { ...fileUploadMessages.noFileSelected } />\n    }\n\n    return Array.from(files).map((file, i) => <ImageFile key={ i } file={ file } />)\n  }, [])\n\n  const [code, setCode] = useState('')\n\n  const handleCodeFieldChange = useCallback<React.ChangeEventHandler<HTMLTextAreaElement>>((event) => {\n    setCode(event.target?.value)\n  }, [])\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.formControls) } />\n      <List>\n        <ListItem>\n          <ListItemText>\n            <FileUpload\n              accept=\"image/*\"\n              multiple\n              renderResultMessage={ renderResult }\n            />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <CopiableTextField />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <MicIncludedTextField />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <MicIncludedCopiableTextField />\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemText>\n            <CodeField value={ code } onChange={ handleCodeFieldChange } />\n          </ListItemText>\n        </ListItem>\n      </List>\n    </>\n  )\n}\n\nexport default createPage(FormControlsPage)\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-CodeField-classes__Container--nU10n {\\n  position: relative;\\n  text-align: left;\\n}\\n\\n.src-components-CodeField-classes__Pre--3c2a_ {\\n  /* font-family: monospace; */\\n  font-size: 16px;\\n  line-height: 1.1876em;\\n  margin: 0;\\n  padding: 18.5px 14px;\\n  position: absolute;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  word-break: break-word;\\n}\\n\\n.src-components-CodeField-classes__TextArea--ZPHX8 {\\n  font-family: monospace;\\n  font-size: 16px;\\n  /* line-height: 1.1876em; */\\n  /* margin: 0; */\\n  -webkit-text-fill-color: transparent;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  /* word-break: break-word; */\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/CodeField/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,qBAAqB;EACrB,SAAS;EACT,oBAAoB;EACpB,kBAAkB;EAClB,qBAAqB;EACrB,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,2BAA2B;EAC3B,eAAe;EACf,oCAAoC;EACpC,qBAAqB;EACrB,iBAAiB;EACjB,4BAA4B;AAC9B\",\"sourcesContent\":[\".Container {\\n  position: relative;\\n  text-align: left;\\n}\\n\\n.Pre {\\n  /* font-family: monospace; */\\n  font-size: 16px;\\n  line-height: 1.1876em;\\n  margin: 0;\\n  padding: 18.5px 14px;\\n  position: absolute;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  word-break: break-word;\\n}\\n\\n.TextArea {\\n  font-family: monospace;\\n  font-size: 16px;\\n  /* line-height: 1.1876em; */\\n  /* margin: 0; */\\n  -webkit-text-fill-color: transparent;\\n  white-space: pre-wrap;\\n  /* width: 100%; */\\n  /* word-break: break-word; */\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Container\": \"src-components-CodeField-classes__Container--nU10n\",\n\t\"Pre\": \"src-components-CodeField-classes__Pre--3c2a_\",\n\t\"TextArea\": \"src-components-CodeField-classes__TextArea--ZPHX8\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-lib-components-FileUpload-classes__FileUpload--89hPZ {\\n  display: inline-block; /* TODO: polyfill */\\n  display: inline flow-root;\\n  cursor: pointer;\\n}\\n\\n.src-lib-components-FileUpload-classes__Button--3uZU-.src-lib-components-FileUpload-classes__Button--3uZU- {\\n  text-transform: none;\\n  cursor: unset;\\n}\\n\\n.src-lib-components-FileUpload-classes__Input--b4BE6 {\\n  display: none;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/lib/components/FileUpload/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,qBAAqB,EAAE,mBAAmB;EAC1C,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,oBAAoB;EACpB,aAAa;AACf;;AAEA;EACE,aAAa;AACf\",\"sourcesContent\":[\".FileUpload {\\n  display: inline-block; /* TODO: polyfill */\\n  display: inline flow-root;\\n  cursor: pointer;\\n}\\n\\n.Button.Button {\\n  text-transform: none;\\n  cursor: unset;\\n}\\n\\n.Input {\\n  display: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"FileUpload\": \"src-lib-components-FileUpload-classes__FileUpload--89hPZ\",\n\t\"Button\": \"src-lib-components-FileUpload-classes__Button--3uZU-\",\n\t\"Input\": \"src-lib-components-FileUpload-classes__Input--b4BE6\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}