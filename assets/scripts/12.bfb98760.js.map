{"version":3,"sources":["webpack:///./src/lib/validators/stringValidators.ts","webpack:///./src/infrastructure/EnvVarConfigRegistry.ts","webpack:///./src/lib/validators/gitHubApiResourceValidators.ts","webpack:///./src/infrastructure/GetRepoImpl.ts","webpack:///./src/infrastructure/persistence/double/TaskRepositoryFakeImpl.ts","webpack:///./src/container.ts"],"names":["asBoundedLengthString","lowerBound","Infinity","upperBound","input","inputAsString","asString","length","ValidationError","typed","asUrl","isUrl","EnvVarConfigRegistry","injectable","env","BASE_URL","process","GITHUB_API_URL","name","value","this","undefined","Error","asRepository","asObject","fullName","full_name","htmlUrl","html_url","asUnsuccessfulResponse","message","documentation_url","optional","GetRepoImpl","config","inject","owner","repo","gitHubApiUrl","get","fetch","method","parameterizedEndpoint","params","headers","Accept","status","response","body","successful","TaskRepositoryFakeImpl","taskId","task","localStorage","getItem","Task","deserialize","setItem","id","serialize","removeItem","container","Container","bind","to","Service","ChessService","CounterService","IoService","LocaleSelectorService","ReminderService"],"mappings":"yYAOO,IAAMA,EAAwB,SAAC,GAAD,QACnCC,kBADmC,OACrBC,IADqB,MAEnCC,kBAFmC,MAEtBD,IAFsB,SAM/B,SAACE,GAGL,IAAMC,EAAgBC,YAASF,GAE/B,GAAIH,GAAcI,EAAcE,QAAUF,EAAcE,QAAUJ,EAChE,OAAOE,EAGT,MAAM,IAAIG,IACRC,YADI,IAC+BJ,EAAkCJ,EAAoBE,GACzF,oCACA,CACEC,MAAOC,EAAcE,OACrBN,aACAE,iBAKC,SAASO,EAAMN,GACpB,IAAMC,EAAgBC,YAASF,GAE/B,IAAKO,YAAMN,GACT,MAAM,IAAIG,IAAgBC,YAApB,IAAuCJ,IAG/C,OAAOA,I,8NClCYO,EADpBC,sB,4CAESC,IAA6C,CACnDC,SAAUC,8CACVC,eAAgBD,0B,wCAMPE,GACT,IAAMC,EAAQC,KAAKN,IAAII,GAEvB,QAAcG,IAAVF,EACF,MAAM,IAAIG,MAAMb,YAAV,IAAiCS,IAGzC,OAAOC,M,oECfX,I,EAAMI,EAAeC,YAAuC,gBAAgB,SAACpB,GAAD,MAAY,CACtFqB,SAAUnB,YAASF,EAAMsB,WACzBC,QAASjB,YAAMN,EAAMwB,cAGVC,EAAyBL,YAAiD,2BAA2B,SAACpB,GAAD,MAAY,CAC5H0B,QAASxB,YAASF,EAAM0B,SACxBC,kBAAmBC,YAAS1B,IAAT0B,CAAmB5B,EAAM2B,uB,yFCLzBE,EADpBpB,sB,cAEC,cAEE,iBADgCqB,S,eAA/BC,iBAAO,eAAPA,C,gKAGkBC,E,EAAAA,MAAOC,E,EAAAA,KACpBC,EAAelB,KAAKc,OAAOK,IAAI,kB,SAEQC,YAAM,CACjDC,OAAQ,MACRC,sBAAuBjC,YAAF,IAAqB6B,GAC1CK,OAAQ,CAAEP,QAAOC,QACjBO,QAAS,CACPC,OAAQ,oC,mBALQC,E,EAAZC,SAAYD,OAAUE,E,EAAAA,KASf,MAAXF,E,0CACK,CACLG,YAAY,EACZF,SAAU,CACRD,SACAE,MD5BwB5C,EC4BA4C,ED3BzBzB,EAAanB,O,iCC+BT,CACL6C,YAAY,EACZF,SAAU,CACRD,SACAE,KAAMnB,EAAuBmB,M,kCDpChC,IAA2B5C,I,8EEIb8C,EADpBrC,sB,iHAEuBsC,G,0EAGP,QAFPC,EAAOC,aAAaC,QAAQH,EAAOhC,Q,sBAGjC,IAAIG,M,gCAGLiC,IAAKC,YAAYJ,I,wIAGPA,G,0FACVC,aAAaI,QAAQL,EAAKM,GAAGvC,MAAOiC,EAAKO,c,yIAG9BR,G,0FACXE,aAAaO,WAAWT,EAAOhC,Q,yJCRpC0C,EAAY,IAAIC,YAEtBD,EAAUE,KAAqB,gBAAgBC,GAAGpD,GAClDiD,EAAUE,KAAc,WAAWC,GAAG/B,GACtC4B,EAAUE,KAAqB,kBAAkBC,GAAGd,GACpDW,EAAUE,KAAc,WAAWC,GAAGC,KACtCJ,EAAUE,KAAmB,gBAAgBC,GAAGE,KAChDL,EAAUE,KAAqB,kBAAkBC,GAAGG,KACpDN,EAAUE,KAAgB,aAAaC,GAAGI,KAC1CP,EAAUE,KAA4B,yBAAyBC,GAAGK,KAClER,EAAUE,KAAsB,mBAAmBC,GAAGM,KAEvCT","file":"assets/scripts/12.bfb98760.js","sourcesContent":["import assert from 'assert'\n\nimport { isUrl } from '~/lib/guards/stringGuards'\nimport typed from '~/lib/typed'\nimport ValidationError from './ValidationError'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new ValidationError(\n    typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`,\n    'asBoundedLengthStringErrorMessage',\n    {\n      input: inputAsString.length,\n      lowerBound,\n      upperBound,\n    }\n  )\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new ValidationError(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n","import { injectable } from 'inversify'\n\nimport ConfigRegistry, { ConfigKey } from '~/config/ConfigRegistry'\nimport typed from '~/lib/typed'\n\n@injectable()\nexport default class EnvVarConfigRegistry implements ConfigRegistry {\n  private env: Record<ConfigKey, string | undefined> = {\n    BASE_URL: process.env.BASE_URL,\n    GITHUB_API_URL: process.env.GITHUB_API_URL,\n  }\n\n  /**\n   * @throws {Error} if not found.\n   */\n  public get(name: ConfigKey) {\n    const value = this.env[name]\n\n    if (value === undefined) {\n      throw new Error(typed<[string]>`The ${ name } environment variable does not exist.`) // TODO:\n    }\n\n    return value\n  }\n}\n","import { asObject, asString, optional } from './commonValidators'\nimport { asUrl } from './stringValidators'\n\nexport function asGetRepoResponse(input: unknown): GitHubApiResource.GetRepoResponse {\n  return asRepository(input)\n}\n\nconst asRepository = asObject<GitHubApiResource.Repository>('a Repository', (input) => ({\n  fullName: asString(input.full_name),\n  htmlUrl: asUrl(input.html_url),\n}))\n\nexport const asUnsuccessfulResponse = asObject<GitHubApiResource.UnsuccessfulResponse>('an UnsuccessfulResponse', (input) => ({\n  message: asString(input.message),\n  documentation_url: optional(asString)(input.documentation_url),\n}))\n","import { inject, injectable } from 'inversify'\n\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport fetch from '~/lib/fetch'\nimport typed from '~/lib/typed'\nimport { asGetRepoResponse, asUnsuccessfulResponse } from '~/lib/validators/gitHubApiResourceValidators'\nimport GetRepo, { GetRepoInput, GetRepoOutput } from '~/useCase/GetRepo'\n\n@injectable()\nexport default class GetRepoImpl implements GetRepo {\n  constructor(\n    @inject('EnvVarConfig') private config: ConfigRegistry\n  ) {}\n\n  public async apply({ owner, repo }: GetRepoInput): Promise<GetRepoOutput> {\n    const gitHubApiUrl = this.config.get('GITHUB_API_URL')\n\n    const { response: { status }, body } = await fetch({\n      method: 'GET',\n      parameterizedEndpoint: typed<[string]>`${ gitHubApiUrl }/repos/:owner/:repo`,\n      params: { owner, repo },\n      headers: {\n        Accept: 'application/vnd.github.v3+json',\n      },\n    })\n\n    if (status === 200) {\n      return {\n        successful: true,\n        response: {\n          status,\n          body: asGetRepoResponse(body),\n        },\n      }\n    } else {\n      return {\n        successful: false,\n        response: {\n          status,\n          body: asUnsuccessfulResponse(body),\n        },\n      }\n    }\n  }\n}\n","import { injectable } from 'inversify'\n\nimport Task from '~/domain/entity/Task'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport TaskId from '~/domain/vo/TaskId'\n\n@injectable()\nexport default class TaskRepositoryFakeImpl implements TaskRepository {\n  public async findById(taskId: TaskId) {\n    const task = localStorage.getItem(taskId.value)\n\n    if (task === null) {\n      throw new Error // TODO:\n    }\n\n    return Task.deserialize(task)\n  }\n\n  public async store(task: Task) {\n    return localStorage.setItem(task.id.value, task.serialize())\n  }\n\n  public async remove(taskId: TaskId) {\n    return localStorage.removeItem(taskId.value)\n  }\n}\n","import { Container } from 'inversify'\n\nimport ConfigRegistry from './config/ConfigRegistry'\nimport TaskRepository from './domain/repository/TaskRepository'\nimport EnvVarConfigRegistry from './infrastructure/EnvVarConfigRegistry'\nimport GetRepoImpl from './infrastructure/GetRepoImpl'\nimport TaskRepositoryFakeImpl from './infrastructure/persistence/double/TaskRepositoryFakeImpl' // TODO:\nimport Service from './redux'\nimport { ChessService } from './redux/modules/chess'\nimport { CounterService } from './redux/modules/counter'\nimport { IoService } from './redux/modules/io'\nimport LocaleSelectorService from './redux/modules/localeSelector'\nimport ReminderService from './redux/modules/reminder'\nimport GetRepo from './useCase/GetRepo'\n\nconst container = new Container\n\ncontainer.bind<ConfigRegistry>('EnvVarConfig').to(EnvVarConfigRegistry)\ncontainer.bind<GetRepo>('GetRepo').to(GetRepoImpl)\ncontainer.bind<TaskRepository>('TaskRepository').to(TaskRepositoryFakeImpl)\ncontainer.bind<Service>('Service').to(Service)\ncontainer.bind<ChessService>('ChessService').to(ChessService)\ncontainer.bind<CounterService>('CounterService').to(CounterService)\ncontainer.bind<IoService>('IoService').to(IoService)\ncontainer.bind<LocaleSelectorService>('LocaleSelectorService').to(LocaleSelectorService)\ncontainer.bind<ReminderService>('ReminderService').to(ReminderService)\n\nexport default container\n"],"sourceRoot":""}