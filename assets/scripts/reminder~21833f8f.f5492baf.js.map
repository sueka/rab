{"version":3,"sources":["webpack:///./src/lib/guards/commonGuards.ts","webpack:///./src/components/Nav/classes.css?d9b5","webpack:///./src/components/LocaleSelect/messages.ts","webpack:///./src/components/LocaleSelect/index.tsx","webpack:///./src/lib/languageNameSolver/index.ts","webpack:///./src/lib/components/Link/index.tsx","webpack:///./src/lib/components/MenuItemLink/index.tsx","webpack:///./src/components/Nav/messages.ts","webpack:///./src/components/Nav/index.tsx","webpack:///./src/lib/components/ErrorBoundary/index.ts","webpack:///./src/templates/PageTemplate/index.tsx","webpack:///./src/lib/validators/stringValidators.ts","webpack:///./src/components/Reminder/TaskListItem/classes.css?80b3","webpack:///./src/lib/curry.ts","webpack:///./src/components/Reminder/AddTaskButton/messages.ts","webpack:///./src/components/Reminder/AddTaskButton/index.tsx","webpack:///./src/components/Reminder/TaskList/index.tsx","webpack:///./src/components/Reminder/TaskListItem/DeleteTaskButton/index.tsx","webpack:///./src/components/Reminder/TaskListItem/messages.ts","webpack:///./src/components/Reminder/TaskListItem/index.tsx","webpack:///./src/components/Reminder/index.tsx","webpack:///./src/components/App/ReminderPage/messages.ts","webpack:///./src/components/App/ReminderPage/index.tsx"],"names":["isOneOf","options","input","some","option","optional","isT","undefined","module","exports","defineMessages","languages","mapDispatchToProps","selectLocale","connect","locale","localeSelector","classes","FormControlProps","useState","labelWidth","setLabelWidth","inputId","useMemo","v4","theme","useTheme","variant","props","MuiFormControl","rootClassName","classnames","root","className","labelClassName","label","inputClassName","selectIconClassName","selectIcon","inputUnderlineClassName","inputUnderline","inputLabel","useCallback","node","offsetWidth","handleChange","event","tag","target","value","tagNativeNameMap","availableLocales","useContext","IntlProviderContext","FormControl","InputLabel","ref","htmlFor","messages","Select","icon","native","onChange","id","inputProps","standard","Input","underline","outlined","OutlinedInput","filled","FilledInput","map","availableLocale","i","key","isTypographyColor","RouterLinkWithRef","React","forwardRef","innerRef","Link","this","color","restProps","component","console","warn","typed","Component","MenuItemLink","menuItem","to","button","menuItemProps","LinkWithRef","linkProps","link","MenuItem","home","chess","counter","info","reminder","Nav","anchorEl","setAnchorEl","openMenu","currentTarget","closeMenu","AppBar","position","Toolbar","IconButton","edge","onClick","Spacer","LocaleSelectLabel","LocaleSelectInput","LocaleSelectSelectIcon","LocaleSelectInputUnderline","Menu","open","onClose","ErrorBoundary","state","hasError","renderError","children","error","getDerivedStateFromError","PageTemplate","Error","String","TypeError","createPage","Body","asBoundedLengthString","lowerBound","Infinity","upperBound","inputAsString","asString","length","ValidationError","asUrl","isUrl","curry","f","x","xs","add","AddTaskButton","addTask","Button","TaskList","List","TaskListItem","asBoundedLengthStringErrorMessage","index","onDelete","moveTask","validate","useRef","useDrag","item","type","collect","monitor","dragging","isDragging","drag","useDrop","accept","hover","targetIndex","drop","TaskListItemContainer","Dragging","handleContentChange","content","handleDoneChange","_checked","done","checked","formatMessage","useIntl","errors","helperText","Object","keys","Case","sentence","values","ListItem","container","secondaryAction","ListItemSecondaryAction","ListItemIcon","Checkbox","TextField","fullWidth","disabled","DeleteTaskButton","asObject","leftOnly","named","asBoolean","addTaskAsync","changeTaskContent","changeTaskContentAsync","markTaskAsDone","markTaskAsDoneAsync","markTaskAsUndone","markTaskAsUndoneAsync","deleteTask","deleteTaskAsync","tasks","changeTask","taskId","task","title"],"mappings":"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","file":"assets/scripts/reminder~21833f8f.f5492baf.js","sourcesContent":["import identity from '~/lib/identity'\n\nexport const isOneOf = <T extends readonly Json[]>(...options: T) => (input: unknown): input is T[number] => options.some((option) => option === input)\n\nexport const optional = <A extends unknown, T extends A>(isT: (input: A) => input is T) => (input: A | undefined): input is T | undefined => {\n  if (input === undefined) {\n    return true\n  }\n\n  return isT(input)\n}\n\nexport const isObject = <A extends B, T extends A, B = A>(isT: (input: B) => Record<keyof A, boolean>) => (input: A): input is T => {\n  return Object.values<boolean>(isT(input)).every(identity)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spacer\":\"src-components-Nav-classes__Spacer--36ovl\",\"LocaleSelectLabel\":\"src-components-Nav-classes__LocaleSelectLabel--3h3DV\",\"LocaleSelectInput\":\"src-components-Nav-classes__LocaleSelectInput--3oNu1\",\"LocaleSelectSelectIcon\":\"src-components-Nav-classes__LocaleSelectSelectIcon--2AyFk\",\"LocaleSelectInputUnderline\":\"src-components-Nav-classes__LocaleSelectInputUnderline--2WFrx\"};","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  languages: 'Languages',\n})\n","import classnames from 'classnames'\nimport React, { useCallback, useContext, useMemo, useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { connect } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport FilledInput from '@material-ui/core/FilledInput'\nimport FormControl, { FormControlProps } from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport Select, { SelectProps } from '@material-ui/core/Select'\nimport { useTheme } from '@material-ui/core/styles'\n\nimport IntlProviderContext from '~/lib/contexts/IntlProviderContext'\nimport { Tag, getNativeNameByTag, isTag } from '~/lib/languageNameSolver'\nimport { State } from '~/redux'\nimport { selectLocale } from '~/redux/modules/localeSelector'\nimport messages from './messages'\n\ninterface OwnProps {\n  classes?: {\n    root?: string\n    label?: string\n    input?: string\n    selectIcon?: string\n    inputUnderline?: string\n  } | null\n  FormControlProps?: FormControlProps | null\n}\n\ninterface StateProps {\n  locale: Tag\n}\n\ninterface DispatchProps {\n  selectLocale(locale: Tag): void\n}\n\ntype Props =\n  & OwnProps\n  & StateProps\n  & DispatchProps\n\nexport /* for testing */ const LocaleSelect: React.FunctionComponent<Props> = ({ classes, FormControlProps, locale, selectLocale }) => {\n  const [labelWidth, setLabelWidth] = useState<number>(0)\n  const inputId = useMemo(v4, [])\n  const theme = useTheme()\n\n  // NOTE: Fortunately, FormControl is nothing but FormControl.\n  const variant = useMemo(() => FormControlProps?.variant ?? theme?.props?.MuiFormControl?.variant ?? 'standard', [FormControlProps?.variant, theme?.props?.MuiFormControl?.variant])\n\n  const rootClassName = useMemo(() => classnames(classes?.root, FormControlProps?.className), [classes?.root, FormControlProps?.className])\n  const labelClassName = useMemo(() => classnames(classes?.label), [classes?.label])\n  const inputClassName = useMemo(() => classnames(classes?.input), [classes?.input])\n  const selectIconClassName = useMemo(() => classnames(classes?.selectIcon), [classes?.selectIcon])\n  const inputUnderlineClassName = useMemo(() => classnames(classes?.inputUnderline), [classes?.inputUnderline])\n\n  const inputLabel = useCallback((node: HTMLLabelElement | null) => { // TODO: type\n    if (node !== null) {\n      setLabelWidth(node.offsetWidth)\n    }\n  }, [])\n\n  const handleChange = useCallback<NonNullable<SelectProps['onChange']>>((event) => {\n    if (isTag(event.target.value)) {\n      selectLocale(event.target.value)\n    }\n  }, [])\n\n  const { availableLocales } = useContext(IntlProviderContext)\n\n  return (\n    <FormControl\n      { ...FormControlProps }\n      className={ rootClassName } // NOTE: override FormControlProps.className\n    >\n      <InputLabel className={ labelClassName } ref={ inputLabel } htmlFor={ inputId }>\n        <FormattedMessage { ...messages.languages } />\n      </InputLabel>\n      <Select\n        classes={ {\n          icon: selectIconClassName,\n        } }\n        native\n        labelWidth={ labelWidth }\n        value={ locale }\n        onChange={ handleChange }\n        id={ inputId }\n        inputProps={ { 'data-testid': 'localeSelect' } }\n        input={ {\n          standard: (\n            <Input\n              className={ inputClassName }\n              classes={ {\n                underline: inputUnderlineClassName,\n              } }\n            />\n          ),\n          outlined: <OutlinedInput className={ inputClassName } labelWidth={ labelWidth } />,\n          filled: <FilledInput className={ inputClassName } />,\n        }[variant] }\n      >\n        { availableLocales?.map((availableLocale, i) => (\n          <option key={ i } value={ availableLocale }>{ getNativeNameByTag(availableLocale) }</option>\n        )) }\n      </Select>\n    </FormControl>\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ localeSelector: { locale } }: State): StateProps => ({\n  locale,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  selectLocale,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocaleSelect)\n","import tagNativeNameMap from './__data__/tagNativeNameMap.json'\n\nexport type Tag = keyof typeof tagNativeNameMap\n\nexport function isTag(tag: unknown): tag is Tag {\n  return typeof tag === 'string' && tag in tagNativeNameMap\n}\n\nexport function getNativeNameByTag(tag: Tag) {\n  return tagNativeNameMap[tag]\n}\n","import React from 'react'\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom'\n\nimport MuiLink, { LinkProps as MuiLinkProps } from '@material-ui/core/Link'\n\nimport { isOneOf, optional } from '~/lib/guards/commonGuards'\nimport typed from '~/lib/typed'\n\nexport type Props =\n  & RouterLinkProps\n  & Alt.Omit<MuiLinkProps, 'color' | 'ref'>\n\nconst isTypographyColor = optional(isOneOf('initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error'))\n\n// TODO: delete this; See also https://material-ui.com/guides/composition/#link\nconst RouterLinkWithRef = React.forwardRef<HTMLAnchorElement, RouterLinkProps>((props, ref) => (\n  <RouterLink innerRef={ ref } { ...props } />\n))\n\nexport default class Link extends React.Component<Props> {\n  public render() {\n    const { color, ...restProps } = this.props\n\n    if (!isTypographyColor(color)) {\n      console.warn(typed<[string]>`${ color } is not a Material-UI Typography color.`) // tslint:disable-line:no-console\n\n      return (\n        <MuiLink component={ RouterLinkWithRef } { ...restProps } />\n      )\n    }\n\n    return (\n      <MuiLink component={ RouterLinkWithRef } color={ color } { ...restProps } />\n    )\n  }\n}\n","import * as React from 'react'\n\nimport MenuItem, { MenuItemProps } from '@material-ui/core/MenuItem'\n\nimport Link, { Props as LinkProps } from '~/lib/components/Link'\n\ntype Props = MenuItemProps<typeof Link, { button?: true }>\n\nconst MenuItemLink: React.FunctionComponent<Props> = React.forwardRef<Link, React.PropsWithoutRef<Props>>(({ to, button, innerRef, ...menuItemProps }, menuItem) => {\n  // See https://material-ui.com/guides/composition/#link\n  const LinkWithRef = React.forwardRef<Link, LinkProps>((linkProps, link) => (\n    <Link ref={ link } innerRef={ innerRef } color=\"inherit\" underline=\"none\" { ...linkProps } />\n  ))\n\n  return (\n    <MenuItem button component={ LinkWithRef } to={ to } ref={ menuItem } { ...menuItemProps } />\n  )\n})\n\nexport default MenuItemLink\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  home: 'home',\n  chess: 'chess',\n  counter: 'counter',\n  info: 'info',\n  reminder: 'reminder',\n})\n","// import classnames from 'classnames'\nimport React, { useCallback, useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Menu from '@material-ui/core/Menu'\nimport Toolbar from '@material-ui/core/Toolbar'\n// import { createStyles, makeStyles } from '@material-ui/core/styles'\nimport MenuIcon from '@material-ui/icons/Menu'\n\nimport LocaleSelect from '~/components/LocaleSelect' // TODO\nimport MenuItemLink from '~/lib/components/MenuItemLink'\nimport classes from './classes.css'\nimport messages from './messages'\n\nconst Nav: React.FunctionComponent = () => {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null)\n\n  const openMenu = useCallback<React.MouseEventHandler<HTMLButtonElement>>((event) => {\n    setAnchorEl(event.currentTarget)\n  }, [])\n\n  const closeMenu = useCallback(() => {\n    setAnchorEl(null)\n  }, [])\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" onClick={ openMenu }>\n            <MenuIcon />\n          </IconButton>\n          <div className={ classes.Spacer } />\n          <LocaleSelect\n            classes={ {\n              label: classes.LocaleSelectLabel,\n              input: classes.LocaleSelectInput,\n              selectIcon: classes.LocaleSelectSelectIcon,\n              inputUnderline: classes.LocaleSelectInputUnderline,\n            } }\n            FormControlProps={ {\n              variant: 'filled',\n            } }\n          />\n        </Toolbar>\n      </AppBar>\n      <Menu open={ anchorEl !== null } anchorEl={ anchorEl } onClose={ closeMenu }>\n        <MenuItemLink to=\"/\" onClick={ closeMenu }>\n          <FormattedMessage { ...messages.home } />\n        </MenuItemLink>\n        <MenuItemLink to=\"/chess\" onClick={ closeMenu }>\n          <FormattedMessage { ...messages.chess } />\n        </MenuItemLink>\n        <MenuItemLink to=\"/counter\" onClick={ closeMenu }>\n          <FormattedMessage { ...messages.counter } />\n        </MenuItemLink>\n        <MenuItemLink to=\"/info\" onClick={ closeMenu }>\n          <FormattedMessage { ...messages.info } />\n        </MenuItemLink>\n        <MenuItemLink to=\"/reminder\" onClick={ closeMenu }>\n          <FormattedMessage { ...messages.reminder } />\n        </MenuItemLink>\n      </Menu>\n    </>\n  )\n}\n\nexport default Nav\n","import React from 'react'\n\ninterface Props {\n  /**\n   * @param children that throws {error}\n   */\n  renderError(error: unknown, children: React.ReactNode): React.ReactNode\n}\n\ninterface State {\n  hasError: boolean\n  error?: unknown\n}\n\nclass ErrorBoundary extends React.Component<Props, State> {\n\n  // NOTE: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/826ce0f1ce1d1887d199986283630d6f63075ad5/types/react/index.d.ts#L419 にも関わらず、初期化されていない state は null であるため、初期化を強制するためにプロパティ宣言を行う。\n  public state: Readonly<State> = {\n    hasError: false,\n  }\n\n  public static getDerivedStateFromError = (error: unknown) => ({\n    hasError: true,\n    error,\n  })\n\n  public render() {\n    const { renderError, children } = this.props\n    const { hasError, error } = this.state\n\n    if (hasError) {\n      return renderError(error, children)\n    }\n\n    return children\n  }\n}\n\nexport default ErrorBoundary\n","import React, { useCallback } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport Nav from '~/components/Nav'\nimport ErrorBoundary from '~/lib/components/ErrorBoundary'\nimport typed from '~/lib/typed'\n\ninterface PageTemplateProps {\n  children: React.ReactElement<BodyProps, React.ComponentType<BodyProps>>\n}\n\ntype BodyProps = PageProps\n\ntype PageProps =\n  & RouteComponentProps\n\nconst PageTemplate: React.FunctionComponent<PageTemplateProps> = ({ children }) => {\n  const renderError = useCallback((error: unknown) => {\n    if (error instanceof Error) {\n      return typed<[string]>`${ String(error) }`\n    }\n\n    throw new TypeError(typed<[string]>`${ String(error) } is not an error.`)\n  }, [])\n\n  return (\n    <>\n      <Nav />\n      <ErrorBoundary renderError={ renderError }>\n        { children }\n      </ErrorBoundary>\n    </>\n  )\n}\n\nexport const createPage: (Body: React.FunctionComponent<BodyProps>) => React.FunctionComponent<PageProps> = (Body) => (props) => (\n  <PageTemplate>\n    <Body { ...props } />\n  </PageTemplate>\n)\n\nexport default PageTemplate\n","import assert from 'assert'\n\nimport { isUrl } from '~/lib/guards/stringGuards'\nimport typed from '~/lib/typed'\nimport ValidationError from './ValidationError'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new ValidationError(\n    typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`,\n    'asBoundedLengthStringErrorMessage',\n    {\n      input: inputAsString.length,\n      lowerBound,\n      upperBound,\n    }\n  )\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new ValidationError(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskListItemContainer\":\"src-components-Reminder-TaskListItem-classes__TaskListItemContainer--3F5ef\",\"Dragging\":\"src-components-Reminder-TaskListItem-classes__Dragging--1TtFC\",\"ListItemSecondaryAction\":\"src-components-Reminder-TaskListItem-classes__ListItemSecondaryAction--3QycB\"};","const curry = <T0, Ts extends unknown[], U>(f: (x: T0, ...xs: Ts) => U) => (x: T0) => (...xs: Ts): U => f(x, ...xs)\n\nexport default curry\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  add: 'add',\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport Button from '@material-ui/core/Button'\n\nimport messages from './messages'\n\nexport interface Props {\n  addTask(): void\n}\n\nconst AddTaskButton: React.FunctionComponent<Props> = ({ addTask }) => (\n  <Button onClick={ addTask } variant=\"contained\" color=\"secondary\">\n    <FormattedMessage { ...messages.add } />\n  </Button>\n)\n\nexport default AddTaskButton\n","import React from 'react'\n\nimport List from '@material-ui/core/List'\n\nimport { Props as TaskListItemProps } from '~/components/Reminder/TaskListItem'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemProps, React.ComponentType<TaskListItemProps>> | Array<React.ReactElement<TaskListItemProps, React.ComponentType<TaskListItemProps>>>\n}\n\nconst TaskList: React.FunctionComponent<Props> = ({ children }) => (\n  <List>\n    { children }\n  </List>\n)\n\nexport default TaskList\n","import React from 'react'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nexport interface Props {\n  onClick(): void\n}\n\nconst TaskListItem: React.FunctionComponent<Props> = ({ onClick }) => (\n  <IconButton onClick={ onClick }>\n    <DeleteIcon />\n  </IconButton>\n)\n\nexport default TaskListItem\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  asBoundedLengthStringErrorMessage: '{ name } must be 0-{ upperBound } characters.',\n})\n","import Case from 'case'\nimport classnames from 'classnames'\nimport React, { useCallback, useMemo, useRef } from 'react'\nimport { DragObjectWithType, useDrag, useDrop } from 'react-dnd'\nimport { useIntl } from 'react-intl'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport TextField from '@material-ui/core/TextField'\n\nimport Task from '~/domain/entity/Task'\nimport TaskId from '~/domain/vo/TaskId'\nimport { isOneOf } from '~/lib/guards/commonGuards'\nimport ValidationError from '~/lib/validators/ValidationError'\nimport DeleteTaskButton from './DeleteTaskButton'\nimport classes from './classes.css'\nimport messages from './messages'\n\nexport interface Props {\n  id: TaskId\n  value: Pick<Task, 'content' | 'done'>\n  index: number\n\n  onChange(value: Partial<Task>): void\n  onDelete(): void\n  moveTask(sourceIndex: number, targetIndex: number): void\n  validate(input: Pick<Task, 'content' | 'done'>): Partial<Record<'content' | 'done', ValidationError>>\n}\n\ninterface CollectedProps {\n  dragging: boolean\n}\n\ninterface DragObject extends DragObjectWithType {\n  id: TaskId\n  index: number\n}\n\nconst TaskListItem: React.FunctionComponent<Props> = ({ id, value, index, onChange, onDelete, moveTask, validate }) => {\n  const ref = useRef(null)\n\n  const [{ dragging }, drag] = useDrag<DragObject, unknown, CollectedProps>({\n    item: {\n      type: 'TaskListItem',\n      id,\n      index,\n    },\n    collect: (monitor) => ({\n      dragging: monitor.isDragging(),\n    }),\n  })\n\n  const [, drop] = useDrop<DragObject, unknown, unknown>({\n    accept: 'TaskListItem',\n    hover(item) {\n      const targetIndex = index\n\n      if (item.index === targetIndex) {\n        return\n      }\n\n      moveTask(item.index, targetIndex)\n\n      // tslint:disable-next-line:no-object-mutation\n      item.index = targetIndex\n    },\n  })\n\n  drop(drag(ref))\n\n  const className = useMemo(() => classnames(classes.TaskListItemContainer, {\n    [classes.Dragging]: dragging,\n  }), [dragging])\n\n  const handleContentChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    onChange({\n      content: event.target.value,\n    })\n  }, [onChange])\n\n  const handleDoneChange = useCallback((event: React.ChangeEvent<HTMLInputElement>, _checked: boolean) => {\n    onChange({\n      done: event.target.checked,\n    })\n  }, [onChange])\n\n  const { formatMessage } = useIntl()\n\n  const errors = useMemo(() => validate(value), [value, validate])\n\n  const helperText = useMemo(() => {\n    if (errors.content === undefined) {\n      return null\n    }\n\n    if (isOneOf(...Object.keys(messages))(errors.content.key)) {\n      return Case.sentence(formatMessage(messages[errors.content.key], errors.content.values))\n    }\n\n    return null // TODO\n  }, [errors.content])\n\n  return (\n    <div ref={ ref }>\n      <ListItem\n        classes={ {\n          container: className,\n          secondaryAction: classes.ListItemSecondaryAction,\n        } }\n      >\n        <ListItemIcon>\n          <Checkbox checked={ value.done } onChange={ handleDoneChange } />\n        </ListItemIcon>\n        <TextField\n          fullWidth\n          value={ value.content }\n          onChange={ handleContentChange }\n          disabled={ value.done }\n          error={ errors.content !== undefined }\n          helperText={ helperText }\n        />\n        <ListItemSecondaryAction>\n          <DeleteTaskButton onClick={ onDelete } />\n        </ListItemSecondaryAction>\n      </ListItem>\n    </div>\n  )\n}\n\nexport default TaskListItem\n","import React, { useCallback } from 'react'\nimport { connect } from 'react-redux'\n\nimport Task from '~/domain/entity/Task'\nimport TaskId from '~/domain/vo/TaskId'\nimport curry from '~/lib/curry'\nimport { asBoolean, asObject, leftOnly, named } from '~/lib/validators/commonValidators'\nimport { asBoundedLengthString } from '~/lib/validators/stringValidators'\nimport { State } from '~/redux'\nimport { addTaskAsync, changeTaskContentAsync, deleteTaskAsync, markTaskAsDoneAsync, markTaskAsUndoneAsync, moveTask } from '~/redux/modules/reminder'\nimport AddTaskButton from './AddTaskButton'\nimport TaskList from './TaskList'\nimport TaskListItem from './TaskListItem'\n\ninterface StateProps {\n  tasks: Task[]\n}\n\ninterface DispatchProps {\n  addTask(): void\n  changeTaskContent(taskId: TaskId, content: string): void\n  markTaskAsDone(taskId: TaskId): void\n  markTaskAsUndone(taskId: TaskId): void\n  deleteTask(taskId: TaskId): void\n  moveTask(source: number, dest: number): void\n}\n\ntype Props =\n  & StateProps\n  & DispatchProps\n\nconst validate = asObject('a Task for presentation', (input) => ({\n  content: leftOnly(named('content', asBoundedLengthString({\n    upperBound: 140,\n  })))(input.content),\n  done: leftOnly(asBoolean)(input.done),\n}))\n\nconst Reminder: React.FunctionComponent<Props> = ({ tasks, addTask, changeTaskContent, markTaskAsDone, markTaskAsUndone, deleteTask, moveTask }) => {\n  const changeTask = useCallback((taskId, { content, done }) => {\n    if (content !== undefined) {\n      changeTaskContent(taskId, content)\n    }\n\n    if (done !== undefined) {\n      if (done) {\n        markTaskAsDone(taskId)\n      } else {\n        markTaskAsUndone(taskId)\n      }\n    }\n  }, [changeTaskContent, markTaskAsDone, markTaskAsUndone])\n\n  return (\n    <>\n      <TaskList>\n        {\n          tasks.map((task, index) => (\n            <TaskListItem\n              key={ task.id.value }\n              id={ task.id }\n              value={ task }\n              validate={ validate }\n              onChange={ curry(changeTask)(task.id) }\n              onDelete={ curry(deleteTask)(task.id) }\n              { ...{ index, moveTask } }\n            />\n          ))\n        }\n      </TaskList>\n      <AddTaskButton addTask={ addTask } />\n    </>\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ reminder: { tasks } }: State): StateProps => ({\n  tasks,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  addTask: addTaskAsync,\n  changeTaskContent: changeTaskContentAsync,\n  markTaskAsDone: markTaskAsDoneAsync,\n  markTaskAsUndone: markTaskAsUndoneAsync,\n  deleteTask: deleteTaskAsync,\n  moveTask,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  reminder: 'reminder',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport Reminder from '~/components/Reminder'\nimport { createPage } from '~/templates/PageTemplate'\nimport messages from './messages'\n\nconst ReminderPage: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.reminder) } />\n      <Reminder />\n    </>\n  )\n}\n\nexport default createPage(ReminderPage)\n"],"sourceRoot":""}