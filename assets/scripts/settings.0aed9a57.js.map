{"version":3,"sources":["webpack://rap/./src/atoms/fullScreenState.ts","webpack://rap/./src/components/App/SettingsPage/classes.css?465d","webpack://rap/./src/components/App/SettingsPage/messages.ts","webpack://rap/./src/components/App/SettingsPage/index.tsx","webpack://rap/./src/components/Banner/index.tsx","webpack://rap/./src/components/ObtainCookieConsentBanner/messages.ts","webpack://rap/./src/globalVariables/cookieDialogKey.ts","webpack://rap/./src/globalVariables/reloadNotToAcceptCookiesBannerKey.ts","webpack://rap/./src/hooks/useBanner.ts","webpack://rap/./src/components/App/SettingsPage/classes.css"],"names":["atom","key","default","effects_UNSTABLE","onSet","newFullScreen","DefaultValue","Error","document","documentElement","requestFullscreen","exitFullscreen","options","defineMessages","settings","appearance","darkTheme","fullScreen","securityAndPrivacy","acceptCookies","aPageReloadIsRequiredForTheConfigurationChangesToTakeEffect","reload","dontReload","createPage","formatMessage","useIntl","gtmContainerId","useInjection","get","gtm","useGtm","banner","useBanner","dark","setDark","useRecoilState","darkState","setFullScreen","fullScreenState","cookieConsentObtained","setCookieConsentObtained","cookieConsentObtainedState","defaultDark","useContext","DefaultDarkContext","shouldBePresent","handleDarkThemeChange","useCallback","_event","checked","handleFullScreenChange","handleReload","location","handleDontReload","hide","reloadNotToAcceptCookiesBannerKey","handleAcceptCookiesChange","undefined","install","cookieDialogKey","safe","show","Banner","leading","Avatar","Security","text","messages","actions","Button","variant","color","onClick","Helmet","title","Grid","container","item","xs","sm","md","lg","xl","List","subheader","ListSubheader","ListItem","classes","secondaryAction","ListItemText","primary","ListItemSecondaryAction","Switch","onChange","disabled","fullscreenEnabled","secondary","obtainedCookieConsentBannerMessages","isMobile","Bowser","navigator","userAgent","is","square","elevation","display","flexWrap","alignItems","my","ml","alignSelf","flexGrow","gridColumnGap","gridRowGap","mt","mb","mr","mx","weUseCookiesToAnalyzeOurTraffic","agree","cancel","v4","useRecoilCallback","set","replaceable","currentBannerState","currentBanner","bannersState","banners","i","findIndex","slice","___CSS_LOADER_EXPORT___","push","module","id","locals"],"mappings":"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","file":"assets/scripts/settings.0aed9a57.js","sourcesContent":["import { DefaultValue, atom } from 'recoil'\n\nconst fullScreenState = atom({\n  key: 'fullScreenState',\n  default: false,\n  effects_UNSTABLE: [\n    ({ onSet }) => {\n      onSet((newFullScreen) => {\n        if (newFullScreen instanceof DefaultValue) {\n          throw new Error\n        }\n\n        if (newFullScreen) {\n          document.documentElement.requestFullscreen()\n        } else {\n          document.exitFullscreen()\n        }\n      })\n    },\n  ],\n})\n\nexport default fullScreenState\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  settings: 'Settings',\n  appearance: 'Appearance',\n  darkTheme: 'Dark theme',\n  fullScreen: 'Full screen',\n  securityAndPrivacy: 'Security and privacy',\n  acceptCookies: 'Accept cookies',\n  aPageReloadIsRequiredForTheConfigurationChangesToTakeEffect: 'A page reload is required for the configuration changes to take effect.',\n  reload: 'Reload',\n  dontReload: 'Don\\'t reload',\n})\n","import Avatar from '@material-ui/core/Avatar'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport Switch from '@material-ui/core/Switch'\nimport SecurityIcon from '@material-ui/icons/Security'\nimport { useInjection } from 'inversify-react'\nimport React, { useCallback, useContext } from 'react'\nimport Helmet from 'react-helmet'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useRecoilState } from 'recoil'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport cookieConsentObtainedState from '~/atoms/cookieConsentObtainedState'\nimport darkState from '~/atoms/darkState'\nimport fullScreenState from '~/atoms/fullScreenState'\nimport Banner from '~/components/Banner'\nimport obtainedCookieConsentBannerMessages from '~/components/ObtainCookieConsentBanner/messages' // TODO: Move\nimport { createPage } from '~/components/PageTemplate'\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport DefaultDarkContext from '~/contexts/DefaultDarkContext'\nimport cookieDialogKey from '~/globalVariables/cookieDialogKey'\nimport reloadNotToAcceptCookiesBannerKey from '~/globalVariables/reloadNotToAcceptCookiesBannerKey'\nimport useBanner from '~/hooks/useBanner'\nimport useGtm from '~/hooks/useGtm'\nimport classes from './classes.css'\nimport messages from './messages'\n\nconst SettingsPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n  const config = useInjection<ConfigRegistry>('EnvVarConfig')\n  const gtmContainerId = config.get('GTM_CONTAINER_ID')\n  const gtm = useGtm()\n  const banner = useBanner()\n\n  const [dark, setDark] = useRecoilState(darkState)\n  const [fullScreen, setFullScreen] = useRecoilState(fullScreenState)\n  const [cookieConsentObtained, setCookieConsentObtained] = useRecoilState(cookieConsentObtainedState)\n  const { defaultDark } = useContext(DefaultDarkContext)\n\n  shouldBePresent(defaultDark)\n\n  const handleDarkThemeChange = useCallback((_event, checked) => {\n    setDark(checked)\n  }, [])\n\n  const handleFullScreenChange = useCallback((_event, checked) => {\n    setFullScreen(checked)\n  }, [])\n\n  const handleReload = useCallback(() => {\n    location.reload()\n  }, [])\n\n  const handleDontReload = useCallback(() => {\n    banner.hide({ key: reloadNotToAcceptCookiesBannerKey })\n  }, [banner])\n\n  const handleAcceptCookiesChange = useCallback((_event, checked) => {\n    setCookieConsentObtained(checked)\n\n    if (checked) {\n      if (gtmContainerId !== undefined) {\n        gtm.install(gtmContainerId)\n      }\n\n      banner.hide({\n        key: cookieDialogKey,\n        safe: true,\n      })\n\n      banner.hide({\n        key: reloadNotToAcceptCookiesBannerKey,\n        safe: true,\n      })\n    } else {\n      banner.show(<Banner\n        leading={ <Avatar>\n          <SecurityIcon />\n        </Avatar> }\n        text={ <FormattedMessage { ...messages.aPageReloadIsRequiredForTheConfigurationChangesToTakeEffect } /> }\n        actions={ <>\n          <Button variant=\"text\" color=\"primary\" onClick={ handleReload }>\n            <FormattedMessage { ...messages.reload } />\n          </Button>\n          <Button variant=\"text\" color=\"primary\" onClick={ handleDontReload }>\n            <FormattedMessage { ...messages.dontReload } />\n          </Button>\n        </> }\n      />, {\n        key: reloadNotToAcceptCookiesBannerKey,\n      })\n    }\n  }, [gtm, gtmContainerId, banner, handleReload, handleDontReload])\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.settings) } />\n      <Grid container>\n        <Grid item xs={ 12 } sm={ 6 } md={ 4 } lg={ 3 } xl={ 2 }>\n          <List\n            subheader={ <ListSubheader>\n              <FormattedMessage { ...messages.appearance } />\n            </ListSubheader> }\n          >\n            <ListItem\n              classes={ {\n                secondaryAction: classes.ListItemSecondaryActionIsSwitch,\n              } }\n            >\n              <ListItemText primary={ <FormattedMessage { ...messages.darkTheme } /> } />\n              <ListItemSecondaryAction>\n                <Switch checked={ dark ?? defaultDark } onChange={ handleDarkThemeChange } />\n              </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem\n              disabled={ !document.fullscreenEnabled }\n              classes={ {\n                secondaryAction: classes.ListItemSecondaryActionIsSwitch,\n              } }\n            >\n              <ListItemText primary={ <FormattedMessage { ...messages.fullScreen } /> } />\n              <ListItemSecondaryAction>\n                <Switch\n                  checked={ fullScreen }\n                  onChange={ handleFullScreenChange }\n                  disabled={ !document.fullscreenEnabled }\n                />\n              </ListItemSecondaryAction>\n            </ListItem>\n          </List>\n        </Grid>\n        <Grid item xs={ 12 } sm={ 6 } md={ 4 } lg={ 3 } xl={ 2 }>\n          <List\n            subheader={ <ListSubheader>\n              <FormattedMessage { ...messages.securityAndPrivacy } />\n            </ListSubheader> }\n          >\n            <ListItem\n              classes={ {\n                secondaryAction: classes.ListItemSecondaryActionIsSwitch,\n              } }\n            >\n              <ListItemText\n                primary={ <FormattedMessage { ...messages.acceptCookies } /> }\n                secondary={ <FormattedMessage { ...obtainedCookieConsentBannerMessages.weUseCookiesToAnalyzeOurTraffic } /> }\n              />\n              <ListItemSecondaryAction>\n                <Switch checked={ cookieConsentObtained } onChange={ handleAcceptCookiesChange } disabled={ gtmContainerId === undefined } />\n              </ListItemSecondaryAction>\n            </ListItem>\n          </List>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default createPage(SettingsPage)\n","import { AvatarProps } from '@material-ui/core/Avatar'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Bowser from 'bowser'\nimport React from 'react'\n\nimport Spacer from '~/components/Spacer'\n\nexport interface Props {\n  leading?: React.ReactElement<AvatarProps, React.ComponentType<AvatarProps>>\n  text: React.ReactNode\n  actions: React.ReactNode\n}\n\n// TODO: Remove\n// TODO: Detect UA changes?\nconst browser = Bowser.getParser(navigator.userAgent)\n\nconst isMobile = browser.is('Mobile')\n\n/**\n * An implementation of https://material.io/components/banners.\n *\n * NOTE: Not support the no leading, mobile, one-line version.\n */\nconst Banner: React.FC<Props> = ({ leading, text, actions }) => (\n  <Paper square elevation={ 0 }>\n    <Box\n      display=\"flex\"\n      flexWrap=\"nowrap\"\n      alignItems={ isMobile ? 'flex-start' : 'center' }\n    >\n      { leading !== undefined && (\n        <Box\n          my={ isMobile ? 3 : 2 }\n          ml={ 2 }\n        >\n          { leading }\n        </Box>\n      ) }\n      <Box\n        alignSelf=\"stretch\"\n        display=\"flex\"\n        flexGrow={ 1 }\n        alignItems={ isMobile ? 'flex-start' : 'center' }\n        flexWrap={ isMobile ? 'wrap' : undefined }\n        gridColumnGap={ (isMobile ? 36 : 90) - 16 }\n        gridRowGap={ isMobile ? (leading !== undefined ? 20 : 12) - 10 : undefined }\n      >\n        <Box\n          mt={ isMobile ? 3 : 2 }\n          mb={ isMobile ? undefined : 2 }\n          ml={ isMobile ? 2 : 3 }\n          mr={ 1 }\n        >\n          <Typography variant=\"body2\">{ text }</Typography>{ /* TODO: Align to baseline */ }\n        </Box>\n        <Box\n          alignSelf=\"flex-end\"\n          display=\"flex\"\n          flexGrow={ 1 }\n        >\n          <Spacer />\n          <Box\n            mt={ isMobile ? 1.25 : 1 }\n            mx={ 1 }\n            mb={ 1 }\n            display=\"flex\"\n            gridColumnGap={ 8 }\n          >\n            { actions }\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  </Paper>\n)\n\nexport default Banner\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  weUseCookiesToAnalyzeOurTraffic: 'We use cookies to analyze our traffic.',\n  agree: 'Agree',\n  cancel: 'Cancel',\n})\n","import { v4 } from 'uuid'\n\nconst cookieDialogKey = v4()\n\nexport default cookieDialogKey\n","import { v4 } from 'uuid'\n\nconst reloadNotToAcceptCookiesBannerKey = v4()\n\nexport default reloadNotToAcceptCookiesBannerKey\n","import { useRecoilCallback } from 'recoil'\nimport { v4 } from 'uuid'\n\nimport bannersState from '~/atoms/bannersState'\nimport { Props as BannerProps } from '~/components/Banner'\nimport currentBannerState from '~/selectors/currentBannerState'\n\ntype BannerElement = React.ReactElement<BannerProps, React.ComponentType<BannerProps>>\n\ninterface ShowOptions {\n  key?: string\n  replaceable?: boolean\n}\n\ninterface HideOptions {\n  key?: string\n  safe?: boolean // no failures if true\n}\n\nconst useBanner = () => {\n  const show = useRecoilCallback(({ set }) => (banner: BannerElement, options?: ShowOptions) => {\n    const key = options?.key ?? v4()\n    const replaceable = options?.replaceable ?? false\n\n    set(currentBannerState, {\n      banner,\n      key,\n      replaceable,\n    })\n\n    return key\n  })\n\n  const hide = useRecoilCallback(({ set }) => (options?: HideOptions) => {\n    const key = options?.key\n    const safe = options?.safe ?? false\n\n    if (key === undefined) {\n      set(currentBannerState, (currentBanner) => {\n        if (currentBanner === null && !safe) {\n          throw new Error('No banner found.')\n        }\n\n        return null\n      })\n    } else {\n      set(bannersState, (banners) => {\n        const i = banners.findIndex((banner) => banner.key === key)\n\n        if (i === -1 && !safe) {\n          throw new Error('No banner found.')\n        }\n\n        if (i !== -1) {\n          return [\n            ...banners.slice(0, i),\n            ...banners.slice(i + 1),\n          ]\n        }\n\n        return banners\n      })\n    }\n  })\n\n  return { show, hide }\n}\n\nexport default useBanner\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-App-SettingsPage-classes__ListItemSecondaryActionIsSwitch--1pbgU {\\n  -webkit-padding-end: 64px;\\n          padding-inline-end: 64px; /* 元々の値 (48px) + Switch の幅 (58px) - Checkbox の幅 (42px) */\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/App/SettingsPage/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,yBAAwB;UAAxB,wBAAwB,EAAE,wDAAwD;AACpF\",\"sourcesContent\":[\".ListItemSecondaryActionIsSwitch {\\n  padding-inline-end: 64px; /* 元々の値 (48px) + Switch の幅 (58px) - Checkbox の幅 (42px) */\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"ListItemSecondaryActionIsSwitch\": \"src-components-App-SettingsPage-classes__ListItemSecondaryActionIsSwitch--1pbgU\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}