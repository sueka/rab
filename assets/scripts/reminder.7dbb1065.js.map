{"version":3,"file":"assets/scripts/reminder.7dbb1065.js","mappings":"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","sources":["webpack://rap/./node_modules/@material-ui/icons/DragHandle.js","webpack://rap/./src/curry.ts","webpack://rap/./src/components/Reminder/AddTaskButton/messages.ts","webpack://rap/./src/components/Reminder/AddTaskButton/index.tsx","webpack://rap/./src/components/Reminder/TaskList/index.tsx","webpack://rap/./src/components/Reminder/TaskListItem/classes.css?3117","webpack://rap/./src/components/Reminder/TaskListItem/messages.ts","webpack://rap/./src/components/Reminder/TaskListItem/index.tsx","webpack://rap/./src/components/Reminder/TaskListItemDropTarget/index.tsx","webpack://rap/./src/components/Reminder/index.tsx","webpack://rap/./src/components/App/ReminderPage/messages.ts","webpack://rap/./src/components/App/ReminderPage/index.tsx","webpack://rap/./src/validators/stringValidators.ts","webpack://rap/./src/guards/stringGuards.ts","webpack://rap/./src/components/Reminder/TaskListItem/classes.css"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 9H4v2h16V9zM4 15h16v-2H4v2z\"\n}), 'DragHandle');\n\nexports.default = _default;","type CurryFunction = <T0, Ts extends unknown[], U>(f: (x: T0, ...xs: Ts) => U) => (x: T0) => (...xs: Ts) => U\n\nconst curry: CurryFunction = (f) => (x) => (...xs) => f(x, ...xs)\n\nexport default curry\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  add: 'Add',\n})\n","import Button from '@material-ui/core/Button'\nimport React from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport messages from './messages'\n\nexport interface Props {\n  addTask(): void\n}\n\nconst AddTaskButton: React.FC<Props> = ({ addTask }) => (\n  <Button onClick={ addTask } variant=\"contained\" color=\"secondary\">\n    <FormattedMessage { ...messages.add } />\n  </Button>\n)\n\nexport default AddTaskButton\n","import List from '@material-ui/core/List'\nimport React from 'react'\n\nimport { Props as TaskListItemDropTargetProps } from '~/components/Reminder/TaskListItemDropTarget'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemDropTargetProps, React.ComponentType<TaskListItemDropTargetProps>> | React.ReactElement<TaskListItemDropTargetProps, React.ComponentType<TaskListItemDropTargetProps>>[]\n}\n\nconst TaskList: React.FC<Props> = ({ children }) => (\n  <List>\n    { children }\n  </List>\n)\n\nexport default TaskList\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  enterInUpperBoundCharactersOrLess: 'Enter in { upperBound } characters or less.',\n})\n","import Checkbox from '@material-ui/core/Checkbox'\nimport IconButton from '@material-ui/core/IconButton'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport TextField from '@material-ui/core/TextField'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport DragHandleIcon from '@material-ui/icons/DragHandle'\nimport classnames from 'classnames'\nimport React, { useCallback, useMemo } from 'react'\nimport { useDrag } from 'react-dnd'\nimport { useIntl } from 'react-intl'\n\nimport Task, { TaskParams } from '~/domain/entity/Task'\nimport classes from './classes.css'\nimport messages from './messages'\n\nexport interface Props {\n  value: Task\n  index: number\n\n  onChange(value: Partial<TaskParams>): void\n  onDelete(): void\n  validate(input: Task): Partial<Record<keyof Task, Error>>\n}\n\ninterface CollectedProps {\n  dragging: boolean\n}\n\nexport interface DragObject {\n  value: Task\n  index: number\n}\n\nconst TaskListItem: React.FC<Props> = ({ value, index, onChange, onDelete, validate }) => {\n  const [{ dragging }, drag, preview] = useDrag<DragObject, unknown, CollectedProps>({\n    type: 'TaskListItem',\n    item: {\n      value,\n      index,\n    },\n    isDragging: (monitor) => {\n      const item: DragObject = monitor.getItem()\n\n      return value.isIdenticalTo(item.value)\n    },\n    collect: (monitor) => ({\n      dragging: monitor.isDragging(),\n    }),\n  })\n\n  const className = useMemo(() => classnames(classes.TaskListItemContainer, {\n    [classes.Dragging]: dragging,\n  }), [dragging])\n\n  const handleContentChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    onChange({\n      content: event.target.value,\n    })\n  }, [onChange])\n\n  const handleDoneChange = useCallback((event: React.ChangeEvent<HTMLInputElement>, _checked: boolean) => {\n    onChange({\n      done: event.target.checked,\n    })\n  }, [onChange])\n\n  const { formatMessage } = useIntl()\n\n  const errors = useMemo(() => validate(value), [value, validate])\n  const hasError = useMemo(() => Object.values<Error | undefined>(errors).some((error) => error !== undefined), [errors]) // TODO: Remove the type annotation\n\n  const helperText = useMemo(() => {\n    if (errors.content === undefined) {\n      return null\n    }\n\n    const result = /.* is not between -Infinity and (?<upperBound>\\d+) characters\\./.exec(errors.content.message)\n\n    if (result !== null && result.groups?.['upperBound'] !== undefined) {\n      return formatMessage(messages.enterInUpperBoundCharactersOrLess, result.groups)\n    }\n\n    return null // TODO\n  }, [formatMessage, errors.content])\n\n  return (\n    <div ref={ preview }>\n      <ListItem\n        classes={ {\n          container: className,\n        } }\n      >\n        <ListItemIcon>\n          <div ref={ drag }>\n            <DragHandleIcon />\n          </div>\n        </ListItemIcon>\n        <ListItemIcon>\n          <Checkbox\n            color=\"primary\" // NOTE: 選択コントロールには secondary を使うべきとされている (https://material.io/design/color/the-color-system.html) が、これは強調のためであって、リマインダーのチェックボックスは項目を強調するためのものではない。\n            checked={ value.done }\n            onChange={ handleDoneChange }\n          />\n        </ListItemIcon>\n        <TextField\n          variant=\"standard\"\n          fullWidth\n          value={ value.content }\n          onChange={ handleContentChange }\n          disabled={ value.done }\n          error={ hasError }\n          helperText={ helperText }\n        />\n        <ListItemSecondaryAction>\n          <IconButton onClick={ onDelete } edge=\"end\">\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n    </div>\n  )\n}\n\nexport default TaskListItem\n","import React, { useRef } from 'react'\nimport { useDrop } from 'react-dnd'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport { DragObject, Props as TaskListItemProps } from '~/components/Reminder/TaskListItem'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemProps, React.ComponentType<TaskListItemProps>>\n  index: number\n\n  moveTask(sourceIndex: number, targetIndex: number): void\n}\n\nconst TaskListItemDropTarget: React.FC<Props> = ({ children, index, moveTask }) => {\n  const div = useRef<HTMLDivElement>(null)\n\n  const [, drop] = useDrop<DragObject, unknown, unknown>({\n    accept: 'TaskListItem',\n    hover(item, monitor) {\n      shouldBePresent(div.current)\n\n      if (item.index === index) {\n        return\n      }\n\n      const clientOffset = monitor.getClientOffset()\n\n      shouldBePresent(clientOffset)\n\n      const boundingClientRect = div.current.getBoundingClientRect()\n      const pointerY = clientOffset.y - boundingClientRect.top\n      const middleY = (boundingClientRect.bottom - boundingClientRect.top) / 2\n\n      // downwards\n      if (item.index < index && pointerY < middleY) {\n        return\n      }\n\n      // upwards\n      if (item.index > index && pointerY > middleY) {\n        return\n      }\n\n      moveTask(item.index, index)\n\n      // tslint:disable-next-line:no-object-mutation\n      item.index = index\n    },\n  })\n\n  drop(div)\n\n  return (\n    <div ref={ div }>\n      { children }\n    </div>\n  )\n}\n\nexport default TaskListItemDropTarget\n","import { List } from 'immutable'\nimport React, { useCallback, useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport curry from '~/curry'\nimport Task, { TaskParams } from '~/domain/entity/Task'\nimport TaskId from '~/domain/vo/TaskId'\nimport { State } from '~/redux'\nimport { addTaskAsync, changeTaskContentAsync, deleteTaskAsync, getTasksAsync, markTaskAsDoneAsync, markTaskAsUndoneAsync, moveTask } from '~/redux/modules/reminder'\nimport { asBoolean, asObject, leftOnly } from '~/validators/commonValidators'\nimport { asBoundedLengthString } from '~/validators/stringValidators'\nimport AddTaskButton from './AddTaskButton'\nimport TaskList from './TaskList'\nimport TaskListItem from './TaskListItem'\nimport TaskListItemDropTarget from './TaskListItemDropTarget'\n\ninterface StateProps {\n  tasks: List<Task>\n}\n\ninterface DispatchProps {\n  getTasks(): void\n  addTask(): void\n  changeTaskContent(taskId: TaskId, content: string): void\n  markTaskAsDone(taskId: TaskId): void\n  markTaskAsUndone(taskId: TaskId): void\n  deleteTask(taskId: TaskId): void\n  moveTask(source: number, dest: number): void\n}\n\ntype Props =\n  & StateProps\n  & DispatchProps\n\n/**\n * @throws `Error` if {input} is nullish.\n */\nconst validate = asObject((input) => ({\n  content: leftOnly(asBoundedLengthString({ upperBound: 140 }))(input.content),\n  done: leftOnly(asBoolean)(input.done),\n}))\n\nconst Reminder: React.FC<Props> = ({ tasks, getTasks, addTask, changeTaskContent, markTaskAsDone, markTaskAsUndone, deleteTask, moveTask }) => {\n  useEffect(() => {\n    getTasks()\n  }, [getTasks])\n\n  const changeTask = useCallback((taskId: TaskId, { content, done }: Partial<Alt.Omit<TaskParams, 'id'>>) => {\n    if (content !== undefined) {\n      changeTaskContent(taskId, content)\n    }\n\n    if (done !== undefined) {\n      if (done) {\n        markTaskAsDone(taskId)\n      } else {\n        markTaskAsUndone(taskId)\n      }\n    }\n  }, [changeTaskContent, markTaskAsDone, markTaskAsUndone])\n\n  return (\n    <>\n      <TaskList>\n        {\n          tasks.map((task, index) => (\n            <TaskListItemDropTarget\n              key={ index }\n              index={ index }\n              moveTask={ moveTask }\n            >\n              <TaskListItem\n                key={ task.id.value }\n                value={ task }\n                index={ index }\n                onChange={ curry(changeTask)(task.id) }\n                onDelete={ curry(deleteTask)(task.id) }\n                validate={ validate }\n              />\n            </TaskListItemDropTarget>\n          )).toArray()\n        }\n      </TaskList>\n      <AddTaskButton addTask={ addTask } />\n    </>\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ reminder: { tasks } }: State): StateProps => ({\n  tasks,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  getTasks: getTasksAsync,\n  addTask: addTaskAsync,\n  changeTaskContent: changeTaskContentAsync,\n  markTaskAsDone: markTaskAsDoneAsync,\n  markTaskAsUndone: markTaskAsUndoneAsync,\n  deleteTask: deleteTaskAsync,\n  moveTask,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  reminder: 'Reminder',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport { createPage } from '~/components/PageTemplate'\nimport Reminder from '~/components/Reminder'\nimport messages from './messages'\n\nconst ReminderPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.reminder) } />\n      <Reminder />\n    </>\n  )\n}\n\nexport default createPage(ReminderPage)\n","import assert from 'assert'\n\nimport { isUrl, seemsLikeGtmContainerId } from '~/guards/stringGuards'\nimport typed from '~/typed'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new Error(typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`)\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new Error(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n\nexport function asGtmContainerIdLike(input: unknown): `GTM-${string}` {\n  const inputAsString = asString(input)\n\n  if (!seemsLikeGtmContainerId(inputAsString)) {\n    throw new Error('It does not seem like a GTM container ID.')\n  }\n\n  return inputAsString\n}\n","export function isUrl(input: string): input is string.Url {\n  try {\n    // tslint:disable-next-line:no-unused-expression\n    new URL(input)\n\n    return true\n  } catch (error: unknown) {\n    return false\n  }\n}\n\nexport function seemsLikeGtmContainerId(input: string): input is `GTM-${string}` {\n  return /^GTM-.*$/.test(input)\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-Reminder-TaskListItem-classes__TaskListItemContainer--qlbWZ.src-components-Reminder-TaskListItem-classes__Dragging--YsS0x {\\n  opacity: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Reminder/TaskListItem/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,UAAU;AACZ\",\"sourcesContent\":[\".TaskListItemContainer.Dragging {\\n  opacity: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"TaskListItemContainer\": \"src-components-Reminder-TaskListItem-classes__TaskListItemContainer--qlbWZ\",\n\t\"Dragging\": \"src-components-Reminder-TaskListItem-classes__Dragging--YsS0x\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["_interopRequireDefault","_interopRequireWildcard","exports","React","_default","default","createElement","d","f","x","xs","defineMessages","add","addTask","Button","onClick","variant","color","messages","children","List","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","undefined","enterInUpperBoundCharactersOrLess","value","index","onChange","onDelete","validate","dragging","drag","preview","useDrag","type","item","isDragging","monitor","getItem","isIdenticalTo","collect","className","useMemo","classnames","classes","handleContentChange","useCallback","event","content","target","handleDoneChange","_checked","done","checked","formatMessage","useIntl","errors","hasError","Object","values","some","error","helperText","result","exec","message","groups","ref","ListItem","container","ListItemIcon","DragHandle","Checkbox","TextField","fullWidth","disabled","ListItemSecondaryAction","IconButton","edge","Delete","moveTask","div","useRef","drop","useDrop","accept","hover","shouldBePresent","current","clientOffset","getClientOffset","boundingClientRect","getBoundingClientRect","pointerY","y","top","middleY","bottom","asObject","input","leftOnly","asBoundedLengthString","upperBound","asBoolean","mapDispatchToProps","getTasks","getTasksAsync","addTaskAsync","changeTaskContent","changeTaskContentAsync","markTaskAsDone","markTaskAsDoneAsync","markTaskAsUndone","markTaskAsUndoneAsync","deleteTask","deleteTaskAsync","connect","reminder","tasks","useEffect","changeTask","taskId","map","task","key","id","curry","toArray","createPage","Helmet","title","lowerBound","Infinity","inputAsString","asString","length","Error","typed","asUrl","URL","isUrl","asGtmContainerIdLike","test","seemsLikeGtmContainerId","___CSS_LOADER_EXPORT___","push","module","locals"],"sourceRoot":""}