{"version":3,"sources":["webpack://react-app-prototype/./src/infrastructure/EnvVarConfigRegistry.ts","webpack://react-app-prototype/./src/lib/validators/gitHubApiResourceValidators.ts","webpack://react-app-prototype/./src/infrastructure/GetRepoImpl.ts","webpack://react-app-prototype/./src/infrastructure/persistence/double/TaskRepositoryFakeImpl.ts","webpack://react-app-prototype/./src/container.ts","webpack://react-app-prototype/./src/lib/asserters/commonAsserters.ts","webpack://react-app-prototype/./src/lib/guards/commonGuards.ts","webpack://react-app-prototype/./src/lib/validators/stringValidators.ts"],"names":["EnvVarConfigRegistry","injectable","configMap","DEBUG","optional","isOneOf","process","BASE_NAME","asRequired","GITHUB_API_URL","USER_SERVICE_URL","name","this","asRepository","asObject","input","full_name","asString","html_url","asUrl","asUnsuccessfulResponse","message","documentation_url","GetRepoImpl","config","inject","owner","repo","gitHubApiUrl","get","fetch","method","parameterizedEndpoint","typed","params","headers","Accept","status","response","body","successful","TaskRepositoryFakeImpl","tasks","i","localStorage","length","key","shouldBePresent","seriarized","getItem","task","Task","push","List","taskId","value","Error","setItem","id","serialize","removeItem","container","Container","bind","to","Service","toSelf","ChessService","CounterService","IoService","LocaleSelectorService","ReminderService","UserAuthnService","it","shouldBeNullable","options","some","option","isT","undefined","asBoundedLengthString","lowerBound","Infinity","upperBound","inputAsString","ValidationError","isUrl"],"mappings":"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","file":"assets/scripts/670.1a6b11b4.js","sourcesContent":["import { injectable } from 'inversify'\n\nimport ConfigRegistry, { ConfigKey, ConfigKeyValueMap } from '~/config/ConfigRegistry'\nimport { isOneOf, optional } from '~/lib/guards/commonGuards'\nimport { asRequired } from '~/lib/validators/commonValidators'\n\n@injectable()\nexport default class EnvVarConfigRegistry implements ConfigRegistry {\n  private configMap: ConfigKeyValueMap = {\n    DEBUG: optional(isOneOf('1', 'TRUE', 'True', 'true'))(process.env.DEBUG) ?? false,\n    BASE_NAME: asRequired(process.env.BASE_NAME),\n    GITHUB_API_URL: asRequired(process.env.GITHUB_API_URL),\n    USER_SERVICE_URL: asRequired(process.env.USER_SERVICE_URL),\n  }\n\n  /**\n   * @throws [[Error]] if not found.\n   */\n  public get<T extends ConfigKey>(name: T) {\n    return this.configMap[name]\n  }\n}\n","import { asObject, asString, optional } from './commonValidators'\nimport { asUrl } from './stringValidators'\n\nexport function asGetRepoResponse(input: unknown): GitHubApi.GetRepoResponse {\n  return asRepository(input)\n}\n\nconst asRepository = asObject<GitHubApi.Repository>('a Repository', (input) => ({\n  full_name: asString(input.full_name),\n  html_url: asUrl(input.html_url),\n}))\n\nexport const asUnsuccessfulResponse = asObject<GitHubApi.UnsuccessfulResponse>('an UnsuccessfulResponse', (input) => ({\n  message: asString(input.message),\n  documentation_url: optional(asString)(input.documentation_url),\n}))\n","import { inject, injectable } from 'inversify'\n\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport fetch from '~/lib/fetch'\nimport typed from '~/lib/typed'\nimport { asGetRepoResponse, asUnsuccessfulResponse } from '~/lib/validators/gitHubApiResourceValidators'\nimport GetRepo, { GetRepoInput, GetRepoOutput } from '~/useCase/GetRepo'\n\n@injectable()\nexport default class GetRepoImpl implements GetRepo {\n  constructor(\n    @inject('EnvVarConfig') private config: ConfigRegistry\n  ) {}\n\n  public async apply({ owner, repo }: GetRepoInput): Promise<GetRepoOutput> {\n    const gitHubApiUrl = this.config.get('GITHUB_API_URL')\n\n    const { response: { status }, body } = await fetch({\n      method: 'GET',\n      parameterizedEndpoint: typed<[string]>`${ gitHubApiUrl }/repos/:owner/:repo`,\n      params: { owner, repo },\n      headers: {\n        Accept: 'application/vnd.github.v3+json',\n      },\n    })\n\n    if (status === 200) {\n      return {\n        successful: true,\n        response: {\n          status,\n          body: asGetRepoResponse(body),\n        },\n      }\n    } else {\n      return {\n        successful: false,\n        response: {\n          status,\n          body: asUnsuccessfulResponse(body),\n        },\n      }\n    }\n  }\n}\n","import { List } from 'immutable'\nimport { injectable } from 'inversify'\n\nimport Task from '~/domain/entity/Task'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport TaskId from '~/domain/vo/TaskId'\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\n\n// TODO: Create namespace in localStorage\n@injectable()\nexport default class TaskRepositoryFakeImpl implements TaskRepository {\n  public async list() {\n    const tasks = []\n\n    // tslint:disable-next-line:no-loop-statement no-let\n    for (let i = 0; i < localStorage.length; ++i) {\n      const key = localStorage.key(i)\n\n      shouldBePresent(key)\n\n      const seriarized = localStorage.getItem(key)\n\n      shouldBePresent(seriarized)\n\n      // tslint:disable-next-line:no-let\n      let task: Task\n\n      try {\n        task = Task.deserialize(seriarized)\n      } catch (error: unknown) {\n        continue\n      }\n\n      // tslint:disable-next-line:no-array-mutation\n      tasks.push(task)\n    }\n\n    return List(tasks)\n  }\n\n  public async findById(taskId: TaskId) {\n    const seriarized = localStorage.getItem(taskId.value)\n\n    if (seriarized === null) {\n      throw new Error // TODO:\n    }\n\n    return Task.deserialize(seriarized)\n  }\n\n  public async store(task: Task) {\n    return localStorage.setItem(task.id.value, task.serialize())\n  }\n\n  public async remove(task: Task) {\n    return localStorage.removeItem(task.id.value)\n  }\n}\n","import { Container } from 'inversify'\n\nimport ConfigRegistry from './config/ConfigRegistry'\nimport TaskRepository from './domain/repository/TaskRepository'\nimport EnvVarConfigRegistry from './infrastructure/EnvVarConfigRegistry'\nimport GetRepoImpl from './infrastructure/GetRepoImpl'\nimport TaskRepositoryFakeImpl from './infrastructure/persistence/double/TaskRepositoryFakeImpl' // TODO:\nimport Service from './redux'\nimport { ChessService } from './redux/modules/chess'\nimport { CounterService } from './redux/modules/counter'\nimport { IoService } from './redux/modules/io'\nimport LocaleSelectorService from './redux/modules/localeSelector'\nimport ReminderService from './redux/modules/reminder'\nimport UserAuthnService from './redux/modules/userAuthn'\nimport GetRepo from './useCase/GetRepo'\n\nconst container = new Container\n\ncontainer.bind<ConfigRegistry>('EnvVarConfig').to(EnvVarConfigRegistry)\ncontainer.bind<GetRepo>('GetRepo').to(GetRepoImpl)\ncontainer.bind<TaskRepository>('TaskRepository').to(TaskRepositoryFakeImpl)\ncontainer.bind(Service).toSelf()\ncontainer.bind(ChessService).toSelf()\ncontainer.bind(CounterService).toSelf()\ncontainer.bind(IoService).toSelf()\ncontainer.bind(LocaleSelectorService).toSelf()\ncontainer.bind(ReminderService).toSelf()\ncontainer.bind(UserAuthnService).toSelf()\n\nexport default container\n","export function shouldBePresent<T>(it: T | null | undefined): asserts it is T {\n  if (it == null) {\n    throw new Error //\n  }\n}\n\nexport function shouldBeNullable<T>(it: T | null | undefined): asserts it is null | undefined {\n  if (it != null) {\n    throw new Error //\n  }\n}\n","import identity from '~/lib/identity'\n\nexport const isOneOf = <T extends readonly Json[]>(...options: T) => (input: unknown): input is T[number] => options.some((option) => option === input)\n\nexport const optional = <A extends unknown, T extends A>(isT: (input: A) => input is T) => (input: A | undefined): input is T | undefined => {\n  if (input === undefined) {\n    return true\n  }\n\n  return isT(input)\n}\n\nexport const isObject = <A extends B, T extends A, B = A>(isT: (input: B) => Record<keyof A, boolean>) => (input: A): input is T => {\n  return Object.values<boolean>(isT(input)).every(identity)\n}\n","import assert from 'assert'\n\nimport { isUrl } from '~/lib/guards/stringGuards'\nimport typed from '~/lib/typed'\nimport ValidationError from './ValidationError'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new ValidationError(\n    typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`,\n    'asBoundedLengthStringErrorMessage',\n    {\n      input: inputAsString.length,\n      lowerBound,\n      upperBound,\n    }\n  )\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new ValidationError(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n"],"sourceRoot":""}