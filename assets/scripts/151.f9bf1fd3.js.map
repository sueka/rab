{"version":3,"sources":["webpack://rap/./src/infrastructure/EnvVarConfigRegistry.ts","webpack://rap/./src/validators/gitHubApiResourceValidators.ts","webpack://rap/./src/infrastructure/GetRepoImpl.ts","webpack://rap/./src/infrastructure/persistence/double/TaskRepositoryFakeImpl.ts","webpack://rap/./src/container.ts","webpack://rap/./src/guards/commonGuards.ts","webpack://rap/./src/validators/stringValidators.ts","webpack://rap/./src/guards/stringGuards.ts"],"names":["EnvVarConfigRegistry","injectable","configMap","DEBUG","guardOptional","isOneOf","process","BASE_NAME","asRequired","GITHUB_API_URL","USER_SERVICE_URL","GTM_URL","GTM_CONTAINER_ID","validatorOptional","unionOf","asGtmContainerIdLike","ignore","asConstant","get","name","this","asRepository","asObject","input","full_name","asString","html_url","asUrl","asUnsuccessfulResponse","message","documentation_url","optional","GetRepoImpl","constructor","config","owner","repo","gitHubApiUrl","response","fetch","generatePath","typed","headers","Accept","status","successful","body","json","inject","TaskRepositoryFakeImpl","tasks","i","localStorage","length","key","shouldBePresent","seriarized","getItem","task","Task","error","push","List","taskId","value","Error","setItem","id","serialize","removeItem","container","Container","bind","to","Service","toSelf","ChessService","CounterService","IoService","LocaleSelectorService","ReminderService","UserAuthnService","options","some","option","isT","undefined","asBoundedLengthString","lowerBound","Infinity","upperBound","inputAsString","URL","isUrl","test","seemsLikeGtmContainerId"],"mappings":"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","file":"assets/scripts/151.f9bf1fd3.js","sourcesContent":["import { injectable } from 'inversify'\n\nimport ConfigRegistry, { ConfigKey, ConfigKeyValueMap } from '~/config/ConfigRegistry'\nimport { isOneOf, optional as guardOptional } from '~/guards/commonGuards'\nimport { asConstant, asRequired, ignore, optional as validatorOptional, unionOf } from '~/validators/commonValidators'\nimport { asGtmContainerIdLike } from '~/validators/stringValidators'\n\n@injectable()\nexport default class EnvVarConfigRegistry implements ConfigRegistry {\n  private configMap: ConfigKeyValueMap = {\n    DEBUG: guardOptional(isOneOf('1', 'TRUE', 'True', 'true'))(process.env.DEBUG) ?? false,\n    BASE_NAME: asRequired(process.env.BASE_NAME),\n    GITHUB_API_URL: asRequired(process.env.GITHUB_API_URL),\n    USER_SERVICE_URL: asRequired(process.env.USER_SERVICE_URL),\n    GTM_URL: process.env.GTM_URL,\n    GTM_CONTAINER_ID: validatorOptional(unionOf(asGtmContainerIdLike, ignore(asConstant(''))))(process.env.GTM_CONTAINER_ID),\n  }\n\n  /**\n   * @throws `Error` if not found.\n   */\n  public get<T extends ConfigKey>(name: T) {\n    return this.configMap[name]\n  }\n}\n","import { asObject, asString, optional } from './commonValidators'\nimport { asUrl } from './stringValidators'\n\nexport function asGetRepoResponse(input: unknown): GitHubApi.GetRepoResponse {\n  return asRepository(input)\n}\n\nconst asRepository = asObject<GitHubApi.Repository>((input) => ({\n  full_name: asString(input.full_name),\n  html_url: asUrl(input.html_url),\n}))\n\nexport const asUnsuccessfulResponse = asObject<GitHubApi.UnsuccessfulResponse>((input) => ({\n  message: asString(input.message),\n  documentation_url: optional(asString)(input.documentation_url),\n}))\n","import { inject, injectable } from 'inversify'\nimport { generatePath } from 'react-router'\n\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport fetch from '~/fetch'\nimport typed from '~/typed'\nimport GetRepo, { GetRepoInput, GetRepoOutput } from '~/useCase/GetRepo'\nimport { asGetRepoResponse, asUnsuccessfulResponse } from '~/validators/gitHubApiResourceValidators'\n\n@injectable()\nexport default class GetRepoImpl implements GetRepo {\n  constructor(\n    @inject('EnvVarConfig') private config: ConfigRegistry\n  ) {}\n\n  public async apply({ owner, repo }: GetRepoInput): Promise<GetRepoOutput> {\n    const gitHubApiUrl = this.config.get('GITHUB_API_URL')\n\n    const response = await fetch(generatePath(typed<[string]>`${ gitHubApiUrl }/repos/:owner/:repo`, { owner, repo }), {\n      headers: {\n        Accept: 'application/vnd.github.v3+json',\n      },\n    })\n\n    if (response.status === 200) {\n      return {\n        successful: true,\n        response: {\n          status: response.status,\n          body: asGetRepoResponse(await response.json()),\n        },\n      }\n    } else {\n      return {\n        successful: false,\n        response: {\n          status: response.status,\n          body: asUnsuccessfulResponse(await response.json()),\n        },\n      }\n    }\n  }\n}\n","import { List } from 'immutable'\nimport { injectable } from 'inversify'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport Task from '~/domain/entity/Task'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport TaskId from '~/domain/vo/TaskId'\n\n// TODO: Create namespace in localStorage\n@injectable()\nexport default class TaskRepositoryFakeImpl implements TaskRepository {\n  public async list() {\n    const tasks = []\n\n    // tslint:disable-next-line:no-loop-statement no-let\n    for (let i = 0; i < localStorage.length; ++i) {\n      const key = localStorage.key(i)\n\n      shouldBePresent(key)\n\n      const seriarized = localStorage.getItem(key)\n\n      shouldBePresent(seriarized)\n\n      // tslint:disable-next-line:no-let\n      let task: Task\n\n      try {\n        task = Task.deserialize(seriarized)\n      } catch (error: unknown) {\n        continue\n      }\n\n      // tslint:disable-next-line:no-array-mutation\n      tasks.push(task)\n    }\n\n    return List(tasks)\n  }\n\n  public async findById(taskId: TaskId) {\n    const seriarized = localStorage.getItem(taskId.value)\n\n    if (seriarized === null) {\n      throw new Error // TODO:\n    }\n\n    return Task.deserialize(seriarized)\n  }\n\n  public async store(task: Task) {\n    return localStorage.setItem(task.id.value, task.serialize())\n  }\n\n  public async remove(task: Task) {\n    return localStorage.removeItem(task.id.value)\n  }\n}\n","import { Container } from 'inversify'\n\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport EnvVarConfigRegistry from '~/infrastructure/EnvVarConfigRegistry'\nimport GetRepoImpl from '~/infrastructure/GetRepoImpl'\nimport TaskRepositoryFakeImpl from '~/infrastructure/persistence/double/TaskRepositoryFakeImpl' // TODO:\nimport Service from '~/redux'\nimport { ChessService } from '~/redux/modules/chess'\nimport { CounterService } from '~/redux/modules/counter'\nimport { IoService } from '~/redux/modules/io'\nimport LocaleSelectorService from '~/redux/modules/localeSelector'\nimport ReminderService from '~/redux/modules/reminder'\nimport UserAuthnService from '~/redux/modules/userAuthn'\nimport GetRepo from '~/useCase/GetRepo'\n\nconst container = new Container\n\ncontainer.bind<ConfigRegistry>('EnvVarConfig').to(EnvVarConfigRegistry)\ncontainer.bind<GetRepo>('GetRepo').to(GetRepoImpl)\ncontainer.bind<TaskRepository>('TaskRepository').to(TaskRepositoryFakeImpl)\ncontainer.bind(Service).toSelf()\ncontainer.bind(ChessService).toSelf()\ncontainer.bind(CounterService).toSelf()\ncontainer.bind(IoService).toSelf()\ncontainer.bind(LocaleSelectorService).toSelf()\ncontainer.bind(ReminderService).toSelf()\ncontainer.bind(UserAuthnService).toSelf()\n\nexport default container\n","import identity from '~/identity'\n\nexport const isOneOf = <T extends readonly Json[]>(...options: T) => (input: unknown): input is T[number] => options.some((option) => option === input)\n\nexport const optional = <A extends unknown, T extends A>(isT: (input: A) => input is T) => (input: A | undefined): input is T | undefined => {\n  if (input === undefined) {\n    return true\n  }\n\n  return isT(input)\n}\n\nexport const isObject = <A extends B, T extends A, B = A>(isT: (input: B) => Record<keyof A, boolean>) => (input: A): input is T => {\n  return Object.values<boolean>(isT(input)).every(identity)\n}\n","import assert from 'assert'\n\nimport { isUrl, seemsLikeGtmContainerId } from '~/guards/stringGuards'\nimport typed from '~/typed'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new Error(typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`)\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new Error(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n\nexport function asGtmContainerIdLike(input: unknown): `GTM-${string}` {\n  const inputAsString = asString(input)\n\n  if (!seemsLikeGtmContainerId(inputAsString)) {\n    throw new Error('It does not seem like a GTM container ID.')\n  }\n\n  return inputAsString\n}\n","export function isUrl(input: string): input is string.Url {\n  try {\n    // tslint:disable-next-line:no-unused-expression\n    new URL(input)\n\n    return true\n  } catch (error: unknown) {\n    return false\n  }\n}\n\nexport function seemsLikeGtmContainerId(input: string): input is `GTM-${string}` {\n  return /^GTM-.*$/.test(input)\n}\n"],"sourceRoot":""}