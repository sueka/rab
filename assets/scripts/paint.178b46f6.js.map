{"version":3,"sources":["webpack://rap/./src/domain/vo/Color.ts","webpack://rap/./src/utils/canvas/floodFill.ts","webpack://rap/./src/components/Paint/Canvas/classes.css?1804","webpack://rap/./src/components/Paint/Canvas/index.tsx","webpack://rap/./src/components/Paint/Toolbox/index.tsx","webpack://rap/./src/components/Paint/messages.ts","webpack://rap/./src/components/Paint/index.tsx","webpack://rap/./src/components/App/PaintPage/messages.ts","webpack://rap/./src/components/App/PaintPage/index.tsx","webpack://rap/./src/components/Paint/Canvas/classes.css"],"names":["Color","HashableEq","constructor","red","green","blue","alpha","super","this","hashCode","result","getColor","x","y","context","data","getImageData","options","useStyles","makeStyles","Canvas","width","height","forwardRef","lineWidth","tool","forwardedRef","drawing","setDrawing","useState","previousPoint","setPreviousPoint","ownRef","useRef","ref","useRefsMerged","jssClasses","canvasClassName","useMemo","classnames","classes","dpr","useScreen","useEffect","current","resetTransform","scale","handlePointerDown","useCallback","event","shouldBeNullish","nativeEvent","offsetX","offsetY","handlePointerMove","shouldBePresent","pressure","lineJoin","beginPath","moveTo","lineTo","stroke","handlePointerUp","handlePointerLeave","handleClick","async","targetPoint","queue","targetColor","push","length","currentPoint","shift","currentColor","equals","fillRect","delay","floodFill","className","onPointerDown","onPointerMove","onPointerUp","onPointerLeave","onClick","value","onChange","ToggleButtonGroup","orientation","exclusive","ToggleButton","Create","disabled","FormatColorFill","defineMessages","clear","brushSize","isCanvasLineCap","isOneOf","isTool","setContext","lineCap","setLineCap","setLineWidth","setTool","canvas","node","getContext","clearRect","handleToolChange","_event","handlePenCapRadioChange","target","handleLineWidthSliderChange","Array","isArray","Error","Button","messages","FormControl","FormLabel","RadioGroup","name","FormControlLabel","label","control","Radio","Box","m","List","ListItem","ListItemText","Typography","gutterBottom","Slider","min","paint","createPage","formatMessage","useIntl","Helmet","title","___CSS_LOADER_EXPORT___","module","id","locals"],"mappings":"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","file":"assets/scripts/paint.178b46f6.js","sourcesContent":["import HashableEq from '~/trait/HashableEq'\n\n// TODO: Remove\ninterface RgbaColor {\n  red: number\n  green: number\n  blue: number\n  alpha: number\n}\n\nexport default interface Color extends RgbaColor {} // tslint:disable-line:no-empty-interface\n\nexport default class Color extends HashableEq implements Class.ValueObject<RgbaColor> {\n  constructor({ red, green, blue, alpha }: RgbaColor) {\n    super()\n\n    this.red = red\n    this.green = green\n    this.blue = blue\n    this.alpha = alpha\n  }\n\n  public hashCode() {\n    // tslint:disable-next-line:no-let\n    let result = 0\n\n    result = 31 * result + this.red.hashCode()\n    result = 31 * result + this.green.hashCode()\n    result = 31 * result + this.blue.hashCode()\n    result = 31 * result + this.alpha.hashCode()\n\n    return result\n  }\n}\n","import { shouldBePresent } from '~/asserters/commonAsserters'\nimport delay from '~/delay'\nimport Color from '~/domain/vo/Color'\n\nexport /* for testing */ function getColor({ x, y }: Canvas.Point, context: CanvasRenderingContext2D): Color {\n  const { data: [red, green, blue, alpha] } = context.getImageData(x, y, 1, 1)\n\n  return new Color({\n    red,\n    green,\n    blue,\n    alpha,\n  })\n}\n\nexport default async function floodFill(targetPoint: Canvas.Point, width: number, height: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(context)\n\n  const queue: Canvas.Point[] = [] // TODO\n  const targetColor = getColor(targetPoint, context)\n\n  // tslint:disable-next-line:no-array-mutation\n  queue.push(targetPoint)\n\n  // tslint:disable-next-line:no-loop-statement\n  while (queue.length !== 0) {\n    const currentPoint = queue.shift() // tslint:disable-line:no-array-mutation\n\n    shouldBePresent(currentPoint)\n\n    const currentColor = getColor(currentPoint, context)\n\n    if (!targetColor.equals(currentColor)) {\n      continue\n    }\n\n    context.fillRect(currentPoint.x, currentPoint.y, 1, 1)\n\n    if (currentPoint.x > 0) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x - 1, y: currentPoint.y })\n    }\n\n    if (currentPoint.y > 0) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x, y: currentPoint.y - 1 })\n    }\n\n    if (currentPoint.x < width - 1) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x + 1, y: currentPoint.y })\n    }\n\n    if (currentPoint.y < height - 1) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x, y: currentPoint.y + 1 })\n    }\n\n    await delay(30)\n  }\n}\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { Theme, makeStyles } from '@material-ui/core/styles'\nimport classnames from 'classnames'\nimport React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { shouldBeNullish, shouldBePresent } from '~/asserters/commonAsserters'\nimport useRefsMerged from '~/hooks/useRefsMerged'\nimport useScreen from '~/hooks/useScreen'\nimport floodFill from '~/utils/canvas/floodFill'\nimport classes from './classes.css'\n\ninterface Props {\n  width: number\n  height: number\n  lineWidth: number\n  context: CanvasRenderingContext2D | null | undefined\n  tool: Canvas.Tool\n}\n\ninterface StyleProps {\n  width: number\n  height: number\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, 'Canvas'>({\n  Canvas: ({ width, height }) => ({\n    width,\n    height,\n  }),\n})\n\nconst Canvas = forwardRef<HTMLCanvasElement, Props>(({ width, height, lineWidth, context, tool }, forwardedRef) => {\n  const [drawing, setDrawing] = useState(false)\n  const [previousPoint, setPreviousPoint] = useState<Canvas.Point | null>(null)\n\n  const ownRef = useRef<HTMLCanvasElement>(null)\n  const ref = useRefsMerged(forwardedRef, ownRef)\n\n  const jssClasses = useStyles({ width,  height })\n  const canvasClassName = useMemo(() => classnames(jssClasses.Canvas, classes.Canvas), [jssClasses.Canvas])\n\n  const { dpr } = useScreen()\n\n  useEffect(() => {\n    if (context == null || ownRef.current === null || dpr === null) {\n      return\n    }\n\n    /* tslint:disable:no-object-mutation */\n    ownRef.current.width = dpr * width\n    ownRef.current.height = dpr * height\n    /* tslint:enable:no-object-mutation */\n\n    context.resetTransform()\n    context.scale(dpr, dpr)\n  }, [width, height, context, ownRef, dpr])\n\n  const handlePointerDown = useCallback<React.PointerEventHandler<HTMLCanvasElement>>((event) => {\n    if (tool !== 'pen') {\n      return\n    }\n\n    shouldBeNullish(previousPoint)\n\n    setDrawing(true)\n\n    setPreviousPoint({\n      x: event.nativeEvent.offsetX,\n      y: event.nativeEvent.offsetY,\n    })\n  }, [tool, previousPoint])\n\n  const handlePointerMove = useCallback<React.PointerEventHandler<HTMLCanvasElement>>((event) => {\n    if (!drawing) {\n      return\n    }\n\n    shouldBePresent(context)\n    shouldBePresent(previousPoint)\n\n    /* tslint:disable:no-object-mutation */\n    context.lineWidth = lineWidth * (event.pressure !== 0 ? event.pressure : 1)\n    context.lineJoin = 'round'\n    /* tslint:enable:no-object-mutation */\n\n    context.beginPath()\n    context.moveTo(previousPoint.x, previousPoint.y)\n    context.lineTo(event.nativeEvent.offsetX, event.nativeEvent.offsetY)\n    context.stroke()\n\n    setPreviousPoint({\n      x: event.nativeEvent.offsetX,\n      y: event.nativeEvent.offsetY,\n    })\n  }, [lineWidth, context, drawing, previousPoint])\n\n  const handlePointerUp = useCallback(() => {\n    setDrawing(false)\n    setPreviousPoint(null)\n  }, [])\n\n  const handlePointerLeave = useCallback(() => {\n    setDrawing(false)\n    setPreviousPoint(null)\n  }, [])\n\n  const handleClick = useCallback<React.MouseEventHandler<HTMLCanvasElement>>(async (event) => {\n    if (tool !== 'bucket') {\n      return\n    }\n\n    shouldBePresent(context)\n\n    await floodFill({ x: event.nativeEvent.offsetX, y: event.nativeEvent.offsetY }, width, height, context)\n  }, [width, height, context, tool])\n\n  return (\n    <canvas\n      ref={ ref }\n      className={ canvasClassName }\n      width={ width }\n      height={ height }\n      onPointerDown={ handlePointerDown }\n      onPointerMove={ handlePointerMove }\n      onPointerUp={ handlePointerUp }\n      onPointerLeave={ handlePointerLeave }\n      onClick={ handleClick }\n    />\n  )\n})\n\nexport default Canvas\n","import CreateIcon from '@material-ui/icons/Create'\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill'\nimport ToggleButton from '@material-ui/lab/ToggleButton'\nimport ToggleButtonGroup, { ToggleButtonGroupProps } from '@material-ui/lab/ToggleButtonGroup'\nimport React from 'react'\n\n// TODO: Remove\ntype Tool =\n  | 'pen'\n  | 'bucket'\n\nexport interface Props {\n  value: Tool\n  onChange: NonNullable<ToggleButtonGroupProps['onChange']>\n}\n\nconst Toolbox: React.FC<Props> = ({ value, onChange }) => (\n  <ToggleButtonGroup orientation=\"vertical\" exclusive value={ value } onChange={ onChange }>\n    <ToggleButton value=\"pen\">\n      <CreateIcon />\n    </ToggleButton>\n    <ToggleButton value=\"bucket\" disabled>\n      <FormatColorFillIcon />\n    </ToggleButton>\n  </ToggleButtonGroup>\n)\n\nexport default Toolbox\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  clear: 'Clear',\n  brushSize: 'Brush size',\n})\n","import Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Slider from '@material-ui/core/Slider'\nimport Typography from '@material-ui/core/Typography'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport { isOneOf } from '~/guards/commonGuards'\nimport useScreen from '~/hooks/useScreen'\nimport Canvas from './Canvas'\nimport Toolbox, { Props as ToolboxProps } from './Toolbox'\nimport messages from './messages'\n\n// TODO: Remove\ntype Tool =\n  | 'pen'\n  | 'bucket'\n\nconst isCanvasLineCap = isOneOf('butt', 'round', 'square')\nconst isTool = isOneOf('pen', 'bucket')\n\nconst WIDTH = 320\nconst HEIGHT = 320\n\nconst Paint: React.FC = () => {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>()\n  const [lineCap, setLineCap] = useState<CanvasLineCap>('round')\n  const [lineWidth, setLineWidth] = useState<number>(10)\n  const [tool, setTool] = useState<Tool>('pen')\n  const { dpr } = useScreen()\n\n  const canvas = useCallback<React.RefCallback<HTMLCanvasElement>>((node) => {\n    setContext(node?.getContext('2d'))\n  }, [])\n\n  const handleClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(() => {\n    context?.clearRect(0, 0, WIDTH, HEIGHT)\n  }, [context])\n\n  const handleToolChange = useCallback<ToolboxProps['onChange']>((_event, value) => {\n    if (!isTool(value)) {\n      return\n    }\n\n    setTool(value)\n  }, [])\n\n  const handlePenCapRadioChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    if (isCanvasLineCap(event.target.value)) {\n      setLineCap(event.target.value)\n    }\n  }, [])\n\n  const handleLineWidthSliderChange = useCallback<Required<React.PropsOf<typeof Slider>>['onChange']>((_event, value) => {\n    if (Array.isArray(value)) {\n      throw new Error\n    }\n\n    setLineWidth(value)\n  }, [])\n\n  useEffect(() => {\n    if (context == null) {\n      return\n    }\n\n    // tslint:disable-next-line:no-object-mutation\n    context.lineCap = lineCap\n  }, [context, lineCap])\n\n  return (\n    <>\n      <Canvas width={ WIDTH } height={ HEIGHT } lineWidth={ lineWidth } ref={ canvas } context={ context } tool={ tool } />\n      <Button onClick={ handleClick }>\n        <FormattedMessage { ...messages.clear } />\n      </Button>\n      <Toolbox value={ tool } onChange={ handleToolChange } />\n      <FormControl disabled={ tool !== 'pen' }>\n        <FormLabel>line cap</FormLabel>\n        <RadioGroup name=\"lineCap\" value={ lineCap } onChange={ handlePenCapRadioChange }>\n          <FormControlLabel value=\"butt\" label=\"butt\" control={ <Radio /> } />\n          <FormControlLabel value=\"round\" label=\"round\" control={ <Radio /> } />\n          <FormControlLabel value=\"square\" label=\"square\" control={ <Radio /> } />\n        </RadioGroup>\n      </FormControl>\n      <Box m={ 1 }>\n        <List>\n          <ListItem>\n            <ListItemText>\n              <Typography gutterBottom><FormattedMessage { ...messages.brushSize } /></Typography>\n              <Slider min={ 1 / (dpr ?? 1) } value={ lineWidth } onChange={ handleLineWidthSliderChange } />\n            </ListItemText>\n          </ListItem>\n        </List>\n      </Box>\n    </>\n  )\n}\n\nexport default Paint\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  paint: 'Paint',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport { createPage } from '~/components/PageTemplate'\nimport Paint from '~/components/Paint'\nimport messages from './messages'\n\nconst PaintPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.paint) } />\n      <Paint />\n    </>\n  )\n}\n\nexport default createPage(PaintPage)\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-Paint-Canvas-classes__Canvas--10YIO {\\n  background-color: white; /* TODO */\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Paint/Canvas/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,uBAAuB,EAAE,SAAS;AACpC\",\"sourcesContent\":[\".Canvas {\\n  background-color: white; /* TODO */\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Canvas\": \"src-components-Paint-Canvas-classes__Canvas--10YIO\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}