{"version":3,"sources":["webpack:///./src/lib/validators/stringValidators.ts","webpack:///./src/infrastructure/EnvVarConfigRegistry.ts","webpack:///./src/lib/validators/gitHubApiResourceValidators.ts","webpack:///./src/infrastructure/GetRepoImpl.ts","webpack:///./src/infrastructure/persistence/double/TaskRepositoryFakeImpl.ts","webpack:///./src/container.ts"],"names":["asBoundedLengthString","lowerBound","Infinity","upperBound","input","inputAsString","asString","length","ValidationError","typed","asUrl","isUrl","EnvVarConfigRegistry","injectable","env","BASE_URL","process","GITHUB_API_URL","name","value","undefined","Error","asGetRepoResponse","asRepository","asObject","fullName","full_name","htmlUrl","html_url","asUnsuccessfulResponse","message","documentation_url","optional","GetRepoImpl","config","inject","owner","repo","gitHubApiUrl","get","fetch","method","parameterizedEndpoint","params","headers","Accept","status","response","body","successful","TaskRepositoryFakeImpl","taskId","task","localStorage","getItem","Task","deserialize","setItem","id","serialize","removeItem","container","Container","bind","to","Service","ChessService","CounterService","IoService","LocaleSelectorService","ReminderService"],"mappings":"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","file":"assets/scripts/12.6a347a23.js","sourcesContent":["import assert from 'assert'\n\nimport { isUrl } from '~/lib/guards/stringGuards'\nimport typed from '~/lib/typed'\nimport ValidationError from './ValidationError'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new ValidationError(\n    typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`,\n    'asBoundedLengthStringErrorMessage',\n    {\n      input: inputAsString.length,\n      lowerBound,\n      upperBound,\n    }\n  )\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new ValidationError(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n","import { injectable } from 'inversify'\n\nimport ConfigRegistry, { ConfigKey } from '~/config/ConfigRegistry'\nimport typed from '~/lib/typed'\n\n@injectable()\nexport default class EnvVarConfigRegistry implements ConfigRegistry {\n  private env: Record<ConfigKey, string | undefined> = {\n    BASE_URL: process.env.BASE_URL,\n    GITHUB_API_URL: process.env.GITHUB_API_URL,\n  }\n\n  /**\n   * @throws {Error} if not found.\n   */\n  public get(name: ConfigKey) {\n    const value = this.env[name]\n\n    if (value === undefined) {\n      throw new Error(typed<[string]>`The ${ name } environment variable does not exist.`) // TODO:\n    }\n\n    return value\n  }\n}\n","import { asObject, asString, optional } from './commonValidators'\nimport { asUrl } from './stringValidators'\n\nexport function asGetRepoResponse(input: unknown): GitHubApiResource.GetRepoResponse {\n  return asRepository(input)\n}\n\nconst asRepository = asObject<GitHubApiResource.Repository>('a Repository', (input) => ({\n  fullName: asString(input.full_name),\n  htmlUrl: asUrl(input.html_url),\n}))\n\nexport const asUnsuccessfulResponse = asObject<GitHubApiResource.UnsuccessfulResponse>('an UnsuccessfulResponse', (input) => ({\n  message: asString(input.message),\n  documentation_url: optional(asString)(input.documentation_url),\n}))\n","import { inject, injectable } from 'inversify'\n\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport fetch from '~/lib/fetch'\nimport typed from '~/lib/typed'\nimport { asGetRepoResponse, asUnsuccessfulResponse } from '~/lib/validators/gitHubApiResourceValidators'\nimport GetRepo, { GetRepoInput, GetRepoOutput } from '~/useCase/GetRepo'\n\n@injectable()\nexport default class GetRepoImpl implements GetRepo {\n  constructor(\n    @inject('EnvVarConfig') private config: ConfigRegistry\n  ) {}\n\n  public async apply({ owner, repo }: GetRepoInput): Promise<GetRepoOutput> {\n    const gitHubApiUrl = this.config.get('GITHUB_API_URL')\n\n    const { response: { status }, body } = await fetch({\n      method: 'GET',\n      parameterizedEndpoint: typed<[string]>`${ gitHubApiUrl }/repos/:owner/:repo`,\n      params: { owner, repo },\n      headers: {\n        Accept: 'application/vnd.github.v3+json',\n      },\n    })\n\n    if (status === 200) {\n      return {\n        successful: true,\n        response: {\n          status,\n          body: asGetRepoResponse(body),\n        },\n      }\n    } else {\n      return {\n        successful: false,\n        response: {\n          status,\n          body: asUnsuccessfulResponse(body),\n        },\n      }\n    }\n  }\n}\n","import { injectable } from 'inversify'\n\nimport Task from '~/domain/entity/Task'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport TaskId from '~/domain/vo/TaskId'\n\n@injectable()\nexport default class TaskRepositoryFakeImpl implements TaskRepository {\n  public async findById(taskId: TaskId) {\n    const task = localStorage.getItem(taskId.value)\n\n    if (task === null) {\n      throw new Error // TODO:\n    }\n\n    return Task.deserialize(task)\n  }\n\n  public async store(task: Task) {\n    return localStorage.setItem(task.id.value, task.serialize())\n  }\n\n  public async remove(taskId: TaskId) {\n    return localStorage.removeItem(taskId.value)\n  }\n}\n","import { Container } from 'inversify'\n\nimport ConfigRegistry from './config/ConfigRegistry'\nimport TaskRepository from './domain/repository/TaskRepository'\nimport EnvVarConfigRegistry from './infrastructure/EnvVarConfigRegistry'\nimport GetRepoImpl from './infrastructure/GetRepoImpl'\nimport TaskRepositoryFakeImpl from './infrastructure/persistence/double/TaskRepositoryFakeImpl' // TODO:\nimport Service from './redux'\nimport { ChessService } from './redux/modules/chess'\nimport { CounterService } from './redux/modules/counter'\nimport { IoService } from './redux/modules/io'\nimport LocaleSelectorService from './redux/modules/localeSelector'\nimport ReminderService from './redux/modules/reminder'\nimport GetRepo from './useCase/GetRepo'\n\nconst container = new Container\n\ncontainer.bind<ConfigRegistry>('EnvVarConfig').to(EnvVarConfigRegistry)\ncontainer.bind<GetRepo>('GetRepo').to(GetRepoImpl)\ncontainer.bind<TaskRepository>('TaskRepository').to(TaskRepositoryFakeImpl)\ncontainer.bind<Service>('Service').to(Service)\ncontainer.bind<ChessService>('ChessService').to(ChessService)\ncontainer.bind<CounterService>('CounterService').to(CounterService)\ncontainer.bind<IoService>('IoService').to(IoService)\ncontainer.bind<LocaleSelectorService>('LocaleSelectorService').to(LocaleSelectorService)\ncontainer.bind<ReminderService>('ReminderService').to(ReminderService)\n\nexport default container\n"],"sourceRoot":""}