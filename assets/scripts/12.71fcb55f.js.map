{"version":3,"sources":["webpack:///./src/infrastructure/EnvVarConfigRegistry.ts","webpack:///./src/lib/validators/gitHubApiResourceValidators.ts","webpack:///./src/infrastructure/GetRepoImpl.ts","webpack:///./src/infrastructure/persistence/double/TaskRepositoryFakeImpl.ts","webpack:///./src/container.ts"],"names":["EnvVarConfigRegistry","injectable","env","BASE_URL","process","GITHUB_API_URL","name","value","this","undefined","Error","typed","asRepository","asObject","input","asString","asUnsuccessfulResponse","message","documentation_url","optional","GetRepoImpl","config","inject","owner","repo","gitHubApiUrl","get","fetch","method","parameterizedEndpoint","params","headers","Accept","status","response","body","successful","TaskRepositoryFakeImpl","taskId","task","localStorage","getItem","Task","deserialize","setItem","id","serialize","removeItem","container","Container","bind","to","Service","ChessService","CounterService","IoService","LocaleSelectorService","ReminderService"],"mappings":"wRAMqBA,EADpBC,sB,4CAESC,IAA6C,CACnDC,SAAUC,8CACVC,eAAgBD,0B,wCAMPE,GACT,IAAMC,EAAQC,KAAKN,IAAII,GAEvB,QAAcG,IAAVF,EACF,MAAM,IAAIG,MAAMC,YAAV,IAAiCL,IAGzC,OAAOC,M,2DChBX,I,EAAMK,EAAeC,YAAuC,gBAAgB,SAACC,GAAD,MAAY,CACtFR,KAAMS,YAASD,EAAMR,UAGVU,EAAyBH,YAAiD,2BAA2B,SAACC,GAAD,MAAY,CAC5HG,QAASF,YAASD,EAAMG,SACxBC,kBAAmBC,YAASJ,IAATI,CAAmBL,EAAMI,uB,yFCHzBE,EADpBnB,sB,cAEC,cAEE,iBADgCoB,S,eAA/BC,iBAAO,eAAPA,C,gKAGkBC,E,EAAAA,MAAOC,E,EAAAA,KACpBC,EAAejB,KAAKa,OAAOK,IAAI,kB,SAEQC,YAAM,CACjDC,OAAQ,MACRC,sBAAuBlB,YAAF,IAAqBc,GAC1CK,OAAQ,CAAEP,QAAOC,QACjBO,QAAS,CACPC,OAAQ,oC,mBALQC,E,EAAZC,SAAYD,OAAUE,E,EAAAA,KASf,MAAXF,E,0CACK,CACLG,YAAY,EACZF,SAAU,CACRD,SACAE,MD7BwBrB,EC6BAqB,ED5BzBvB,EAAaE,O,iCCgCT,CACLsB,YAAY,EACZF,SAAU,CACRD,SACAE,KAAMnB,EAAuBmB,M,kCDrChC,IAA2BrB,I,8EEKbuB,EADpBpC,sB,iHAEuBqC,G,0EAGP,QAFPC,EAAOC,aAAaC,QAAQH,EAAO/B,Q,sBAGjC,IAAIG,M,gCAGLgC,IAAKC,YAAYJ,I,wIAGPA,G,0FACVC,aAAaI,QAAQL,EAAKM,GAAGtC,MAAOgC,EAAKO,c,yIAG9BR,G,0FACXE,aAAaO,WAAWT,EAAO/B,Q,0JCRpCyC,EAAY,IAAIC,YAEtBD,EAAUE,KAAqB,gBAAgBC,GAAGnD,GAClDgD,EAAUE,KAAc,WAAWC,GAAG/B,GACtC4B,EAAUE,KAAqB,kBAAkBC,GAAGd,GACpDW,EAAUE,KAAc,WAAWC,GAAGC,KACtCJ,EAAUE,KAAmB,gBAAgBC,GAAGE,KAChDL,EAAUE,KAAqB,kBAAkBC,GAAGG,KACpDN,EAAUE,KAAgB,aAAaC,GAAGI,KAC1CP,EAAUE,KAA4B,yBAAyBC,GAAGK,KAClER,EAAUE,KAAsB,mBAAmBC,GAAGM,KAEvCT","file":"assets/scripts/12.71fcb55f.js","sourcesContent":["import { injectable } from 'inversify'\n\nimport ConfigRegistry, { ConfigKey } from '~/config/ConfigRegistry'\nimport typed from '~/lib/typed'\n\n@injectable()\nexport default class EnvVarConfigRegistry implements ConfigRegistry {\n  private env: Record<ConfigKey, string | undefined> = {\n    BASE_URL: process.env.BASE_URL,\n    GITHUB_API_URL: process.env.GITHUB_API_URL,\n  }\n\n  /**\n   * @throws {Error} if not found.\n   */\n  public get(name: ConfigKey) {\n    const value = this.env[name]\n\n    if (value === undefined) {\n      throw new Error(typed<[string]>`The ${ name } environment variable does not exist.`) // TODO:\n    }\n\n    return value\n  }\n}\n","import { asObject, asString, optional } from './commonValidators'\n\nexport function asGetRepoResponse(input: unknown): GitHubApiResource.GetRepoResponse {\n  return asRepository(input)\n}\n\nconst asRepository = asObject<GitHubApiResource.Repository>('a Repository', (input) => ({\n  name: asString(input.name),\n}))\n\nexport const asUnsuccessfulResponse = asObject<GitHubApiResource.UnsuccessfulResponse>('an UnsuccessfulResponse', (input) => ({\n  message: asString(input.message),\n  documentation_url: optional(asString)(input.documentation_url),\n}))\n","import { inject, injectable } from 'inversify'\n\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport fetch from '~/lib/fetch'\nimport typed from '~/lib/typed'\nimport { asGetRepoResponse, asUnsuccessfulResponse } from '~/lib/validators/gitHubApiResourceValidators'\nimport GetRepo, { GetRepoInput, GetRepoOutput } from '~/useCase/GetRepo'\n\n@injectable()\nexport default class GetRepoImpl implements GetRepo {\n  constructor(\n    @inject('EnvVarConfig') private config: ConfigRegistry\n  ) {}\n\n  public async apply({ owner, repo }: GetRepoInput): Promise<GetRepoOutput> {\n    const gitHubApiUrl = this.config.get('GITHUB_API_URL')\n\n    const { response: { status }, body } = await fetch({\n      method: 'GET',\n      parameterizedEndpoint: typed<[string]>`${ gitHubApiUrl }/repos/:owner/:repo`,\n      params: { owner, repo },\n      headers: {\n        Accept: 'application/vnd.github.v3+json',\n      },\n    })\n\n    if (status === 200) {\n      return {\n        successful: true,\n        response: {\n          status,\n          body: asGetRepoResponse(body),\n        },\n      }\n    } else {\n      return {\n        successful: false,\n        response: {\n          status,\n          body: asUnsuccessfulResponse(body),\n        },\n      }\n    }\n  }\n}\n","import { injectable } from 'inversify'\n\nimport Task from '~/domain/entity/Task'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport TaskId from '~/domain/vo/TaskId'\n\n@injectable()\nexport default class TaskRepositoryFakeImpl implements TaskRepository {\n  public async findById(taskId: TaskId) {\n    const task = localStorage.getItem(taskId.value)\n\n    if (task === null) {\n      throw new Error // TODO:\n    }\n\n    return Task.deserialize(task)\n  }\n\n  public async store(task: Task) {\n    return localStorage.setItem(task.id.value, task.serialize())\n  }\n\n  public async remove(taskId: TaskId) {\n    return localStorage.removeItem(taskId.value)\n  }\n}\n","import { Container } from 'inversify'\n\nimport ConfigRegistry from './config/ConfigRegistry'\nimport TaskRepository from './domain/repository/TaskRepository'\nimport EnvVarConfigRegistry from './infrastructure/EnvVarConfigRegistry'\nimport GetRepoImpl from './infrastructure/GetRepoImpl'\nimport TaskRepositoryFakeImpl from './infrastructure/persistence/double/TaskRepositoryFakeImpl' // TODO:\nimport Service from './redux'\nimport { ChessService } from './redux/modules/chess'\nimport { CounterService } from './redux/modules/counter'\nimport { IoService } from './redux/modules/io'\nimport LocaleSelectorService from './redux/modules/localeSelector'\nimport ReminderService from './redux/modules/reminder'\nimport GetRepo from './useCase/GetRepo'\n\nconst container = new Container\n\ncontainer.bind<ConfigRegistry>('EnvVarConfig').to(EnvVarConfigRegistry)\ncontainer.bind<GetRepo>('GetRepo').to(GetRepoImpl)\ncontainer.bind<TaskRepository>('TaskRepository').to(TaskRepositoryFakeImpl)\ncontainer.bind<Service>('Service').to(Service)\ncontainer.bind<ChessService>('ChessService').to(ChessService)\ncontainer.bind<CounterService>('CounterService').to(CounterService)\ncontainer.bind<IoService>('IoService').to(IoService)\ncontainer.bind<LocaleSelectorService>('LocaleSelectorService').to(LocaleSelectorService)\ncontainer.bind<ReminderService>('ReminderService').to(ReminderService)\n\nexport default container\n"],"sourceRoot":""}