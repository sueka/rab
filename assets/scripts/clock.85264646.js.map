{"version":3,"sources":["webpack://rap/./src/components/AnalogClock/StoppedClock/index.tsx","webpack://rap/./src/extensions/Iterable/zipWithIndexIterable.ts","webpack://rap/./src/components/AnalogClock/index.tsx","webpack://rap/./src/components/App/ClockPage/messages.ts","webpack://rap/./src/components/App/ClockPage/index.tsx"],"names":["drawClockFace","radius","context","beginPath","arc","Math","PI","fillStyle","fill","gradient","createRadialGradient","addColorStop","lineWidth","strokeStyle","stroke","INDICES","font","typed","textAlign","textBaseline","INDEX","i","xs","zipIterables","index","genIndex","angle","rotate","fillText","drawClockHands","time","shouldBePresent","hour","minute","second","hourHandAngle","lineCap","moveTo","lineTo","drawHourHand","minuteHandAngle","drawMinuteHand","secondHandAngle","drawSecondHand","useStyles","makeStyles","Canvas","width","height","setContext","useState","dpr","useScreen","canvas","useRef","jssClasses","useEffect","current","getContext","resetTransform","scale","translate","ref","className","timeZone","Intl","DateTimeFormat","resolvedOptions","mapDispatchToProps","startClock","stopClock","connect","io","now","Temporal","toLocaleTimeString","calendar","numberingSystem","hourCycle","defineMessages","clock","createPage","formatMessage","useIntl","Helmet","title","messages"],"mappings":"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","file":"assets/scripts/clock.85264646.js","sourcesContent":["import { makeStyles } from '@material-ui/core'\nimport { Temporal } from  'proposal-temporal'\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport zipWithIndexIterable from '~/extensions/Iterable/zipWithIndexIterable'\nimport useScreen from '~/hooks/useScreen'\nimport typed from '~/typed'\n\ninterface Props {\n  time: Temporal.TimeLike\n  radius?: number\n}\n\n// TODO: remove\nfunction drawClockFace(radius: number, context: CanvasRenderingContext2D) {\n  // face\n  context.beginPath()\n  context.arc(0, 0, 0.95 * radius, 0, 2 * Math.PI)\n  context.fillStyle = 'white' // tslint:disable-line:no-object-mutation\n  context.fill()\n\n  // frame\n  const gradient = context.createRadialGradient(0, 0, 0.9 * radius, 0, 0, radius)\n\n  gradient.addColorStop(0, 'dimgray')\n  gradient.addColorStop(0.5, 'white')\n  gradient.addColorStop(1, 'dimgray')\n\n  // context.beginPath()\n  // context.arc(0, 0, 0.95 * radius, 0, 2 * Math.PI)\n  context.lineWidth = 0.1 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = gradient // tslint:disable-line:no-object-mutation\n  context.stroke()\n\n  // indices\n  const INDICES = ['XII', 'I', 'II', 'III', 'IIII', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI']\n\n  context.fillStyle = 'black' // tslint:disable-line:no-object-mutation\n  context.font = typed<[number]>`${ 0.105 * radius }pt serif` // tslint:disable-line:no-object-mutation\n  context.textAlign = 'center' // tslint:disable-line:no-object-mutation\n  context.textBaseline = 'middle' // tslint:disable-line:no-object-mutation\n\n  // tslint:disable-next-line:no-loop-statement\n  for (const [INDEX, i] of zipWithIndexIterable(INDICES)) {\n    // 12時の方向が0、時計回り。\n    const angle = i / 6 * Math.PI\n\n    context.rotate(angle)\n    context.fillText(INDEX, 0, -0.8 * radius)\n    context.rotate(-angle)\n  }\n}\n\n// TODO: remove\nfunction drawClockHands(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  drawHourHand(time, radius, context)\n  drawMinuteHand(time, radius, context)\n  drawSecondHand(time, radius, context)\n\n  // TODO: draw canvas cap nut\n}\n\n// TODO: remove\nfunction drawHourHand(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(time.hour)\n  shouldBePresent(time.minute)\n  shouldBePresent(time.second)\n\n  // 12時の方向が0、時計回り。\n  const hourHandAngle = ((time.hour % 12) + (time.minute / 60) + (time.second / 3600)) / 6 * Math.PI\n\n  context.lineCap = 'round' // tslint:disable-line:no-object-mutation\n  context.lineWidth = 0.06 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = 'black' // tslint:disable-line:no-object-mutation\n\n  context.beginPath()\n  context.moveTo(0, 0)\n  context.rotate(hourHandAngle)\n  context.lineTo(0, -0.6 * radius)\n  context.rotate(-hourHandAngle)\n  context.stroke()\n}\n\n// TODO: remove\nfunction drawMinuteHand(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(time.minute)\n  shouldBePresent(time.second)\n\n  // 12時の方向が0、時計回り。\n  const minuteHandAngle = (time.minute + (time.second / 60)) / 30 * Math.PI\n\n  context.lineCap = 'round' // tslint:disable-line:no-object-mutation\n  context.lineWidth = 0.04 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = 'black' // tslint:disable-line:no-object-mutation\n\n  context.beginPath()\n  context.moveTo(0, 0)\n  context.rotate(minuteHandAngle)\n  context.lineTo(0, -0.75 * radius)\n  context.rotate(-minuteHandAngle)\n  context.stroke()\n}\n\n// TODO: remove\nfunction drawSecondHand(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(time.second)\n\n  // 12時の方向が0、時計回り。\n  const secondHandAngle = time.second / 30 * Math.PI\n\n  context.lineCap = 'round' // tslint:disable-line:no-object-mutation\n  context.lineWidth = 0.01 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = 'red' // tslint:disable-line:no-object-mutation\n\n  context.beginPath()\n  context.moveTo(0, 0)\n  context.rotate(secondHandAngle)\n  context.moveTo(0,  0.3 * radius)\n  context.lineTo(0, -0.7 * radius)\n  context.rotate(-secondHandAngle)\n  context.stroke()\n}\n\ninterface StyleProps {\n  width: number\n  height: number\n}\n\nconst useStyles = makeStyles<never, StyleProps, 'Canvas'>({\n  Canvas: ({ width, height }) => ({\n    width,\n    height,\n  }),\n})\n\nconst StoppedClock: React.FC<Props> = ({\n  time,\n  radius = 200, // diameter = 2 radius - 2\n}) => {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>()\n  const { dpr } = useScreen()\n\n  const canvas = useRef<HTMLCanvasElement>(null)\n\n  const jssClasses = useStyles({\n    width: 2 * radius,\n    height: 2 * radius,\n  })\n\n  useEffect(() => {\n    setContext(canvas.current?.getContext('2d'))\n  }, [canvas])\n\n  useEffect(() => {\n    if (context == null || canvas.current === null || dpr === null) {\n      return\n    }\n\n    /* tslint:disable:no-object-mutation */\n    canvas.current.width = 2 * dpr * radius\n    canvas.current.height = 2 * dpr * radius\n    /* tslint:enable:no-object-mutation */\n\n    // X 軸は右向き、 Y 軸は下向き、反転無し、原点は中央。\n    context.resetTransform()\n    context.scale(dpr, dpr)\n    context.translate(radius, radius)\n  }, [context, canvas, dpr, radius])\n\n  useEffect(() => {\n    if (context == null) {\n      return\n    }\n\n    drawClockFace(radius, context)\n    drawClockHands(time, radius, context)\n    // TODO: draw cover\n  }, [context, time, radius])\n\n  return (\n    <canvas\n      ref={ canvas }\n      className={ jssClasses.Canvas }\n      width={ 2 * radius }\n      height={ 2 * radius }\n    />\n  )\n}\n\nexport default StoppedClock\n","import zipIterables from './zipIterables'\n\nfunction* genIndex() {\n  let index = 0 // tslint:disable-line:no-let\n\n  // tslint:disable-next-line:no-loop-statement\n  while (true) {\n    yield index++\n  }\n}\n\nexport default function zipWithIndexIterable<A>(xs: Iterable<A>) {\n  return zipIterables(xs, genIndex())\n}\n","import { Temporal } from 'proposal-temporal'\nimport React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport { State } from '~/redux'\nimport { startClock, stopClock } from '~/redux/modules/io'\nimport StoppedClock from './StoppedClock'\n\ninterface StateProps {\n  now: Date\n}\n\ninterface DispatchProps {\n  startClock(): void\n  stopClock(): void\n}\n\ntype Props =\n  & StateProps\n  & DispatchProps\n\nconst { timeZone } = new Intl.DateTimeFormat().resolvedOptions()\n\nconst AnalogClock: React.FC<Props> = ({ now, startClock, stopClock }) => {\n  useEffect(() => {\n    startClock()\n\n    return stopClock\n  }, [startClock, stopClock])\n\n  return (\n    <StoppedClock\n      time={\n        // NOTE: locale は時刻の書式が hh:mm:ss なロケールなら何でもよいが、 Firefox 85 では new Date(0).toLocaleString('ja', { hour: '2-digit', minute: '2-digit' }) が \"9:00\" となる。\n        Temporal.PlainTime.from(now.toLocaleTimeString('en', {\n          calendar: 'gregory',\n          numberingSystem: 'latn',\n          timeZone,\n          hourCycle: 'h23',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n        }))\n      }\n    />\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ io: { now } }: State): StateProps => ({\n  now,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  startClock,\n  stopClock,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnalogClock)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  clock: 'Clock',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport AnalogClock from '~/components/AnalogClock'\nimport { createPage } from '~/components/PageTemplate'\nimport messages from './messages'\n\nconst ClockPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.clock) } />\n      <AnalogClock />\n    </>\n  )\n}\n\nexport default createPage(ClockPage)\n"],"sourceRoot":""}