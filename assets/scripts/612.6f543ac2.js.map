{"version":3,"sources":["webpack://rap/./src/lib/validators/gitHubApiResourceValidators.ts","webpack://rap/./src/infrastructure/GetRepoImpl.ts","webpack://rap/./src/infrastructure/persistence/double/TaskRepositoryFakeImpl.ts","webpack://rap/./src/container.ts","webpack://rap/./src/lib/validators/stringValidators.ts"],"names":["asGetRepoResponse","input","asRepository","asObject","full_name","asString","html_url","asUrl","asUnsuccessfulResponse","message","documentation_url","optional","GetRepoImpl","injectable","owner","repo","shouldBePresent","process","fetch","generatePath","typed","headers","Accept","response","status","json","body","successful","TaskRepositoryFakeImpl","tasks","i","localStorage","length","key","seriarized","getItem","task","Task","push","List","taskId","value","Error","setItem","id","serialize","removeItem","container","Container","bind","to","Service","toSelf","ChessService","CounterService","IoService","LocaleSelectorService","ReminderService","UserAuthnService","asBoundedLengthString","lowerBound","Infinity","upperBound","inputAsString","isUrl"],"mappings":"iUAGO,SAASA,EAAkBC,GAChC,OAAOC,EAAaD,GAGtB,I,MAAMC,GAAeC,SAA+B,SAACF,GAAD,MAAY,CAC9DG,WAAWC,QAASJ,EAAMG,WAC1BE,UAAUC,OAAMN,EAAMK,cAGXE,GAAyBL,SAAyC,SAACF,GAAD,MAAY,CACzFQ,SAASJ,QAASJ,EAAMQ,SACxBC,mBAAmBC,QAASN,KAATM,CAAmBV,EAAMS,uBCJzBE,GADpBC,iB,+FAEC,gGAAqBC,EAArB,EAAqBA,MAAOC,EAA5B,EAA4BA,MAC1BC,OAAgBC,0BADlB,UAGyBC,SAAMC,SAAaC,OAAA,IAAD,mCAAoBH,0BAAkD,CAAEH,QAAOC,SAAS,CAC/HM,QAAS,CACPC,OAAQ,oCALd,UAS0B,OANlBC,EAHR,QASeC,OATf,6BAagBD,EAASC,OAbzB,KAccxB,EAdd,UAcsCuB,EAASE,OAd/C,qDAaQD,OAbR,KAcQE,KAdR,yBAWMC,YAAY,EACZJ,SAZN,2BAqBgBA,EAASC,OArBzB,KAsBchB,EAtBd,UAsB2Ce,EAASE,OAtBpD,qDAqBQD,OArBR,KAsBQE,KAtBR,yBAmBMC,YAAY,EACZJ,SApBN,mD,8ECDmBK,GADpBf,iB,oGAEC,4FACQgB,EAAQ,GAGLC,EAAI,EAJf,YAIkBA,EAAIC,aAAaC,QAJnC,iBAKUC,EAAMF,aAAaE,IAAIH,IAE7Bd,OAAgBiB,GAEVC,EAAaH,aAAaI,QAAQF,IAExCjB,OAAgBkB,GAGZE,OAdR,WAiBMA,EAAOC,gBAAiBH,GAjB9B,yFAuBIL,EAAMS,KAAKF,GAvBf,UAI6CN,EAJ7C,iDA0BSS,QAAKV,IA1Bd,0D,oFA6BA,WAAsBW,GAAtB,0EAGqB,QAFbN,EAAaH,aAAaI,QAAQK,EAAOC,QADjD,sBAIU,IAAIC,MAJd,gCAOSL,gBAAiBH,IAP1B,2C,kFAUA,WAAmBE,GAAnB,0FACSL,aAAaY,QAAQP,EAAKQ,GAAGH,MAAOL,EAAKS,cADlD,2C,mFAIA,WAAoBT,GAApB,0FACSL,aAAae,WAAWV,EAAKQ,GAAGH,QADzC,2C,qICxCIM,EAAY,IAAIC,YAEtBD,EAAUE,KAAc,WAAWC,GAAGtC,GACtCmC,EAAUE,KAAqB,kBAAkBC,GAAGtB,GACpDmB,EAAUE,KAAKE,MAASC,SACxBL,EAAUE,KAAKI,MAAcD,SAC7BL,EAAUE,KAAKK,MAAgBF,SAC/BL,EAAUE,KAAKM,MAAWH,SAC1BL,EAAUE,KAAKO,MAAuBJ,SACtCL,EAAUE,KAAKQ,MAAiBL,SAChCL,EAAUE,KAAKS,MAAkBN,SAEjC,S,uJCpBaO,EAAwB,SAAC,GAAD,QACnCC,kBADmC,OACrBC,IADqB,MAEnCC,kBAFmC,MAEtBD,IAFsB,SAM/B,SAAC5D,GAGL,IAAM8D,GAAgB1D,QAASJ,GAE/B,GAAI2D,GAAcG,EAAc/B,QAAU+B,EAAc/B,QAAU8B,EAChE,OAAOC,EAGT,MAAM,IAAIrB,OAAMtB,OAAV,2DAA6C2C,EAAkCH,EAAoBE,MAGpG,SAASvD,EAAMN,GACpB,IAAM8D,GAAgB1D,QAASJ,GAE/B,KAAK+D,OAAMD,GACT,MAAM,IAAIrB,OAAMtB,OAAV,kCAA6B2C,IAGrC,OAAOA","file":"assets/scripts/612.6f543ac2.js","sourcesContent":["import { asObject, asString, optional } from './commonValidators'\nimport { asUrl } from './stringValidators'\n\nexport function asGetRepoResponse(input: unknown): GitHubApi.GetRepoResponse {\n  return asRepository(input)\n}\n\nconst asRepository = asObject<GitHubApi.Repository>((input) => ({\n  full_name: asString(input.full_name),\n  html_url: asUrl(input.html_url),\n}))\n\nexport const asUnsuccessfulResponse = asObject<GitHubApi.UnsuccessfulResponse>((input) => ({\n  message: asString(input.message),\n  documentation_url: optional(asString)(input.documentation_url),\n}))\n","import { injectable } from 'inversify'\nimport { generatePath } from 'react-router'\n\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\nimport fetch from '~/lib/fetch'\nimport typed from '~/lib/typed'\nimport { asGetRepoResponse, asUnsuccessfulResponse } from '~/lib/validators/gitHubApiResourceValidators'\nimport GetRepo, { GetRepoInput, GetRepoOutput } from '~/useCase/GetRepo'\n\n@injectable()\nexport default class GetRepoImpl implements GetRepo {\n  public async apply({ owner, repo }: GetRepoInput): Promise<GetRepoOutput> {\n    shouldBePresent(process.env.GITHUB_API_URL)\n\n    const response = await fetch(generatePath(typed<[string]>`${ process.env.GITHUB_API_URL }/repos/:owner/:repo`, { owner, repo }), {\n      headers: {\n        Accept: 'application/vnd.github.v3+json',\n      },\n    })\n\n    if (response.status === 200) {\n      return {\n        successful: true,\n        response: {\n          status: response.status,\n          body: asGetRepoResponse(await response.json()),\n        },\n      }\n    } else {\n      return {\n        successful: false,\n        response: {\n          status: response.status,\n          body: asUnsuccessfulResponse(await response.json()),\n        },\n      }\n    }\n  }\n}\n","import { List } from 'immutable'\nimport { injectable } from 'inversify'\n\nimport Task from '~/domain/entity/Task'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport TaskId from '~/domain/vo/TaskId'\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\n\n// TODO: Create namespace in localStorage\n@injectable()\nexport default class TaskRepositoryFakeImpl implements TaskRepository {\n  public async list() {\n    const tasks = []\n\n    // tslint:disable-next-line:no-loop-statement no-let\n    for (let i = 0; i < localStorage.length; ++i) {\n      const key = localStorage.key(i)\n\n      shouldBePresent(key)\n\n      const seriarized = localStorage.getItem(key)\n\n      shouldBePresent(seriarized)\n\n      // tslint:disable-next-line:no-let\n      let task: Task\n\n      try {\n        task = Task.deserialize(seriarized)\n      } catch (error: unknown) {\n        continue\n      }\n\n      // tslint:disable-next-line:no-array-mutation\n      tasks.push(task)\n    }\n\n    return List(tasks)\n  }\n\n  public async findById(taskId: TaskId) {\n    const seriarized = localStorage.getItem(taskId.value)\n\n    if (seriarized === null) {\n      throw new Error // TODO:\n    }\n\n    return Task.deserialize(seriarized)\n  }\n\n  public async store(task: Task) {\n    return localStorage.setItem(task.id.value, task.serialize())\n  }\n\n  public async remove(task: Task) {\n    return localStorage.removeItem(task.id.value)\n  }\n}\n","import { Container } from 'inversify'\n\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport GetRepoImpl from '~/infrastructure/GetRepoImpl'\nimport TaskRepositoryFakeImpl from '~/infrastructure/persistence/double/TaskRepositoryFakeImpl' // TODO:\nimport Service from '~/redux'\nimport { ChessService } from '~/redux/modules/chess'\nimport { CounterService } from '~/redux/modules/counter'\nimport { IoService } from '~/redux/modules/io'\nimport LocaleSelectorService from '~/redux/modules/localeSelector'\nimport ReminderService from '~/redux/modules/reminder'\nimport UserAuthnService from '~/redux/modules/userAuthn'\nimport GetRepo from '~/useCase/GetRepo'\n\nconst container = new Container\n\ncontainer.bind<GetRepo>('GetRepo').to(GetRepoImpl)\ncontainer.bind<TaskRepository>('TaskRepository').to(TaskRepositoryFakeImpl)\ncontainer.bind(Service).toSelf()\ncontainer.bind(ChessService).toSelf()\ncontainer.bind(CounterService).toSelf()\ncontainer.bind(IoService).toSelf()\ncontainer.bind(LocaleSelectorService).toSelf()\ncontainer.bind(ReminderService).toSelf()\ncontainer.bind(UserAuthnService).toSelf()\n\nexport default container\n","import assert from 'assert'\n\nimport { isUrl } from '~/lib/guards/stringGuards'\nimport typed from '~/lib/typed'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new Error(typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`)\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new Error(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n"],"sourceRoot":""}