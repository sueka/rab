{"version":3,"sources":["webpack://rap/./src/components/DataTable/index.tsx","webpack://rap/./src/validators/protocolBuffersWellKnownTypesValidators.ts","webpack://rap/./src/validators/googleSheetsApiResourceValidators.ts","webpack://rap/./src/components/FossLicenseComparisonTable/index.tsx","webpack://rap/./src/hooks/useFetch.ts","webpack://rap/./src/components/App/TablePage/messages.ts","webpack://rap/./src/components/App/TablePage/index.tsx"],"names":["compareStrings","a","b","columns","rows","defaultSortOrder","sorts","setSorts","useState","primarySort","useMemo","createSortLabelClickHandler","useCallback","field","by","oldPrimarySort","oldRestSorts","in","fieldSortIndex","findIndex","sort","oldSorts","slice","sortedRows","reduceRight","result","sortBy","row","String","List","toArray","TableContainer","component","Paper","Table","TableHead","TableRow","map","column","TableCell","variant","key","TableSortLabel","active","direction","find","onClick","label","TableBody","i","hover","OrderedMap","Object","entries","_value","value","valueSeq","asValue","asJson","asListValue","listOf","asDimension","asUnionOf","asValueRange","optional","asObject","input","range","asString","majorDimension","values","isCellValue","config","useInjection","response","init","fetchPromise","setFetchPromise","setResponse","error","setError","state","setState","useEffect","fetch","shouldBePresent","then","catch","reason","Error","TypeError","useFetch","generatePath","typed","get","spreadsheetId","sheetName","apiKey","setColumns","setRows","sheets","json","undefined","every","Array","isArray","firstRowValues","restRowsValues","fields","cellValue","from","zipIterables","rowValues","fromEntries","defineMessages","table","createPage","formatMessage","useIntl","Helmet","title","messages","Suspense","fallback","CircularProgress"],"mappings":"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","file":"assets/scripts/table.c706bf05.js","sourcesContent":["import Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport { List, OrderedMap } from 'immutable'\nimport React, { useCallback, useMemo, useState } from 'react'\n\ninterface Props {\n  columns: Column[]\n  rows: Row[]\n  defaultSortOrder?: SortOrder\n}\n\nexport interface Column {\n  field: Field\n  label?: React.ReactNode\n}\n\nexport type Row = {\n  [key in Field]: React.ReactNode\n}\n\ntype Field = string | number\n\n// TODO: remove\nfunction compareStrings(a: string, b: string): number {\n  if (a < b) return -1\n  else if (a > b) return 1\n  else return 0\n}\n\nconst DataTable: React.FC<Props> = ({ columns, rows, defaultSortOrder = 'asc' }) => {\n  const [sorts, setSorts] = useState<Sort<Row>[]>([])\n\n  // NOTE: TypeScript のメンバーアクセス演算は部分関数ではない (cf. https://github.com/microsoft/TypeScript/issues/13778)\n  const primarySort = useMemo<Sort<Row> | undefined>(() => sorts[0], [sorts])\n\n  const createSortLabelClickHandler = useCallback((field: Field) => () => {\n    if (field === primarySort?.by) {\n      setSorts(([oldPrimarySort, ...oldRestSorts]) => [\n        {\n          by: oldPrimarySort.by,\n          in: oldPrimarySort.in === 'asc' ? 'desc' : 'asc',\n        },\n        ...oldRestSorts,\n      ])\n    } else {\n      const fieldSortIndex = sorts.findIndex((sort) => sort.by === field)\n\n      if (fieldSortIndex === -1) {\n        setSorts((oldSorts) => [\n          {\n            by: field,\n            in: defaultSortOrder,\n          },\n          ...oldSorts,\n        ])\n      } else {\n        setSorts((oldSorts) => {\n          // const oldFieldSortIndex = oldSorts.findIndex((oldSort) => oldSort.by === field)\n\n          return [\n            oldSorts[fieldSortIndex],\n            ...oldSorts.slice(0, fieldSortIndex),\n            ...oldSorts.slice(fieldSortIndex + 1),\n          ]\n        })\n      }\n    }\n  }, [defaultSortOrder, sorts, primarySort])\n\n  const sortedRows = useMemo(() => sorts.reduceRight((result, sort) => result.sortBy(\n    (row) => String(row[sort.by]),\n    (a, b) => {\n      switch (sort.in) {\n        case 'asc': return compareStrings(a, b)\n        case 'desc': return -compareStrings(a, b)\n      }\n    }\n  ), List(rows)).toArray(), [sorts, rows])\n\n  return (\n    <TableContainer component={ Paper }>\n      <Table>\n        <TableHead>\n          <TableRow>\n            { columns.map((column) => (\n              <TableCell variant=\"head\" key={ column.field }>\n                <TableSortLabel\n                  active={ primarySort?.by === column.field }\n                  direction={ sorts.find((sort) => sort.by === column.field)?.in ?? defaultSortOrder }\n                  onClick={ createSortLabelClickHandler(column.field) }\n                >\n                  { column.label ?? column.field }\n                </TableSortLabel>\n              </TableCell>\n            )) }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          { sortedRows.map((row, i) => (\n            <TableRow hover key={ i }>\n              { OrderedMap(Object.entries(row)).sortBy((_value, field) => columns.findIndex((column) => column.field === field), (a, b) => a - b).map((value, field) => (\n                <TableCell key={ field }>\n                  { value }\n                </TableCell>\n              )).valueSeq().toArray() }\n            </TableRow>\n          )) }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default DataTable\n","import { asJson, listOf } from './commonValidators'\n\nconst asValue = asJson\nexport const asListValue = listOf(asValue)\n","import { asObject, asString, asUnionOf, optional } from './commonValidators'\nimport { asListValue } from './protocolBuffersWellKnownTypesValidators'\n\nconst asDimension = asUnionOf('DIMENSION_UNSPECIFIED', 'COLUMNS', 'ROWS')\n\nexport const asValueRange = optional(asObject<GoogleSheetsApi.ValueRange>((input) => ({\n  range: asString(input.range),\n  majorDimension: asDimension(input.majorDimension),\n  values: asListValue(input.values),\n})))\n","import { List } from 'immutable'\nimport { useInjection } from 'inversify-react'\nimport React, { useEffect, useState } from 'react'\nimport { generatePath } from 'react-router'\n\nimport DataTable, { Column, Row } from '~/components/DataTable'\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport zipIterables from '~/extensions/Iterable/zipIterables'\nimport useFetch from '~/hooks/useFetch'\nimport typed from '~/typed'\nimport { asValueRange } from '~/validators/googleSheetsApiResourceValidators'\n\n// TODO: remove\ntype CellValue = string | number\n\n// TODO: remove\nfunction isCellValue(input: unknown): input is CellValue {\n  switch (typeof input) {\n    case 'string':\n    case 'number': return true\n    default: return false\n  }\n}\n\nconst FossLicenseComparisonTable: React.FC = () => {\n  const config = useInjection<ConfigRegistry>('EnvVarConfig')\n\n  const response = useFetch(generatePath(typed<[string]>`${ config.get('SHEETS_API_URL') }/spreadsheets/:spreadsheetId/values/:sheetName\\\\?key=:apiKey`, {\n    spreadsheetId: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID'),\n    sheetName: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME'),\n    apiKey: config.get('GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY'),\n  }))\n\n  const [columns, setColumns] = useState<Column[] | null>(null)\n  const [rows, setRows] = useState<Row[] | null>(null)\n\n  useEffect(() => {\n    // tslint:disable-next-line:semicolon\n    ;(async () => {\n      const sheets = asValueRange(await response?.json())\n\n      if (sheets === undefined) {\n        return\n      }\n\n      if (sheets?.majorDimension !== 'ROWS') {\n        throw new Error('Dimension unsupported.')\n      }\n\n      if (!sheets.values.every<JsonArray>(Array.isArray)) {\n        throw new Error('Less than 2 dimensions found.')\n      }\n\n      if (!sheets.values.every((row): row is CellValue[] => row.every(isCellValue))) {\n        throw new Error('Neither string nor number value found.')\n      }\n\n      const [firstRowValues, ...restRowsValues] = sheets.values\n\n      const fields = firstRowValues.map((cellValue, i) => typed<[CellValue, number]>`${ cellValue }_${ i }`)\n\n      setColumns(Array.from(zipIterables(fields, firstRowValues)).map(([field, cellValue]) => ({\n        field,\n        label: cellValue,\n      })))\n\n      setRows(restRowsValues.map((rowValues) => Object.fromEntries(zipIterables(fields, rowValues))))\n    })()\n  }, [response])\n\n  if (columns === null || rows === null) {\n    return null\n  }\n\n  return (\n    <DataTable\n      columns={ List(columns).sortBy((column) => column.field, (a, b) => {\n        if (a < b) return -1\n        else if (a > b) return 1\n        else return 0\n      }).toArray() }\n      rows={ rows }\n    />\n  )\n}\n\nexport default FossLicenseComparisonTable\n","import { useEffect, useState } from 'react'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport fetch, { NoAnyResponse } from '~/fetch'\n\n// TODO: remove?\ntype PromiseState =\n  | 'pending'\n  | 'fulfilled'\n  | 'rejected'\n\n/**\n * A hook to suspend a fetch result.\n *\n * @throws `Promise<void>` while pending.\n * @throws `Error` if rejected.\n */\nexport default function useFetch(input: RequestInfo, init?: RequestInit) {\n  const [fetchPromise, setFetchPromise] = useState<Promise<NoAnyResponse> | null>(null)\n  const [response, setResponse] = useState<NoAnyResponse | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const [state, setState] = useState<PromiseState | null>(null)\n\n  useEffect(() => {\n    setFetchPromise(fetch(input, init))\n    setState('pending')\n  }, [input, init])\n\n  switch (state) {\n    case 'pending':\n      shouldBePresent(fetchPromise)\n\n      throw fetchPromise.then((value) => {\n        setResponse(value)\n        setState('fulfilled')\n      }).catch((reason) => {\n        if (!(reason instanceof Error)) {\n          throw new TypeError('Non-error reason caught.')\n        }\n\n        setError(reason)\n        setState('rejected')\n      })\n    case null:\n    case 'fulfilled': return response\n    case 'rejected': throw error\n  }\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  table: 'Table',\n})\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport React, { Suspense } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport FossLicenseComparisonTable from '~/components/FossLicenseComparisonTable'\nimport { createPage } from '~/components/PageTemplate'\nimport messages from './messages'\n\nconst TablePage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.table) } />\n      <Suspense fallback={ <CircularProgress /> }>\n        <FossLicenseComparisonTable />\n      </Suspense>\n    </>\n  )\n}\n\nexport default createPage(TablePage)\n"],"sourceRoot":""}