{"version":3,"sources":["webpack://react-app-prototype/./src/domain/vo/Color.ts","webpack://react-app-prototype/./src/utils/canvas/floodFill.ts","webpack://react-app-prototype/./src/components/Paint/Canvas/classes.css?1804","webpack://react-app-prototype/./src/components/Paint/Canvas/index.tsx","webpack://react-app-prototype/./src/components/Paint/Toolbox/index.tsx","webpack://react-app-prototype/./src/components/Paint/messages.ts","webpack://react-app-prototype/./src/components/Paint/index.tsx","webpack://react-app-prototype/./src/components/App/PaintPage/messages.ts","webpack://react-app-prototype/./src/components/App/PaintPage/index.tsx","webpack://react-app-prototype/./src/components/Paint/Canvas/classes.css"],"names":["Color","red","green","blue","alpha","result","this","hashCode","HashableEq","getColor","context","x","y","getImageData","data","options","useStyles","makeStyles","Canvas","width","height","forwardRef","forwardedRef","lineWidth","tool","useState","drawing","setDrawing","previousPoint","setPreviousPoint","ownRef","useRef","ref","mergeRefs","jssClasses","canvasClassName","useMemo","classnames","classes","dpr","useScreen","useEffect","current","scale","handlePointerDown","useCallback","event","shouldBeNullable","nativeEvent","offsetX","offsetY","handlePointerMove","shouldBePresent","pressure","lineJoin","beginPath","moveTo","lineTo","stroke","handlePointerUp","handlePointerLeave","handleClick","targetPoint","queue","targetColor","push","length","currentPoint","shift","currentColor","equals","fillRect","floodFill","className","onPointerDown","onPointerMove","onPointerUp","onPointerLeave","onClick","value","onChange","ToggleButtonGroup","orientation","exclusive","ToggleButton","Create","FormatColorFill","defineMessages","clear","isCanvasLineCap","isOneOf","isTool","setContext","lineCap","setLineCap","setTool","canvas","node","getContext","clearRect","handleToolChange","_event","handlePenCapRadioChange","target","Button","messages","FormControl","disabled","FormLabel","RadioGroup","name","FormControlLabel","label","control","Radio","paint","createPage","formatMessage","useIntl","Helmet","title","___CSS_LOADER_EXPORT___","module","id","locals"],"mappings":"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","file":"assets/scripts/paint.acdd0a4c.js","sourcesContent":["import HashableEq from '~/lib/trait/HashableEq'\n\n// TODO: Remove\ninterface RgbaColor {\n  red: number\n  green: number\n  blue: number\n  alpha: number\n}\n\nexport default interface Color extends RgbaColor {} // tslint:disable-line:no-empty-interface\n\nexport default class Color extends HashableEq implements Class.ValueObject<RgbaColor> {\n  constructor({ red, green, blue, alpha }: RgbaColor) {\n    super()\n\n    this.red = red\n    this.green = green\n    this.blue = blue\n    this.alpha = alpha\n  }\n\n  public hashCode() {\n    // tslint:disable-next-line:no-let\n    let result = 0\n\n    result = 31 * result + this.red.hashCode()\n    result = 31 * result + this.green.hashCode()\n    result = 31 * result + this.blue.hashCode()\n    result = 31 * result + this.alpha.hashCode()\n\n    return result\n  }\n}\n","import Color from '~/domain/vo/Color'\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\n\nexport /* for testing */ function getColor({ x, y }: Canvas.Point, context: CanvasRenderingContext2D): Color {\n  const { data: [red, green, blue, alpha] } = context.getImageData(x, y, 1, 1)\n\n  return new Color({\n    red,\n    green,\n    blue,\n    alpha,\n  })\n}\n\nexport default function floodFill(targetPoint: Canvas.Point, width: number, height: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(context)\n\n  const queue: Canvas.Point[] = [] // TODO\n  const targetColor = getColor(targetPoint, context)\n\n  // tslint:disable-next-line:no-array-mutation\n  queue.push(targetPoint)\n\n  // tslint:disable-next-line:no-loop-statement\n  while (queue.length !== 0) {\n    const currentPoint = queue.shift() // tslint:disable-line:no-array-mutation\n\n    shouldBePresent(currentPoint)\n\n    const currentColor = getColor(currentPoint, context)\n\n    if (!targetColor.equals(currentColor)) {\n      continue\n    }\n\n    context.fillRect(currentPoint.x, currentPoint.y, 1, 1)\n\n    if (currentPoint.x > 0) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x - 1, y: currentPoint.y })\n    }\n\n    if (currentPoint.y > 0) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x, y: currentPoint.y - 1 })\n    }\n\n    if (currentPoint.x < width - 1) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x + 1, y: currentPoint.y })\n    }\n\n    if (currentPoint.y < height - 1) {\n      // tslint:disable-next-line:no-array-mutation\n      queue.push({ x: currentPoint.x, y: currentPoint.y + 1 })\n    }\n  }\n}\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { Theme, makeStyles } from '@material-ui/core/styles'\nimport classnames from 'classnames'\nimport React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { shouldBeNullable, shouldBePresent } from '~/lib/asserters/commonAsserters'\nimport useScreen from '~/lib/hooks/useScreen'\nimport mergeRefs from '~/lib/mergeRefs'\nimport floodFill from '~/utils/canvas/floodFill'\nimport classes from './classes.css'\n\ninterface Props {\n  width: number\n  height: number\n  lineWidth: number\n  context: CanvasRenderingContext2D | null | undefined\n  tool: Canvas.Tool\n}\n\ninterface StyleProps {\n  width: number\n  height: number\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, 'Canvas'>({\n  Canvas: ({ width, height }) => ({\n    width,\n    height,\n  }),\n})\n\nconst Canvas = forwardRef<HTMLCanvasElement, Props>(({ width, height, lineWidth, context, tool }, forwardedRef) => {\n  const [drawing, setDrawing] = useState(false)\n  const [previousPoint, setPreviousPoint] = useState<Canvas.Point | null>(null)\n\n  const ownRef = useRef<HTMLCanvasElement | null>(null)\n  const ref = mergeRefs(forwardedRef, ownRef)\n\n  const jssClasses = useStyles({ width,  height })\n  const canvasClassName = useMemo(() => classnames(jssClasses.Canvas, classes.Canvas), [jssClasses.Canvas])\n\n  const { dpr } = useScreen()\n\n  useEffect(() => {\n    if (context == null || ownRef.current === null || dpr === null) {\n      return\n    }\n\n    /* tslint:disable:no-object-mutation */\n    ownRef.current.width = dpr * width\n    ownRef.current.height = dpr * height\n    /* tslint:enable:no-object-mutation */\n\n    context.scale(dpr, dpr)\n  }, [width, height, context, ownRef, dpr])\n\n  const handlePointerDown = useCallback<React.PointerEventHandler<HTMLCanvasElement>>((event) => {\n    if (tool !== 'pen') {\n      return\n    }\n\n    shouldBeNullable(previousPoint)\n\n    setDrawing(true)\n\n    setPreviousPoint({\n      x: event.nativeEvent.offsetX,\n      y: event.nativeEvent.offsetY,\n    })\n  }, [tool, previousPoint])\n\n  const handlePointerMove = useCallback<React.PointerEventHandler<HTMLCanvasElement>>((event) => {\n    if (!drawing) {\n      return\n    }\n\n    shouldBePresent(context)\n    shouldBePresent(previousPoint)\n\n    /* tslint:disable:no-object-mutation */\n    context.lineWidth = lineWidth * event.pressure\n    context.lineJoin = 'round'\n    /* tslint:enable:no-object-mutation */\n\n    context.beginPath()\n    context.moveTo(previousPoint.x, previousPoint.y)\n    context.lineTo(event.nativeEvent.offsetX, event.nativeEvent.offsetY)\n    context.stroke()\n\n    setPreviousPoint({\n      x: event.nativeEvent.offsetX,\n      y: event.nativeEvent.offsetY,\n    })\n  }, [lineWidth, context, drawing, previousPoint])\n\n  const handlePointerUp = useCallback(() => {\n    setDrawing(false)\n    setPreviousPoint(null)\n  }, [])\n\n  const handlePointerLeave = useCallback(() => {\n    setDrawing(false)\n    setPreviousPoint(null)\n  }, [])\n\n  const handleClick = useCallback<React.MouseEventHandler<HTMLCanvasElement>>((event) => {\n    if (tool !== 'bucket') {\n      return\n    }\n\n    shouldBePresent(context)\n\n    floodFill({ x: event.nativeEvent.offsetX, y: event.nativeEvent.offsetY }, width, height, context)\n  }, [width, height, context, tool])\n\n  return (\n    <canvas\n      ref={ ref }\n      className={ canvasClassName }\n      width={ width }\n      height={ height }\n      onPointerDown={ handlePointerDown }\n      onPointerMove={ handlePointerMove }\n      onPointerUp={ handlePointerUp }\n      onPointerLeave={ handlePointerLeave }\n      onClick={ handleClick }\n    />\n  )\n})\n\nexport default Canvas\n","import CreateIcon from '@material-ui/icons/Create'\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill'\nimport ToggleButton from '@material-ui/lab/ToggleButton'\nimport ToggleButtonGroup, { ToggleButtonGroupProps } from '@material-ui/lab/ToggleButtonGroup'\nimport React from 'react'\n\n// TODO: Remove\ntype Tool =\n  | 'pen'\n  | 'bucket'\n\nexport interface Props {\n  value: Tool\n  onChange: NonNullable<ToggleButtonGroupProps['onChange']>\n}\n\nconst Toolbox: React.FC<Props> = ({ value, onChange }) => (\n  <ToggleButtonGroup orientation=\"vertical\" exclusive value={ value } onChange={ onChange }>\n    <ToggleButton value=\"pen\">\n      <CreateIcon />\n    </ToggleButton>\n    <ToggleButton value=\"bucket\">\n      <FormatColorFillIcon />\n    </ToggleButton>\n  </ToggleButtonGroup>\n)\n\nexport default Toolbox\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  clear: 'Clear',\n})\n","import Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport { isOneOf } from '~/lib/guards/commonGuards'\nimport Canvas from './Canvas'\nimport Toolbox, { Props as ToolboxProps } from './Toolbox'\nimport messages from './messages'\n\n// TODO: Remove\ntype Tool =\n  | 'pen'\n  | 'bucket'\n\nconst isCanvasLineCap = isOneOf('butt', 'round', 'square')\nconst isTool = isOneOf('pen', 'bucket')\n\nconst WIDTH = 320\nconst HEIGHT = 320\n\nconst Paint: React.FC = () => {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>()\n  const [lineCap, setLineCap] = useState<CanvasLineCap>('round')\n  const [tool, setTool] = useState<Tool>('pen')\n\n  const canvas = useCallback<React.RefCallback<HTMLCanvasElement>>((node) => {\n    setContext(node?.getContext('2d'))\n  }, [])\n\n  const handleClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(() => {\n    context?.clearRect(0, 0, WIDTH, HEIGHT)\n  }, [context])\n\n  const handleToolChange = useCallback<ToolboxProps['onChange']>((_event, value) => {\n    if (!isTool(value)) {\n      return\n    }\n\n    setTool(value)\n  }, [])\n\n  const handlePenCapRadioChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    if (isCanvasLineCap(event.target.value)) {\n      setLineCap(event.target.value)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (context == null) {\n      return\n    }\n\n    // tslint:disable-next-line:no-object-mutation\n    context.lineCap = lineCap\n  }, [context, lineCap])\n\n  return (\n    <>\n      <Canvas width={ WIDTH } height={ HEIGHT } lineWidth={ 10 } ref={ canvas } context={ context } tool={ tool } />\n      <Button onClick={ handleClick }>\n        <FormattedMessage { ...messages.clear } />\n      </Button>\n      <Toolbox value={ tool } onChange={ handleToolChange } />\n      <FormControl disabled={ tool !== 'pen' }>\n        <FormLabel>line cap</FormLabel>\n        <RadioGroup name=\"lineCap\" value={ lineCap } onChange={ handlePenCapRadioChange }>\n          <FormControlLabel value=\"butt\" label=\"butt\" control={ <Radio /> } />\n          <FormControlLabel value=\"round\" label=\"round\" control={ <Radio /> } />\n          <FormControlLabel value=\"square\" label=\"square\" control={ <Radio /> } />\n        </RadioGroup>\n      </FormControl>\n    </>\n  )\n}\n\nexport default Paint\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  paint: 'Paint',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport { createPage } from '~/components/PageTemplate'\nimport Paint from '~/components/Paint'\nimport messages from './messages'\n\nconst PaintPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.paint) } />\n      <Paint />\n    </>\n  )\n}\n\nexport default createPage(PaintPage)\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-Paint-Canvas-classes__Canvas--10YIO {\\n  background-color: white; /* TODO */\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Paint/Canvas/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,uBAAuB,EAAE,SAAS;AACpC\",\"sourcesContent\":[\".Canvas {\\n  background-color: white; /* TODO */\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Canvas\": \"src-components-Paint-Canvas-classes__Canvas--10YIO\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}