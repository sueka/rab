{"version":3,"file":"assets/scripts/3720.f51511bc.js","mappings":"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","sources":["webpack://rap/./src/infrastructure/EnvVarConfigRegistry.ts","webpack://rap/./src/infrastructure/octokit.ts","webpack://rap/./src/infrastructure/persistence/double/TaskRepositoryFakeImpl.ts","webpack://rap/./src/container.ts","webpack://rap/./src/guards/commonGuards.ts","webpack://rap/./src/validators/stringValidators.ts","webpack://rap/./src/guards/stringGuards.ts"],"sourcesContent":["import { injectable } from 'inversify'\n\nimport ConfigRegistry, { ConfigKey, ConfigKeyValueMap } from '~/config/ConfigRegistry'\nimport { isOneOf, optional as guardOptional } from '~/guards/commonGuards'\nimport { asConstant, asRequired, ignore, optional as validatorOptional, unionOf } from '~/validators/commonValidators'\nimport { asGtmContainerIdLike } from '~/validators/stringValidators'\n\n@injectable()\nexport default class EnvVarConfigRegistry implements ConfigRegistry {\n  private configMap: ConfigKeyValueMap = {\n    DEBUG: guardOptional(isOneOf('1', 'TRUE', 'True', 'true'))(process.env['DEBUG']) ?? false,\n    BASE_NAME: asRequired(process.env['BASE_NAME']),\n    GITHUB_API_URL: asRequired(process.env['GITHUB_API_URL']),\n    USER_SERVICE_URL: asRequired(process.env['USER_SERVICE_URL']),\n    GTM_URL: process.env['GTM_URL'],\n    GTM_CONTAINER_ID: validatorOptional(unionOf(asGtmContainerIdLike, ignore(asConstant(''))))(process.env['GTM_CONTAINER_ID']),\n    SHEETS_API_URL: asRequired(process.env['SHEETS_API_URL']),\n    GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY: asRequired(process.env['GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY']),\n    GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID: asRequired(process.env['GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID']),\n    GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME: asRequired(process.env['GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME']),\n  }\n\n  /**\n   * @throws `Error` if not found.\n   */\n  public get<T extends ConfigKey>(name: T) {\n    return this.configMap[name]\n  }\n}\n","import { Octokit } from '@octokit/core'\n\nconst octokit = new Octokit\n\nexport default octokit\n","import { List } from 'immutable'\nimport { injectable } from 'inversify'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport Task from '~/domain/entity/Task'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport TaskId from '~/domain/vo/TaskId'\n\n// TODO: Create namespace in localStorage\n@injectable()\nexport default class TaskRepositoryFakeImpl implements TaskRepository {\n  public async list() {\n    const tasks = []\n\n    for (let i = 0; i < localStorage.length; ++i) {\n      const key = localStorage.key(i)\n\n      shouldBePresent(key)\n\n      const seriarized = localStorage.getItem(key)\n\n      shouldBePresent(seriarized)\n\n      let task: Task\n\n      try {\n        task = Task.deserialize(seriarized)\n      } catch (error: unknown) {\n        continue\n      }\n\n      tasks.push(task)\n    }\n\n    return List(tasks)\n  }\n\n  public async findById(taskId: TaskId) {\n    const seriarized = localStorage.getItem(taskId.value)\n\n    if (seriarized === null) {\n      throw new Error // TODO:\n    }\n\n    return Task.deserialize(seriarized)\n  }\n\n  public async store(task: Task) {\n    return localStorage.setItem(task.id.value, task.serialize())\n  }\n\n  public async remove(task: Task) {\n    return localStorage.removeItem(task.id.value)\n  }\n}\n","import { Octokit } from '@octokit/core'\nimport { Container } from 'inversify'\n\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport TaskRepository from '~/domain/repository/TaskRepository'\nimport EnvVarConfigRegistry from '~/infrastructure/EnvVarConfigRegistry'\nimport octokit from '~/infrastructure/octokit'\nimport TaskRepositoryFakeImpl from '~/infrastructure/persistence/double/TaskRepositoryFakeImpl' // TODO:\nimport Service from '~/redux'\nimport { ChessService } from '~/redux/modules/chess'\nimport { CounterService } from '~/redux/modules/counter'\nimport { IoService } from '~/redux/modules/io'\nimport LocaleSelectorService from '~/redux/modules/localeSelector'\nimport ReminderService from '~/redux/modules/reminder'\nimport UserAuthnService from '~/redux/modules/userAuthn'\n\nconst container = new Container\n\ncontainer.bind<ConfigRegistry>('EnvVarConfig').to(EnvVarConfigRegistry)\ncontainer.bind<Octokit>('Octokit').toConstantValue(octokit)\ncontainer.bind<TaskRepository>('TaskRepository').to(TaskRepositoryFakeImpl)\ncontainer.bind(Service).toSelf()\ncontainer.bind(ChessService).toSelf()\ncontainer.bind(CounterService).toSelf()\ncontainer.bind(IoService).toSelf()\ncontainer.bind(LocaleSelectorService).toSelf()\ncontainer.bind(ReminderService).toSelf()\ncontainer.bind(UserAuthnService).toSelf()\n\nexport default container\n","import identity from '~/identity'\n\nexport const isOneOf = <T extends readonly Json[]>(...options: T) => (input: unknown): input is T[number] => options.some((option) => option === input)\n\nexport const optional = <A extends unknown, T extends A>(isT: (input: A) => input is T) => (input: A | undefined): input is T | undefined => {\n  if (input === undefined) {\n    return true\n  }\n\n  return isT(input)\n}\n\nexport const isObject = <A extends B, T extends A, B = A>(isT: (input: B) => Record<keyof A, boolean>) => (input: A): input is T => {\n  return Object.values<boolean>(isT(input)).every(identity)\n}\n","import assert from 'assert'\n\nimport { isUrl, seemsLikeGtmContainerId } from '~/guards/stringGuards'\nimport typed from '~/typed'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new Error(typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`)\n}\n\nexport function asUrl(input: unknown): string.Url {\n  const inputAsString = asString(input)\n\n  if (!isUrl(inputAsString)) {\n    throw new Error(typed<[string]>`${ inputAsString } is not a URL.`)\n  }\n\n  return inputAsString\n}\n\nexport function asGtmContainerIdLike(input: unknown): `GTM-${string}` {\n  const inputAsString = asString(input)\n\n  if (!seemsLikeGtmContainerId(inputAsString)) {\n    throw new Error('It does not seem like a GTM container ID.')\n  }\n\n  return inputAsString\n}\n","export function isUrl(input: string): input is string.Url {\n  try {\n    new URL(input)\n\n    return true\n  } catch (error: unknown) {\n    return false\n  }\n}\n\nexport function seemsLikeGtmContainerId(input: string): input is `GTM-${string}` {\n  return /^GTM-.*$/.test(input)\n}\n"],"names":["EnvVarConfigRegistry","injectable","configMap","DEBUG","guardOptional","isOneOf","process","BASE_NAME","asRequired","GITHUB_API_URL","USER_SERVICE_URL","GTM_URL","GTM_CONTAINER_ID","validatorOptional","unionOf","asGtmContainerIdLike","ignore","asConstant","SHEETS_API_URL","GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY","GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID","GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME","get","name","this","Octokit","TaskRepositoryFakeImpl","tasks","i","localStorage","length","key","shouldBePresent","seriarized","getItem","task","Task","error","push","List","taskId","value","Error","setItem","id","serialize","removeItem","container","Container","bind","to","toConstantValue","octokit","Service","toSelf","ChessService","CounterService","IoService","LocaleSelectorService","ReminderService","UserAuthnService","options","input","some","option","optional","isT","undefined","asBoundedLengthString","lowerBound","Infinity","upperBound","inputAsString","asString","typed","asUrl","URL","isUrl","test","seemsLikeGtmContainerId"],"sourceRoot":""}