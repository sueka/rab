{"version":3,"sources":["webpack://rap/./src/components/DataTable/index.tsx","webpack://rap/./src/hooks/useFetch.ts","webpack://rap/./src/validators/protocolBuffersWellKnownTypesValidators.ts","webpack://rap/./src/validators/googleSheetsApiResourceValidators.ts","webpack://rap/./src/components/FossLicenseComparisonTable/index.tsx","webpack://rap/./src/utils/parseSpreadsheetLocale.ts","webpack://rap/./src/components/App/TablePage/messages.ts","webpack://rap/./src/components/App/TablePage/index.tsx"],"names":["compareStrings","a","b","isMobile","Bowser","navigator","userAgent","is","useStyles","makeStyles","LocalizedTableCell","textAlign","direction","undefined","flip","columns","rows","defaultSortOrder","locale","sorts","setSorts","useState","primarySort","useMemo","createSortLabelClickHandler","useCallback","field","by","oldPrimarySort","oldRestSorts","in","fieldSortIndex","findIndex","sort","oldSorts","slice","sortedRows","reduceRight","result","sortBy","row","String","List","toArray","theme","useTheme","test","jssClasses","TableContainer","component","Paper","Table","size","lang","TableHead","TableRow","map","column","TableCell","variant","sortDirection","className","style","minWidth","width","spacing","key","TableSortLabel","active","find","onClick","label","TableBody","i","hover","OrderedMap","Object","entries","_value","value","valueSeq","useFetch","input","init","fetchPromise","setFetchPromise","response","setResponse","error","setError","state","setState","useEffect","fetch","shouldBePresent","then","catch","reason","Error","TypeError","asValue","asJson","asListValue","listOf","asDimension","asUnionOf","asValueRange","asObject","range","optional","asString","majorDimension","values","asSpreadsheet","properties","asSpreadsheetProperties","sheets","asSheet","data","asGridData","columnMetadata","asDimensionProperties","pixelSize","asNumber","isCellValue","config","useInjection","getSpreadsheetResponse","generatePath","typed","get","spreadsheetId","sheetName","includeGridData","fields","apiKey","getSpreadsheetValuesResponse","setColumns","setRows","setLocale","spreadsheet","json","spreadsheetLocale","valueRange","every","Array","isArray","stringify","localeString","groups","exec","language","region","extendedLanguageSubtags","script","variants","extensions","privateuse","irregular","regular","parseSpreadsheetLocale","firstRowValues","restRowsValues","cellValue","from","zipIterables","rowValues","fromEntries","defineMessages","table","createPage","formatMessage","useIntl","Helmet","title","messages","Suspense","fallback","CircularProgress"],"mappings":"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","file":"assets/scripts/table.e93c57a3.js","sourcesContent":["import { makeStyles, useTheme } from '@material-ui/core'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport Bowser from 'bowser'\nimport { List, OrderedMap } from 'immutable'\nimport React, { useCallback, useMemo, useState } from 'react'\n\ninterface Props {\n  columns: Column[]\n  rows: Row[]\n  defaultSortOrder?: SortOrder\n  locale?: string // BCP 47 Language Tag\n}\n\nexport interface Column {\n  field: Field\n  label?: React.ReactNode\n  width?: number // in pixels\n}\n\nexport type Row = {\n  [key in Field]: React.ReactNode\n}\n\ntype Field = string | number\n\ninterface StyleProps {\n  direction: Direction | undefined\n}\n\n// TODO: remove\nfunction compareStrings(a: string, b: string): number {\n  if (a < b) return -1\n  else if (a > b) return 1\n  else return 0\n}\n\n// TODO: Remove\n// TODO: Detect UA changes?\nconst browser = Bowser.getParser(navigator.userAgent)\n\nconst isMobile = browser.is('Mobile')\n\nconst useStyles = makeStyles({\n  LocalizedTableCell: {\n    textAlign: ({ direction }: StyleProps) => {\n      if (direction === undefined) return undefined\n\n      switch (direction) {\n        case 'ltr': return 'left'\n        case 'rtl': return 'right'\n      }\n    },\n  },\n}, {\n  flip: false,\n})\n\nconst DataTable: React.FC<Props> = ({ columns, rows, defaultSortOrder = 'asc', locale }) => {\n  const [sorts, setSorts] = useState<Sort<Row>[]>([])\n\n  // NOTE: TypeScript のメンバーアクセス演算は部分関数ではない (cf. https://github.com/microsoft/TypeScript/issues/13778)\n  const primarySort = useMemo<Sort<Row> | undefined>(() => sorts[0], [sorts])\n\n  const createSortLabelClickHandler = useCallback((field: Field) => () => {\n    if (field === primarySort?.by) {\n      setSorts(([oldPrimarySort, ...oldRestSorts]) => [\n        {\n          by: oldPrimarySort.by,\n          in: oldPrimarySort.in === 'asc' ? 'desc' : 'asc',\n        },\n        ...oldRestSorts,\n      ])\n    } else {\n      const fieldSortIndex = sorts.findIndex((sort) => sort.by === field)\n\n      if (fieldSortIndex === -1) {\n        setSorts((oldSorts) => [\n          {\n            by: field,\n            in: defaultSortOrder,\n          },\n          ...oldSorts,\n        ])\n      } else {\n        setSorts((oldSorts) => {\n          // const oldFieldSortIndex = oldSorts.findIndex((oldSort) => oldSort.by === field)\n\n          return [\n            oldSorts[fieldSortIndex],\n            ...oldSorts.slice(0, fieldSortIndex),\n            ...oldSorts.slice(fieldSortIndex + 1),\n          ]\n        })\n      }\n    }\n  }, [defaultSortOrder, sorts, primarySort])\n\n  const sortedRows = useMemo(() => sorts.reduceRight((result, sort) => {\n    switch (sort.in) {\n      case 'asc': return result.sortBy((row) => String(row[sort.by]), compareStrings)\n      case 'desc': return result.sortBy((row) => String(row[sort.by]), (a, b) => -compareStrings(a, b))\n    }\n  }, List(rows)).toArray(), [sorts, rows])\n\n  const theme = useTheme()\n\n  const direction = useMemo(() => {\n    if (locale === undefined) return undefined\n\n    return /^(?:he|iw)\\b/.test(locale) ? 'rtl' : 'ltr' // TODO: RtL の判定方法を修正する\n  }, [locale])\n\n  const jssClasses = useStyles({ direction })\n\n  return (\n    <TableContainer component={ Paper }>\n      <Table size={ isMobile ? 'small' : 'medium' } lang={ locale }>\n        <TableHead>\n          <TableRow>\n            { columns.map((column) => (\n              <TableCell\n                variant=\"head\"\n                sortDirection={ primarySort?.by === column.field ? primarySort.in : undefined }\n                className={ jssClasses.LocalizedTableCell }\n                style={ { minWidth: column.width !== undefined ? column.width + 2 * theme.spacing(2) : undefined } }\n                key={ column.field }\n              >\n                <bdi>\n                  <TableSortLabel\n                    active={ primarySort?.by === column.field }\n                    direction={ sorts.find((sort) => sort.by === column.field)?.in ?? defaultSortOrder }\n                    onClick={ createSortLabelClickHandler(column.field) }\n                  >\n                    { column.label ?? column.field }\n                  </TableSortLabel>\n                </bdi>\n              </TableCell>\n            )) }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          { sortedRows.map((row, i) => (\n            <TableRow hover key={ i }>\n              { OrderedMap(Object.entries(row)).sortBy((_value, field) => columns.findIndex((column) => column.field === field), (a, b) => a - b).map((value, field) => (\n                <TableCell\n                  className={ jssClasses.LocalizedTableCell }\n                  key={ field }\n                >\n                  <bdi>\n                    { value }\n                  </bdi>\n                </TableCell>\n              )).valueSeq().toArray() }\n            </TableRow>\n          )) }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default DataTable\n","import { useEffect, useState } from 'react'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport fetch, { NoAnyResponse } from '~/fetch'\n\n// TODO: remove?\ntype PromiseState =\n  | 'pending'\n  | 'fulfilled'\n  | 'rejected'\n\n/**\n * A hook to suspend a fetch result.\n *\n * @throws `Promise<void>` while pending.\n * @throws `Error` if rejected.\n */\nexport default function useFetch(input: RequestInfo, init?: RequestInit) {\n  const [fetchPromise, setFetchPromise] = useState<Promise<NoAnyResponse> | null>(null)\n  const [response, setResponse] = useState<NoAnyResponse | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const [state, setState] = useState<PromiseState | null>(null)\n\n  useEffect(() => {\n    setFetchPromise(fetch(input, init))\n    setState('pending')\n  }, [input, init])\n\n  switch (state) {\n    case 'pending':\n      shouldBePresent(fetchPromise)\n\n      throw fetchPromise.then((value) => {\n        setResponse(value)\n        setState('fulfilled')\n      }).catch((reason) => {\n        if (!(reason instanceof Error)) {\n          throw new TypeError('Non-error reason caught.')\n        }\n\n        setError(reason)\n        setState('rejected')\n      })\n    case null:\n    case 'fulfilled': return response\n    case 'rejected': throw error\n  }\n}\n","import { asJson, listOf } from './commonValidators'\n\nconst asValue = asJson\nexport const asListValue = listOf(asValue)\n","import { asNumber, asObject, asString, asUnionOf, listOf, optional } from './commonValidators'\nimport { asListValue } from './protocolBuffersWellKnownTypesValidators'\n\nconst asDimension = asUnionOf('DIMENSION_UNSPECIFIED', 'COLUMNS', 'ROWS')\n\nexport const asValueRange = asObject<GoogleSheetsApi.ValueRange>((input) => ({\n  range: optional(asString)(input.range),\n  majorDimension: optional(asDimension)(input.majorDimension),\n  values: optional(asListValue)(input.values),\n}))\n\nexport const asSpreadsheet = asObject<GoogleSheetsApi.Spreadsheet>((input) => ({\n  properties: optional(asSpreadsheetProperties)(input.properties),\n  sheets: optional(listOf(asSheet))(input.sheets),\n}))\n\nexport const asSpreadsheetProperties = asObject<GoogleSheetsApi.SpreadsheetProperties>((input) => ({\n  locale: optional(asString)(input.locale),\n}))\n\nexport const asSheet = asObject<GoogleSheetsApi.Sheet>((input) => ({\n  data: optional(listOf(asGridData))(input.data),\n}))\n\nexport const asGridData = asObject<GoogleSheetsApi.GridData>((input) => ({\n  columnMetadata: optional(listOf(asDimensionProperties))(input.columnMetadata),\n}))\n\nexport const asDimensionProperties = asObject<GoogleSheetsApi.DimensionProperties>((input) => ({\n  pixelSize: optional(asNumber)(input.pixelSize),\n}))\n","import { stringify } from 'bcp-47'\nimport { List } from 'immutable'\nimport { useInjection } from 'inversify-react'\nimport React, { useEffect, useState } from 'react'\nimport { generatePath } from 'react-router'\n\nimport DataTable, { Column, Row } from '~/components/DataTable'\nimport ConfigRegistry from '~/config/ConfigRegistry'\nimport zipIterables from '~/extensions/Iterable/zipIterables'\nimport useFetch from '~/hooks/useFetch'\nimport typed from '~/typed'\nimport parseSpreadsheetLocale from '~/utils/parseSpreadsheetLocale'\nimport { asSpreadsheet, asValueRange } from '~/validators/googleSheetsApiResourceValidators'\n\n// TODO: remove\ntype CellValue = string | number\n\n// TODO: remove\nfunction isCellValue(input: unknown): input is CellValue {\n  switch (typeof input) {\n    case 'string':\n    case 'number': return true\n    default: return false\n  }\n}\n\nconst FossLicenseComparisonTable: React.FC = () => {\n  const config = useInjection<ConfigRegistry>('EnvVarConfig')\n\n  const getSpreadsheetResponse = useFetch(generatePath(typed<[string]>`${ config.get('SHEETS_API_URL') }/spreadsheets/:spreadsheetId\\\\?ranges=:sheetName&includeGridData=:includeGridData&fields=:fields&key=:apiKey`, {\n    spreadsheetId: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID'),\n    sheetName: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME'),\n    includeGridData: true,\n    fields: 'properties.locale,sheets.data.columnMetadata',\n    apiKey: config.get('GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY'),\n  }))\n\n  const getSpreadsheetValuesResponse = useFetch(generatePath(typed<[string]>`${ config.get('SHEETS_API_URL') }/spreadsheets/:spreadsheetId/values/:sheetName\\\\?key=:apiKey`, {\n    spreadsheetId: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_ID'),\n    sheetName: config.get('GOOGLE_SHEETS_FOSS_COMPARISON_TABLE_SHEET_SHEET_NAME'),\n    apiKey: config.get('GOOGLE_CLOUD_APIS_GOOGLE_SHEETS_API_KEY'),\n  }))\n\n  const [columns, setColumns] = useState<Column[] | null>(null)\n  const [rows, setRows] = useState<Row[] | null>(null)\n  const [locale, setLocale] = useState<string | null>(null)\n\n  useEffect(() => {\n    // tslint:disable-next-line:semicolon\n    ;(async () => {\n      if (getSpreadsheetResponse === null || getSpreadsheetValuesResponse === null) {\n        return\n      }\n\n      const spreadsheet = asSpreadsheet(await getSpreadsheetResponse.json())\n      const spreadsheetLocale = spreadsheet.properties?.locale\n      const columnMetadata = spreadsheet.sheets?.[0].data?.[0].columnMetadata\n      const valueRange = asValueRange(await getSpreadsheetValuesResponse.json())\n\n      if (spreadsheetLocale === undefined || columnMetadata === undefined) {\n        throw new Error('No both locale and columnMetadata found.')\n      }\n\n      if (valueRange?.majorDimension !== 'ROWS') {\n        throw new Error('Dimension unsupported.')\n      }\n\n      if (valueRange.values === undefined || !valueRange.values.every<JsonArray>(Array.isArray)) {\n        throw new Error('Less than 2 dimensions found.')\n      }\n\n      if (!valueRange.values.every((row): row is CellValue[] => row.every(isCellValue))) {\n        throw new Error('Neither string nor number value found.')\n      }\n\n      setLocale(stringify(parseSpreadsheetLocale(spreadsheetLocale)))\n\n      const [firstRowValues, ...restRowsValues] = valueRange.values\n\n      const fields = firstRowValues.map((cellValue, i) => typed<[CellValue, number]>`${ cellValue }_${ i }`)\n\n      setColumns(Array.from(zipIterables(fields, zipIterables(firstRowValues, columnMetadata))).map(([field, [cellValue, { pixelSize }]]) => ({\n        field,\n        label: cellValue,\n        width: pixelSize,\n      })))\n\n      setRows(restRowsValues.map((rowValues) => Object.fromEntries(zipIterables(fields, rowValues))))\n    })()\n  }, [getSpreadsheetResponse, getSpreadsheetValuesResponse])\n\n  if (columns === null || rows === null) {\n    return null\n  }\n\n  return (\n    <DataTable\n      columns={ List(columns).sortBy((column) => column.field, (a, b) => {\n        if (a < b) return -1\n        else if (a > b) return 1\n        else return 0\n      }).toArray() }\n      rows={ rows }\n      locale={ locale ?? undefined }\n    />\n  )\n}\n\nexport default FossLicenseComparisonTable\n","import { Schema } from 'bcp-47/lib/parse'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\n\n// declare global {\n//   interface RegExpExecArray {\n//     groups?: {\n//         [key: string]: string | undefined\n//     }\n//   }\n// }\n\n/**\n * Parse {locale} as a [Spreadsheet locale](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties).\n */\nexport default function parseSpreadsheetLocale(localeString: string): Schema {\n  const groups = /(?<language>[a-z]{2,3})(?:_(?<region>[A-Z]{2}))?/i.exec(localeString)?.groups as {\n    language: string\n    region: string | undefined\n  } | undefined\n\n  shouldBePresent(groups)\n\n  const { language, region } = groups\n\n  return {\n    language,\n    extendedLanguageSubtags: [],\n    script: null,\n    region: region ?? null,\n    variants: [],\n    extensions: [],\n    privateuse: [],\n    irregular: null,\n    regular: null,\n  }\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  table: 'Table',\n})\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport React, { Suspense } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport FossLicenseComparisonTable from '~/components/FossLicenseComparisonTable'\nimport { createPage } from '~/components/PageTemplate'\nimport messages from './messages'\n\nconst TablePage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.table) } />\n      <Suspense fallback={ <CircularProgress /> }>\n        <FossLicenseComparisonTable />\n      </Suspense>\n    </>\n  )\n}\n\nexport default createPage(TablePage)\n"],"sourceRoot":""}