{"version":3,"sources":["webpack:///./src/components/Reminder/TaskListItem/classes.css?e0e5","webpack:///./src/components/Reminder/TaskListItem/classes.css","webpack:///./src/lib/curry.ts","webpack:///./src/lib/validators/stringValidators.ts","webpack:///./src/components/Reminder/AddTaskButton/messages.ts","webpack:///./src/components/Reminder/AddTaskButton/index.tsx","webpack:///./src/components/Reminder/TaskList/index.tsx","webpack:///./src/components/Reminder/TaskListItem/DeleteTaskButton/index.tsx","webpack:///./src/components/Reminder/TaskListItem/messages.ts","webpack:///./src/components/Reminder/TaskListItem/index.tsx","webpack:///./src/components/Reminder/index.tsx","webpack:///./src/components/App/ReminderPage/messages.ts","webpack:///./src/components/App/ReminderPage/index.tsx"],"names":["api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","curry","f","x","xs","defineMessages","add","AddTaskButton","addTask","Button","onClick","variant","color","messages","TaskList","children","List","TaskListItem","IconButton","asBoundedLengthStringErrorMessage","id","value","index","onChange","onDelete","moveTask","validate","ref","useRef","useDrag","item","type","collect","monitor","dragging","isDragging","drag","useDrop","accept","hover","targetIndex","drop","className","useMemo","classnames","classes","TaskListItemContainer","Dragging","handleContentChange","useCallback","event","target","handleDoneChange","_checked","done","checked","formatMessage","useIntl","errors","helperText","undefined","isOneOf","Object","keys","key","Case","sentence","values","ListItem","container","secondaryAction","ListItemSecondaryAction","ListItemIcon","Checkbox","TextField","fullWidth","disabled","error","DeleteTaskButton","asObject","input","leftOnly","named","upperBound","lowerBound","Infinity","inputAsString","asString","length","ValidationError","typed","asBoolean","mapDispatchToProps","addTaskAsync","changeTaskContent","changeTaskContentAsync","markTaskAsDone","markTaskAsDoneAsync","markTaskAsUndone","markTaskAsUndoneAsync","deleteTask","deleteTaskAsync","connect","tasks","reminder","changeTask","taskId","map","task","ReminderPage","title"],"mappings":"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","file":"assets/scripts/reminder~21833f8f.096e7f49.js","sourcesContent":["var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-1!../../../../node_modules/postcss-loader/src/index.js!./classes.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".src-components-Reminder-TaskListItem-classes__TaskListItemContainer--3F5ef.src-components-Reminder-TaskListItem-classes__Dragging--1TtFC {\\n  opacity: 0;\\n}\\n\\n.src-components-Reminder-TaskListItem-classes__ListItemSecondaryAction--3QycB {\\n  padding-right: 72px; /* TODO */\\n}\\n\", \"\"]);\n// Exports\nexports.locals = {\n\t\"TaskListItemContainer\": \"src-components-Reminder-TaskListItem-classes__TaskListItemContainer--3F5ef\",\n\t\"Dragging\": \"src-components-Reminder-TaskListItem-classes__Dragging--1TtFC\",\n\t\"ListItemSecondaryAction\": \"src-components-Reminder-TaskListItem-classes__ListItemSecondaryAction--3QycB\"\n};\nmodule.exports = exports;\n","const curry = <T0, Ts extends unknown[], U>(f: (x: T0, ...xs: Ts) => U) => (x: T0) => (...xs: Ts): U => f(x, ...xs)\n\nexport default curry\n","import assert from 'assert'\n\nimport typed from '~/lib/typed'\nimport ValidationError from './ValidationError'\nimport { asString } from './commonValidators'\n\nexport const asBoundedLengthString = ({\n  lowerBound = -Infinity,\n  upperBound = Infinity,\n}: {\n  lowerBound?: number\n  upperBound?: number\n}) => (input: unknown) => {\n  assert(lowerBound <= upperBound)\n\n  const inputAsString = asString(input)\n\n  if (lowerBound <= inputAsString.length && inputAsString.length <= upperBound) {\n    return inputAsString\n  }\n\n  throw new ValidationError(\n    typed<[string, number, number]>`${ inputAsString } is not between ${ lowerBound } and ${ upperBound } characters.`,\n    'asBoundedLengthStringErrorMessage',\n    {\n      input: inputAsString.length,\n      lowerBound,\n      upperBound,\n    }\n  )\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  add: 'add',\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport Button from '@material-ui/core/Button'\n\nimport messages from './messages'\n\nexport interface Props {\n  addTask(): void\n}\n\nconst AddTaskButton: React.FunctionComponent<Props> = ({ addTask }) => (\n  <Button onClick={ addTask } variant=\"contained\" color=\"secondary\">\n    <FormattedMessage { ...messages.add } />\n  </Button>\n)\n\nexport default AddTaskButton\n","import React from 'react'\n\nimport List from '@material-ui/core/List'\n\nimport { Props as TaskListItemProps } from '~/components/Reminder/TaskListItem'\n\nexport interface Props {\n  children?: React.ReactElement<TaskListItemProps, React.ComponentType<TaskListItemProps>> | Array<React.ReactElement<TaskListItemProps, React.ComponentType<TaskListItemProps>>>\n}\n\nconst TaskList: React.FunctionComponent<Props> = ({ children }) => (\n  <List>\n    { children }\n  </List>\n)\n\nexport default TaskList\n","import React from 'react'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nexport interface Props {\n  onClick(): void\n}\n\nconst TaskListItem: React.FunctionComponent<Props> = ({ onClick }) => (\n  <IconButton onClick={ onClick }>\n    <DeleteIcon />\n  </IconButton>\n)\n\nexport default TaskListItem\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  asBoundedLengthStringErrorMessage: '{ name } must be 0-{ upperBound } characters.',\n})\n","import Case from 'case'\nimport classnames from 'classnames'\nimport React, { useCallback, useMemo, useRef } from 'react'\nimport { DragObjectWithType, useDrag, useDrop } from 'react-dnd'\nimport { useIntl } from 'react-intl'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport TextField from '@material-ui/core/TextField'\n\nimport Task from '~/domain/entity/Task'\nimport TaskId from '~/domain/vo/TaskId'\nimport { isOneOf } from '~/lib/guards/commonGuards'\nimport ValidationError from '~/lib/validators/ValidationError'\nimport DeleteTaskButton from './DeleteTaskButton'\nimport classes from './classes.css'\nimport messages from './messages'\n\nexport interface Props {\n  id: TaskId\n  value: Pick<Task, 'content' | 'done'>\n  index: number\n\n  onChange(value: Partial<Task>): void\n  onDelete(): void\n  moveTask(sourceIndex: number, targetIndex: number): void\n  validate(input: Pick<Task, 'content' | 'done'>): Partial<Record<'content' | 'done', ValidationError>>\n}\n\ninterface CollectedProps {\n  dragging: boolean\n}\n\ninterface DragObject extends DragObjectWithType {\n  id: TaskId\n  index: number\n}\n\nconst TaskListItem: React.FunctionComponent<Props> = ({ id, value, index, onChange, onDelete, moveTask, validate }) => {\n  const ref = useRef(null)\n\n  const [{ dragging }, drag] = useDrag<DragObject, unknown, CollectedProps>({\n    item: {\n      type: 'TaskListItem',\n      id,\n      index,\n    },\n    collect: (monitor) => ({\n      dragging: monitor.isDragging(),\n    }),\n  })\n\n  const [, drop] = useDrop<DragObject, unknown, unknown>({\n    accept: 'TaskListItem',\n    hover(item) {\n      const targetIndex = index\n\n      if (item.index === targetIndex) {\n        return\n      }\n\n      moveTask(item.index, targetIndex)\n\n      // tslint:disable-next-line:no-object-mutation\n      item.index = targetIndex\n    },\n  })\n\n  drop(drag(ref))\n\n  const className = useMemo(() => classnames(classes.TaskListItemContainer, {\n    [classes.Dragging]: dragging,\n  }), [dragging])\n\n  const handleContentChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    onChange({\n      content: event.target.value,\n    })\n  }, [onChange])\n\n  const handleDoneChange = useCallback((event: React.ChangeEvent<HTMLInputElement>, _checked: boolean) => {\n    onChange({\n      done: event.target.checked,\n    })\n  }, [onChange])\n\n  const { formatMessage } = useIntl()\n\n  const errors = useMemo(() => validate(value), [value, validate])\n\n  const helperText = useMemo(() => {\n    if (errors.content === undefined) {\n      return null\n    }\n\n    if (isOneOf(...Object.keys(messages))(errors.content.key)) {\n      return Case.sentence(formatMessage(messages[errors.content.key], errors.content.values))\n    }\n\n    return null // TODO\n  }, [errors.content])\n\n  return (\n    <div ref={ ref }>\n      <ListItem\n        classes={ {\n          container: className,\n          secondaryAction: classes.ListItemSecondaryAction,\n        } }\n      >\n        <ListItemIcon>\n          <Checkbox checked={ value.done } onChange={ handleDoneChange } />\n        </ListItemIcon>\n        <TextField\n          fullWidth\n          value={ value.content }\n          onChange={ handleContentChange }\n          disabled={ value.done }\n          error={ errors.content !== undefined }\n          helperText={ helperText }\n        />\n        <ListItemSecondaryAction>\n          <DeleteTaskButton onClick={ onDelete } />\n        </ListItemSecondaryAction>\n      </ListItem>\n    </div>\n  )\n}\n\nexport default TaskListItem\n","import React, { useCallback } from 'react'\nimport { connect } from 'react-redux'\n\nimport Task from '~/domain/entity/Task'\nimport TaskId from '~/domain/vo/TaskId'\nimport curry from '~/lib/curry'\nimport { asBoolean, asObject, leftOnly, named } from '~/lib/validators/commonValidators'\nimport { asBoundedLengthString } from '~/lib/validators/stringValidators'\nimport { State } from '~/redux'\nimport { addTaskAsync, changeTaskContentAsync, deleteTaskAsync, markTaskAsDoneAsync, markTaskAsUndoneAsync, moveTask } from '~/redux/modules/reminder'\nimport AddTaskButton from './AddTaskButton'\nimport TaskList from './TaskList'\nimport TaskListItem from './TaskListItem'\n\ninterface StateProps {\n  tasks: Task[]\n}\n\ninterface DispatchProps {\n  addTask(): void\n  changeTaskContent(taskId: TaskId, content: string): void\n  markTaskAsDone(taskId: TaskId): void\n  markTaskAsUndone(taskId: TaskId): void\n  deleteTask(taskId: TaskId): void\n  moveTask(source: number, dest: number): void\n}\n\ntype Props =\n  & StateProps\n  & DispatchProps\n\nconst validate = asObject('a Task for presentation', (input) => ({\n  content: leftOnly(named('content', asBoundedLengthString({\n    upperBound: 140,\n  })))(input.content),\n  done: leftOnly(asBoolean)(input.done),\n}))\n\nconst Reminder: React.FunctionComponent<Props> = ({ tasks, addTask, changeTaskContent, markTaskAsDone, markTaskAsUndone, deleteTask, moveTask }) => {\n  const changeTask = useCallback((taskId, { content, done }) => {\n    if (content !== undefined) {\n      changeTaskContent(taskId, content)\n    }\n\n    if (done !== undefined) {\n      if (done) {\n        markTaskAsDone(taskId)\n      } else {\n        markTaskAsUndone(taskId)\n      }\n    }\n  }, [changeTaskContent, markTaskAsDone, markTaskAsUndone])\n\n  return (\n    <>\n      <TaskList>\n        {\n          tasks.map((task, index) => (\n            <TaskListItem\n              key={ task.id.value }\n              id={ task.id }\n              value={ task }\n              validate={ validate }\n              onChange={ curry(changeTask)(task.id) }\n              onDelete={ curry(deleteTask)(task.id) }\n              { ...{ index, moveTask } }\n            />\n          ))\n        }\n      </TaskList>\n      <AddTaskButton addTask={ addTask } />\n    </>\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ reminder: { tasks } }: State): StateProps => ({\n  tasks,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  addTask: addTaskAsync,\n  changeTaskContent: changeTaskContentAsync,\n  markTaskAsDone: markTaskAsDoneAsync,\n  markTaskAsUndone: markTaskAsUndoneAsync,\n  deleteTask: deleteTaskAsync,\n  moveTask,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  reminder: 'reminder',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport Reminder from '~/components/Reminder'\nimport messages from './messages'\n\nconst ReminderPage: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.reminder) } />\n      <Reminder />\n    </>\n  )\n}\n\nexport default ReminderPage\n"],"sourceRoot":""}