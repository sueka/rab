{"version":3,"sources":["webpack://react-app-prototype/./src/lib/extensions/Iterable/zipWithIndexIterable.ts","webpack://react-app-prototype/./src/components/AnalogClock/StoppedClock/index.tsx","webpack://react-app-prototype/./src/components/AnalogClock/index.tsx","webpack://react-app-prototype/./src/components/App/ClockPage/messages.ts","webpack://react-app-prototype/./src/components/App/ClockPage/index.tsx"],"names":["genIndex","index","drawClockFace","radius","context","beginPath","arc","Math","PI","fillStyle","fill","gradient","createRadialGradient","addColorStop","lineWidth","strokeStyle","stroke","font","typed","textAlign","textBaseline","xs","zipIterables","INDEX","angle","rotate","fillText","drawClockHands","time","shouldBePresent","hour","minute","second","hourHandAngle","lineCap","moveTo","lineTo","drawHourHand","minuteHandAngle","drawMinuteHand","secondHandAngle","drawSecondHand","useStyles","makeStyles","Canvas","width","height","RADIUS","useState","setContext","dpr","useScreen","canvas","useRef","jssClasses","useEffect","current","getContext","setTransform","ref","className","timeZone","Intl","DateTimeFormat","resolvedOptions","mapDispatchToProps","startClock","stopClock","connect","now","io","Temporal","toLocaleTimeString","calendar","numberingSystem","hourCycle","defineMessages","clock","createPage","formatMessage","useIntl","Helmet","title","messages"],"mappings":"yVAEUA,GAAV,SAAUA,IAAV,uEACMC,EAAQ,EADd,OAKI,OALJ,SAKUA,IALV,6D,6iCCYA,SAASC,EAAcC,EAAgBC,GAErCA,EAAQC,YACRD,EAAQE,IAAI,EAAG,EAAG,IAAOH,EAAQ,EAAG,EAAII,KAAKC,IAC7CJ,EAAQK,UAAY,QACpBL,EAAQM,OAGR,IAAMC,EAAWP,EAAQQ,qBAAqB,EAAG,EAAG,GAAMT,EAAQ,EAAG,EAAGA,GAExEQ,EAASE,aAAa,EAAG,WACzBF,EAASE,aAAa,GAAK,SAC3BF,EAASE,aAAa,EAAG,WAIzBT,EAAQU,UAAY,GAAMX,EAC1BC,EAAQW,YAAcJ,EACtBP,EAAQY,SAKRZ,EAAQK,UAAY,QACpBL,EAAQa,MAAOC,OAAf,4BAAkC,KAAQf,GAC1CC,EAAQe,UAAY,SACpBf,EAAQgB,aAAe,SA1BiD,MDH1BC,ECG0B,KDH1BA,ECwB9B,CAAC,MAAO,IAAK,KAAM,MAAO,OAAQ,IAAK,KAAM,MAAO,OAAQ,KAAM,IAAK,ODvBhFC,OAAaD,EAAIrB,OCEgD,IA6BxE,2BAAwD,sBAA5CuB,EAA4C,KAEhDC,EAFgD,KAEpC,EAAIjB,KAAKC,GAE3BJ,EAAQqB,OAAOD,GACfpB,EAAQsB,SAASH,EAAO,GAAI,GAAMpB,GAClCC,EAAQqB,QAAQD,IAnCsD,+BAwC1E,SAASG,EAAeC,EAAyBzB,EAAgBC,IASjE,SAAsBwB,EAAyBzB,EAAgBC,IAC7DyB,OAAgBD,EAAKE,OACrBD,OAAgBD,EAAKG,SACrBF,OAAgBD,EAAKI,QAGrB,IAAMC,GAAkBL,EAAKE,KAAO,GAAOF,EAAKG,OAAS,GAAOH,EAAKI,OAAS,MAAS,EAAIzB,KAAKC,GAEhGJ,EAAQ8B,QAAU,QAClB9B,EAAQU,UAAY,IAAOX,EAC3BC,EAAQW,YAAc,QAEtBX,EAAQC,YACRD,EAAQ+B,OAAO,EAAG,GAClB/B,EAAQqB,OAAOQ,GACf7B,EAAQgC,OAAO,GAAI,GAAMjC,GACzBC,EAAQqB,QAAQQ,GAChB7B,EAAQY,SAzBRqB,CAAaT,EAAMzB,EAAQC,GA6B7B,SAAwBwB,EAAyBzB,EAAgBC,IAC/DyB,OAAgBD,EAAKG,SACrBF,OAAgBD,EAAKI,QAGrB,IAAMM,GAAmBV,EAAKG,OAAUH,EAAKI,OAAS,IAAO,GAAKzB,KAAKC,GAEvEJ,EAAQ8B,QAAU,QAClB9B,EAAQU,UAAY,IAAOX,EAC3BC,EAAQW,YAAc,QAEtBX,EAAQC,YACRD,EAAQ+B,OAAO,EAAG,GAClB/B,EAAQqB,OAAOa,GACflC,EAAQgC,OAAO,GAAI,IAAOjC,GAC1BC,EAAQqB,QAAQa,GAChBlC,EAAQY,SA5CRuB,CAAeX,EAAMzB,EAAQC,GAgD/B,SAAwBwB,EAAyBzB,EAAgBC,IAC/DyB,OAAgBD,EAAKI,QAGrB,IAAMQ,EAAkBZ,EAAKI,OAAS,GAAKzB,KAAKC,GAEhDJ,EAAQ8B,QAAU,QAClB9B,EAAQU,UAAY,IAAOX,EAC3BC,EAAQW,YAAc,MAEtBX,EAAQC,YACRD,EAAQ+B,OAAO,EAAG,GAClB/B,EAAQqB,OAAOe,GACfpC,EAAQ+B,OAAO,EAAI,GAAMhC,GACzBC,EAAQgC,OAAO,GAAI,GAAMjC,GACzBC,EAAQqB,QAAQe,GAChBpC,EAAQY,SA/DRyB,CAAeb,EAAMzB,EAAQC,GAuE/B,IAAMsC,GAAYC,OAAwC,CACxDC,OAAQ,kBAAwB,CAC9BC,MADM,EAAGA,MAETC,OAFM,EAAUA,WAMdC,EAAS,IAmDf,EAjDkD,SAAC,GAAa,IAAXnB,EAAW,EAAXA,KAAW,GAChCoB,gBADgC,WACvD5C,EADuD,KAC9C6C,EAD8C,KAEtDC,GAAQC,SAARD,IAEFE,GAASC,YAA0B,MAEnCC,EAAaZ,EAAU,CAC3BG,MAAO,IACPC,OAAQ,MA+BV,OA5BAS,gBAAU,WAAM,MACdN,EAAU,UAACG,EAAOI,eAAR,aAAC,EAAgBC,WAAW,SACrC,CAACL,KAEJG,gBAAU,WACO,MAAXnD,GAAsC,OAAnBgD,EAAOI,SAA4B,OAARN,IAKlDE,EAAOI,QAAQX,MAAQ,EAAIK,EAAMH,EACjCK,EAAOI,QAAQV,OAAS,EAAII,EAAMH,EAIlC3C,EAAQsD,aAAaR,EAAK,EAAG,EAAGA,EAAKA,EAAMH,EAAQG,EAAMH,MACxD,CAAC3C,EAASgD,EAAQF,KAErBK,gBAAU,WACO,MAAXnD,IAIJF,EAAc6C,EAAQ3C,GACtBuB,EAAeC,EAAMmB,EAAQ3C,MAE5B,CAACA,EAASwB,IAGX,0BACE+B,IAAMP,EACNQ,UAAYN,EAAWV,OACvBC,MAAQ,IACRC,OAAS,OChKPe,GAAa,IAAIC,KAAKC,gBAAiBC,kBAAvCH,SAiCFI,EAAoC,CACxCC,gBACAC,gBAGF,GAAeC,SATS,SAAC,GAAD,MAAyC,CAC/DC,IADsB,EAAGC,GAAMD,OASOJ,EAAxC,EApCqC,SAAC,GAAmC,IAAjCI,EAAiC,EAAjCA,IAAKH,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAOvD,OANAZ,gBAAU,WAGR,OAFAW,IAEOC,IACN,CAACD,EAAYC,IAGd,gBAAC,EAAD,CACEvC,KAEE2C,0BAAwBF,EAAIG,mBAAmB,KAAM,CACnDC,SAAU,UACVC,gBAAiB,OACjBb,WACAc,UAAW,MACX7C,KAAM,UACNC,OAAQ,UACRC,OAAQ,kB,WCvClB,GAAe4C,E,SAAAA,IAAe,CAC5BC,MAAO,CAAF,uDAAE,WCgBT,GAAeC,QAXa,WAAM,IACxBC,GAAkBC,SAAlBD,cAER,OACE,gCACE,gBAACE,EAAA,EAAD,CAAQC,MAAQH,EAAcI,EAASN,SACvC,gBAAC,EAAD","file":"assets/scripts/clock.b4595a71.js","sourcesContent":["import zipIterables from './zipIterables'\n\nfunction* genIndex() {\n  let index = 0 // tslint:disable-line:no-let\n\n  // tslint:disable-next-line:no-loop-statement\n  while (true) {\n    yield index++\n  }\n}\n\nexport default function zipWithIndexIterable<A>(xs: Iterable<A>) {\n  return zipIterables(xs, genIndex())\n}\n","import { makeStyles } from '@material-ui/core'\nimport { Temporal } from  'proposal-temporal'\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport { shouldBePresent } from '~/lib/asserters/commonAsserters'\nimport zipWithIndexIterable from '~/lib/extensions/Iterable/zipWithIndexIterable'\nimport useScreen from '~/lib/hooks/useScreen'\nimport typed from '~/lib/typed'\n\ninterface StoppedClockProps {\n  time: Temporal.TimeLike\n}\n\n// TODO: remove\nfunction drawClockFace(radius: number, context: CanvasRenderingContext2D) {\n  // face\n  context.beginPath()\n  context.arc(0, 0, 0.95 * radius, 0, 2 * Math.PI)\n  context.fillStyle = 'white' // tslint:disable-line:no-object-mutation\n  context.fill()\n\n  // frame\n  const gradient = context.createRadialGradient(0, 0, 0.9 * radius, 0, 0, radius)\n\n  gradient.addColorStop(0, 'dimgray')\n  gradient.addColorStop(0.5, 'white')\n  gradient.addColorStop(1, 'dimgray')\n\n  // context.beginPath()\n  // context.arc(0, 0, 0.95 * radius, 0, 2 * Math.PI)\n  context.lineWidth = 0.1 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = gradient // tslint:disable-line:no-object-mutation\n  context.stroke()\n\n  // indices\n  const INDICES = ['XII', 'I', 'II', 'III', 'IIII', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI']\n\n  context.fillStyle = 'black' // tslint:disable-line:no-object-mutation\n  context.font = typed<[number]>`${ 0.105 * radius }pt serif` // tslint:disable-line:no-object-mutation\n  context.textAlign = 'center' // tslint:disable-line:no-object-mutation\n  context.textBaseline = 'middle' // tslint:disable-line:no-object-mutation\n\n  // tslint:disable-next-line:no-loop-statement\n  for (const [INDEX, i] of zipWithIndexIterable(INDICES)) {\n    // 12時の方向が0、時計回り。\n    const angle = i / 6 * Math.PI\n\n    context.rotate(angle)\n    context.fillText(INDEX, 0, -0.8 * radius)\n    context.rotate(-angle)\n  }\n}\n\n// TODO: remove\nfunction drawClockHands(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  drawHourHand(time, radius, context)\n  drawMinuteHand(time, radius, context)\n  drawSecondHand(time, radius, context)\n\n  // TODO: draw canvas cap nut\n}\n\n// TODO: remove\nfunction drawHourHand(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(time.hour)\n  shouldBePresent(time.minute)\n  shouldBePresent(time.second)\n\n  // 12時の方向が0、時計回り。\n  const hourHandAngle = ((time.hour % 12) + (time.minute / 60) + (time.second / 3600)) / 6 * Math.PI\n\n  context.lineCap = 'round' // tslint:disable-line:no-object-mutation\n  context.lineWidth = 0.06 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = 'black' // tslint:disable-line:no-object-mutation\n\n  context.beginPath()\n  context.moveTo(0, 0)\n  context.rotate(hourHandAngle)\n  context.lineTo(0, -0.6 * radius)\n  context.rotate(-hourHandAngle)\n  context.stroke()\n}\n\n// TODO: remove\nfunction drawMinuteHand(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(time.minute)\n  shouldBePresent(time.second)\n\n  // 12時の方向が0、時計回り。\n  const minuteHandAngle = (time.minute + (time.second / 60)) / 30 * Math.PI\n\n  context.lineCap = 'round' // tslint:disable-line:no-object-mutation\n  context.lineWidth = 0.04 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = 'black' // tslint:disable-line:no-object-mutation\n\n  context.beginPath()\n  context.moveTo(0, 0)\n  context.rotate(minuteHandAngle)\n  context.lineTo(0, -0.75 * radius)\n  context.rotate(-minuteHandAngle)\n  context.stroke()\n}\n\n// TODO: remove\nfunction drawSecondHand(time: Temporal.TimeLike, radius: number, context: CanvasRenderingContext2D) {\n  shouldBePresent(time.second)\n\n  // 12時の方向が0、時計回り。\n  const secondHandAngle = time.second / 30 * Math.PI\n\n  context.lineCap = 'round' // tslint:disable-line:no-object-mutation\n  context.lineWidth = 0.01 * radius // tslint:disable-line:no-object-mutation\n  context.strokeStyle = 'red' // tslint:disable-line:no-object-mutation\n\n  context.beginPath()\n  context.moveTo(0, 0)\n  context.rotate(secondHandAngle)\n  context.moveTo(0,  0.3 * radius)\n  context.lineTo(0, -0.7 * radius)\n  context.rotate(-secondHandAngle)\n  context.stroke()\n}\n\ninterface StyleProps {\n  width: number\n  height: number\n}\n\nconst useStyles = makeStyles<never, StyleProps, 'Canvas'>({\n  Canvas: ({ width, height }) => ({\n    width,\n    height,\n  }),\n})\n\nconst RADIUS = 200 // diameter = 2 radius - 2\n\nconst StoppedClock: React.FC<StoppedClockProps> = ({ time }) => {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>()\n  const { dpr } = useScreen()\n\n  const canvas = useRef<HTMLCanvasElement>(null)\n\n  const jssClasses = useStyles({\n    width: 2 * RADIUS,\n    height: 2 * RADIUS,\n  })\n\n  useEffect(() => {\n    setContext(canvas.current?.getContext('2d'))\n  }, [canvas])\n\n  useEffect(() => {\n    if (context == null || canvas.current === null || dpr === null) {\n      return\n    }\n\n    /* tslint:disable:no-object-mutation */\n    canvas.current.width = 2 * dpr * RADIUS\n    canvas.current.height = 2 * dpr * RADIUS\n    /* tslint:enable:no-object-mutation */\n\n    // X 軸は右向き、 Y 軸は下向き、反転無し、原点は中央。\n    context.setTransform(dpr, 0, 0, dpr, dpr * RADIUS, dpr * RADIUS)\n  }, [context, canvas, dpr])\n\n  useEffect(() => {\n    if (context == null) {\n      return\n    }\n\n    drawClockFace(RADIUS, context)\n    drawClockHands(time, RADIUS, context)\n    // TODO: draw cover\n  }, [context, time])\n\n  return (\n    <canvas\n      ref={ canvas }\n      className={ jssClasses.Canvas }\n      width={ 2 * RADIUS }\n      height={ 2 * RADIUS }\n    />\n  )\n}\n\nexport default StoppedClock\n","import { Temporal } from 'proposal-temporal'\nimport React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport { State } from '~/redux'\nimport { startClock, stopClock } from '~/redux/modules/io'\nimport StoppedClock from './StoppedClock'\n\ninterface StateProps {\n  now: Date\n}\n\ninterface DispatchProps {\n  startClock(): void\n  stopClock(): void\n}\n\ntype Props =\n  & StateProps\n  & DispatchProps\n\nconst { timeZone } = new Intl.DateTimeFormat().resolvedOptions()\n\nconst AnalogClock: React.FC<Props> = ({ now, startClock, stopClock }) => {\n  useEffect(() => {\n    startClock()\n\n    return stopClock\n  }, [startClock, stopClock])\n\n  return (\n    <StoppedClock\n      time={\n        // NOTE: locale は時刻の書式が hh:mm:ss なロケールなら何でもよいが、 Firefox 85 では new Date(0).toLocaleString('ja', { hour: '2-digit', minute: '2-digit' }) が \"9:00\" となる。\n        Temporal.PlainTime.from(now.toLocaleTimeString('en', {\n          calendar: 'gregory',\n          numberingSystem: 'latn',\n          timeZone,\n          hourCycle: 'h23',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n        }))\n      }\n    />\n  )\n}\n\n// connect\n\nconst mapStateToProps = ({ io: { now } }: State): StateProps => ({\n  now,\n})\n\nconst mapDispatchToProps: DispatchProps = {\n  startClock,\n  stopClock,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnalogClock)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  clock: 'Clock',\n})\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { useIntl } from 'react-intl'\n\nimport AnalogClock from '~/components/AnalogClock'\nimport { createPage } from '~/components/PageTemplate'\nimport messages from './messages'\n\nconst ClockPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.clock) } />\n      <AnalogClock />\n    </>\n  )\n}\n\nexport default createPage(ClockPage)\n"],"sourceRoot":""}