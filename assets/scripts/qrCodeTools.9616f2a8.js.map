{"version":3,"file":"assets/scripts/qrCodeTools.9616f2a8.js","mappings":"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","sources":["webpack://rap/./src/components/QrCodeDecoder/messages.ts","webpack://rap/./src/components/QrCodeDecoder/index.tsx","webpack://rap/./src/components/QrCodeEncoder/messages.ts","webpack://rap/./src/components/QrCodeEncoder/index.tsx","webpack://rap/./src/components/App/QrCodeToolsPage/messages.ts","webpack://rap/./src/components/App/QrCodeToolsPage/index.tsx","webpack://rap/./src/components/CopyTextButton/messages.ts","webpack://rap/./src/components/CopyTextButton/index.tsx","webpack://rap/./src/components/FileUpload/classes.css?bd7d","webpack://rap/./src/components/FileUpload/index.tsx","webpack://rap/./src/components/FileUpload/messages.ts","webpack://rap/./src/components/FileUpload/classes.css"],"sourcesContent":["import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  noFileSelected: 'No file selected.',\n  decoding: 'Decoding…',\n  decodedSuccessfully: 'Decoded successfully.',\n})\n","import Grid from '@material-ui/core/Grid'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\nimport jsQR from 'jsqr'\nimport React, { useCallback, useMemo, useRef, useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport FileUpload from '~/components/FileUpload'\nimport CopyTextButton from '~/components/CopyTextButton'\nimport messages from './messages'\n\ntype CopiableTextFieldProps = TextFieldProps\n\nconst CopiableTextField: React.FC<CopiableTextFieldProps> = ({ value, ...restProps }) => {\n  const input = useRef<HTMLInputElement>(null)\n\n  return (\n    <TextField\n      value={ value }\n      inputRef={ input }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <CopyTextButton inputFor={ input } />\n          </InputAdornment>\n        ),\n      } }\n      { ...restProps }\n    />\n  )\n}\n\nconst QrCodeDecoder: React.FC = () => {\n  const canvas = useMemo(() => document.createElement('canvas'), [])\n  const context = useMemo(() => canvas.getContext('2d'), [canvas])\n  const [files, setFiles] = useState<FileList>()\n  const [decoded, setDecoded] = useState<string>()\n\n  /// files[0] を src に持つ Image を ImageData に変換し、QR コードを生成する\n  const load = useCallback(({ currentTarget: image }) => {\n    shouldBePresent(context)\n\n    const height = image.height\n    const width = image.width\n\n    canvas.height = height\n    canvas.width = width\n\n    context.drawImage(image, 0, 0)\n\n    const imageData = context.getImageData(0, 0, width, height)\n\n    const qrcode = jsQR(imageData.data, width, height, {\n      inversionAttempts: 'dontInvert',\n    })\n\n    setDecoded(() => qrcode?.data)\n  }, [canvas, context])\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setFiles(event.target.files ?? undefined)\n\n    /// files[0] を Image に変換する\n    if (event.target.files === null || event.target.files.length === 0) {\n      return // do nothing\n    }\n\n    shouldBePresent(event.target.files[0])\n\n    const file = event.target.files[0]\n    const url = URL.createObjectURL(file)\n    const image = new Image\n\n    image.onload = load\n    image.src = url\n\n    URL.revokeObjectURL(url)\n  }, [load])\n\n  const resultMessage = useMemo(() => {\n    if (files === undefined || files.length === 0) {\n      return <FormattedMessage { ...messages.noFileSelected } />\n    }\n\n    if (decoded === undefined) {\n      return <FormattedMessage { ...messages.decoding } />\n    }\n\n    return <FormattedMessage { ...messages.decodedSuccessfully } />\n  }, [files, decoded])\n\n  return (\n    <Grid container spacing={ 2 }>\n      <Grid item xs={ 12 } sm={ 6 }>\n        <FileUpload\n          accept=\"image/*\"\n          resultMessage={ resultMessage }\n          onChange={ handleChange }\n        />\n      </Grid>\n      <Grid item xs={ 12 } sm={ 6 }>\n        <CopiableTextField\n          multiline\n          fullWidth\n          maxRows={ 10 }\n          value={ decoded ?? '' }\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default QrCodeDecoder\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  errorCorrectionLevel: 'Error correction level',\n  maskPattern: 'Mask pattern',\n  default: 'Default',\n})\n","import Grid from '@material-ui/core/Grid'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select, { SelectProps } from '@material-ui/core/Select'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\nimport QRCode, { QRCodeErrorCorrectionLevel, QRCodeMaskPattern } from 'qrcode'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { v4 } from 'uuid'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport { isOneOf } from '~/guards/commonGuards'\nimport messages from './messages'\n\ntype QrCodeEncoderProps = Pick<TextFieldProps, 'defaultValue'>\n\nconst errorCorrectionLevels: QRCodeErrorCorrectionLevel[] = ['L', 'M', 'Q', 'H']\nconst maskPatterns: QRCodeMaskPattern[] = [0, 1, 2, 3, 4, 5, 6, 7]\n\n// TODO: Follow Material Design\nconst QrCodeEncoder: React.FC<QrCodeEncoderProps> = ({ ...textFieldProps }) => {\n  const input = useRef<HTMLInputElement>(null)\n  const canvas = useRef<HTMLCanvasElement>(null)\n  const errorCorrectionLevelSelectId = useMemo(v4, [])\n  const maskPatternSelectId = useMemo(v4, [])\n  const inputLabel = useRef<HTMLLabelElement>(null)\n  const { formatMessage } = useIntl()\n\n  const [errorCorrectionLevel, setErrorCorrectionLevel] = useState<QRCodeErrorCorrectionLevel>('M') //\n  const [maskPattern, setMaskPattern] = useState<QRCodeMaskPattern | undefined>()\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    if (event.currentTarget.value !== '') {\n      QRCode.toCanvas(canvas.current, event.currentTarget.value, {\n        errorCorrectionLevel,\n        maskPattern,\n      })\n    }\n  }, [canvas, errorCorrectionLevel, maskPattern])\n\n  const handleErrorCorrectionLevelChange = useCallback<NonNullable<SelectProps['onChange']>>((event) => {\n    if (!isOneOf<(QRCodeErrorCorrectionLevel)[]>(...errorCorrectionLevels)(event.target.value)) {\n      throw new Error //\n    }\n\n    const errorCorrectionLevel = event.target.value\n\n    setErrorCorrectionLevel(errorCorrectionLevel)\n\n    shouldBePresent(input.current?.value)\n\n    QRCode.toCanvas(canvas.current, input.current?.value, {\n      errorCorrectionLevel,\n      maskPattern,\n    })\n  }, [maskPattern])\n\n  const handleMaskPatternChange = useCallback<NonNullable<SelectProps['onChange']>>((event) => {\n    if (!isOneOf<(`${ QRCodeMaskPattern }` | 'default')[]>(...maskPatterns.map<`${ QRCodeMaskPattern }`>((n) => `${ n }`), 'default')(event.target.value)) {\n      throw new Error //\n    }\n\n    const maskPattern = event.target.value !== 'default' ? Number(event.target.value) : undefined\n\n    setMaskPattern(maskPattern)\n\n    shouldBePresent(input.current?.value)\n\n    QRCode.toCanvas(canvas.current, input.current?.value, {\n      errorCorrectionLevel,\n      maskPattern,\n    })\n  }, [errorCorrectionLevel])\n\n  useEffect(() => {\n    if (input.current?.value) {\n      QRCode.toCanvas(canvas.current, input.current.value)\n    }\n  }, [input, canvas])\n\n  return (\n    <Grid container spacing={ 2 } direction=\"row\">\n      <Grid item xs={ 12 } sm={ 6 } container spacing={ 2 } alignContent=\"flex-start\">\n        <Grid item xs={ 12 }>\n          <TextField fullWidth multiline inputRef={ input } onChange={ handleChange } { ...textFieldProps } />\n        </Grid>\n        <Grid item xs={ 6 }>\n          <InputLabel ref={ inputLabel } htmlFor={ errorCorrectionLevelSelectId }>\n            <FormattedMessage { ...messages.errorCorrectionLevel } />\n          </InputLabel>\n          <Select\n            native\n            onChange={ handleErrorCorrectionLevelChange }\n            id={ errorCorrectionLevelSelectId }\n            value={ errorCorrectionLevel }\n          >\n            { errorCorrectionLevels.map((level, i) =>\n              <option key={ i } value={ level }>{ level }</option>\n            ) }\n          </Select>\n        </Grid>\n        <Grid item xs={ 6 }>\n          <InputLabel ref={ inputLabel } htmlFor={ maskPatternSelectId }>\n            <FormattedMessage { ...messages.maskPattern } />\n          </InputLabel>\n          <Select\n            native\n            onChange={ handleMaskPatternChange }\n            id={ maskPatternSelectId }\n            value={ maskPattern ?? 'default' }\n          >\n            <option value=\"default\">{ formatMessage(messages.default) }</option>\n            { maskPatterns.map((pattern, i) =>\n              <option key={ i } value={ pattern }>{ pattern }</option>\n            ) }\n          </Select>\n        </Grid>\n      </Grid>\n      <Grid item xs={ 12 } sm={ 6 }>\n        <canvas ref={ canvas } />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default QrCodeEncoder\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  qrCodeTools: 'QR code tools',\n  encoder: 'Encoder',\n  decoder: 'Decoder',\n})\n","import Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport { createPage } from '~/components/PageTemplate'\nimport QrCodeDecoder from '~/components/QrCodeDecoder'\nimport QrCodeEncoder from '~/components/QrCodeEncoder'\nimport messages from './messages'\n\nconst QrCodeToolsPage: React.FC = () => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <>\n      <Helmet title={ formatMessage(messages.qrCodeTools) } />\n      <Box>\n        <Box padding={ 2 }>\n          <Grid container spacing={ 2 }>\n            <Grid item xs={ 12 }>\n              <Typography variant=\"h3\">\n                <FormattedMessage { ...messages.encoder } />\n              </Typography>\n            </Grid>\n            <Grid item xs={ 12 }>\n              <QrCodeEncoder defaultValue=\"https://sueka.me\" />\n            </Grid>\n          </Grid>\n        </Box>\n        <Box padding={ 2 }>\n          <Grid container spacing={ 2 }>\n            <Grid item xs={ 12 }>\n              <Typography variant=\"h3\">\n                <FormattedMessage { ...messages.decoder } />\n              </Typography>\n            </Grid>\n            <Grid item xs={ 12 }>\n              <QrCodeDecoder />\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nexport default createPage(QrCodeToolsPage)\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  textCopied: 'Text copied.',\n  copyText: 'Copy text',\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FilterNoneIcon from '@material-ui/icons/FilterNone'\nimport copy from 'copy-to-clipboard'\nimport { useSnackbar } from 'notistack'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport messages from './messages'\n\ninterface Props {\n  inputFor: React.RefObject<HTMLInputElement | HTMLTextAreaElement>\n}\n\n// TODO: @material-ui/icons/ContentCopy が実装されたら削除する\nconst ContentCopyIcon: React.FC<React.PropsOf<typeof FilterNoneIcon>> = ({ style, ...restProps }) => {\n  if (style === undefined) {\n    return <FilterNoneIcon style={ { transform: 'scaleY(-1)' } } { ...restProps } />\n  }\n\n  const { transform, ...restStyle } = style\n\n  if (transform !== undefined) {\n    throw new Error\n  }\n\n  return <FilterNoneIcon style={ { transform: 'scaleY(-1)', ...restStyle } } { ...restProps } />\n}\n\nconst CopyTextButton: React.FC<Props> = ({ inputFor: input }) => {\n  const { formatMessage } = useIntl()\n  const { enqueueSnackbar } = useSnackbar()\n\n  const handleClick = useCallback(() => {\n    shouldBePresent(input.current)\n\n    if (input.current.value === '') {\n      return\n    }\n\n    copy(input.current.value) // TODO: await navigator.clipboard.writeText(input.current.value)\n\n    enqueueSnackbar(\n      <FormattedMessage { ...messages.textCopied } />\n    )\n  }, [enqueueSnackbar, input])\n\n  // NOTE: input が render された後の input.current が必要なので、 useMemo ではなく useState + useEffect を使う。\n  const [disabled, setDisabled] = useState(true)\n\n  useEffect(() => {\n    setDisabled(input.current === null || input.current.value === '' || input.current.disabled)\n  })\n\n  return (\n    <Tooltip\n      title={ formatMessage(messages.copyText) }\n      disableFocusListener={ disabled }\n      disableHoverListener={ disabled }\n      disableTouchListener={ disabled }\n    >\n      <span>\n        <IconButton onClick={ handleClick } disabled={ disabled }>\n          <ContentCopyIcon />\n        </IconButton>\n      </span>\n    </Tooltip>\n  )\n}\n\nexport default CopyTextButton\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../node_modules/postcss-loader/dist/cjs.js!./classes.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import Button, { ButtonProps } from '@material-ui/core/Button'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Bowser from 'bowser'\nimport classnames from 'classnames'\nimport React, { useCallback, useMemo, useRef } from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nimport { shouldBePresent } from '~/asserters/commonAsserters'\nimport cssClasses from './classes.css'\nimport messages from './messages'\n\nexport interface Props extends Alt.Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'onClick' | 'onChange'> {\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n  buttonLabel?: React.ReactNode\n  resultMessage?: React.ReactNode\n  classes?: {\n    root?: string\n    button?: string\n  }\n  component?: React.ElementType\n\n  /**\n   * Merges className, with mimicking Material-UI.\n   */\n  ButtonProps?: Alt.Omit<ButtonProps, 'disabled' | 'onClick'>\n}\n\n// TODO: Remove?\nconst browser = Bowser.getParser(navigator.userAgent)\n\nconst isSafari = browser.is('Safari')\n\nconst FileUpload: React.FC<Props> = ({\n  className,\n  disabled,\n  multiple,\n  onClick,\n  onChange,\n  buttonLabel = <FormattedMessage { ...messages.browse } />,\n  resultMessage,\n  classes: propClasses,\n  component: Component = FormLabel,\n  ButtonProps,\n  ...restInputProps\n}: Props) => {\n  const rootClassName = useMemo(() => classnames(className, propClasses?.root, cssClasses.FileUpload, {\n    [cssClasses.Safari]: isSafari,\n  }), [className, propClasses?.root])\n  const buttonClassName = useMemo(() => classnames(propClasses?.button, cssClasses.Button, ButtonProps?.className), [propClasses?.button, ButtonProps?.className])\n\n  const input = useRef<HTMLInputElement>(null)\n  const files = input.current?.files ?? null\n\n  const defaultResultMessage = useMemo(() => {\n    if (resultMessage != null) {\n      return // nothing\n    }\n\n    if (files === null || files.length === 0) {\n      return <FormattedMessage { ...messages.noFileSelected } />\n    }\n\n    switch (files.length) {\n      case 1:\n        return files[0]!.name\n      default:\n        return <FormattedMessage { ...messages.nFilesSelected } values={ { n: files.length } } />\n    }\n  }, [resultMessage, files])\n\n  const fireInputClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(() => {\n    shouldBePresent(input.current)\n\n    input.current.dispatchEvent(new MouseEvent('click')) // FIXME: Element.click()\n  }, [input])\n\n  const handleButtonClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>((event) => {\n    onClick?.(event)\n\n    if (!event.isDefaultPrevented()) {\n      fireInputClick(event)\n    }\n  }, [onClick, fireInputClick])\n\n  return (\n    <Component className={ rootClassName } tabIndex={ isSafari ? -1 : 0 }>\n      <Button\n        disabled={ disabled }\n        onClick={ handleButtonClick }\n        { ...ButtonProps }\n        className={ buttonClassName } // NOTE: Overrides ButtonProps.className\n        tabIndex={ -1 }\n      >\n        { buttonLabel }\n      </Button>\n      { resultMessage ?? defaultResultMessage }\n      <input\n        className={ cssClasses.Input }\n        type=\"file\"\n        disabled={ disabled }\n        multiple={ multiple }\n        onChange={ onChange }\n        ref={ input }\n        { ...restInputProps }\n      />\n    </Component>\n  )\n}\n\nexport default FileUpload\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  browse: 'Browse…',\n  noFileSelected: 'No file selected.',\n  nFilesSelected: '{ n } files selected.',\n})\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".src-components-FileUpload-classes__FileUpload--zcA60 {\\n  display: inline-block; /* TODO: polyfill */\\n  display: inline flow-root;\\n  cursor: pointer;\\n}\\n\\n.src-components-FileUpload-classes__FileUpload--zcA60.src-components-FileUpload-classes__Safari--xNS3H:focus {\\n  outline: none;\\n}\\n\\n.src-components-FileUpload-classes__Button--_x92h.src-components-FileUpload-classes__Button--_x92h {\\n  text-transform: none;\\n  cursor: unset;\\n}\\n\\n.src-components-FileUpload-classes__Input--HY1r1 {\\n  display: none;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/FileUpload/classes.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,qBAAqB,EAAE,mBAAmB;EAC1C,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,oBAAoB;EACpB,aAAa;AACf;;AAEA;EACE,aAAa;AACf\",\"sourcesContent\":[\".FileUpload {\\n  display: inline-block; /* TODO: polyfill */\\n  display: inline flow-root;\\n  cursor: pointer;\\n}\\n\\n.FileUpload.Safari:focus {\\n  outline: none;\\n}\\n\\n.Button.Button {\\n  text-transform: none;\\n  cursor: unset;\\n}\\n\\n.Input {\\n  display: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"FileUpload\": \"src-components-FileUpload-classes__FileUpload--zcA60\",\n\t\"Safari\": \"src-components-FileUpload-classes__Safari--xNS3H\",\n\t\"Button\": \"src-components-FileUpload-classes__Button--_x92h\",\n\t\"Input\": \"src-components-FileUpload-classes__Input--HY1r1\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["defineMessages","noFileSelected","decoding","decodedSuccessfully","CopiableTextField","value","restProps","input","useRef","TextField","inputRef","InputProps","endAdornment","InputAdornment","position","CopyTextButton","inputFor","canvas","useMemo","document","createElement","context","getContext","files","setFiles","useState","decoded","setDecoded","load","useCallback","currentTarget","image","shouldBePresent","height","width","drawImage","imageData","getImageData","qrcode","jsQR","data","inversionAttempts","handleChange","event","target","undefined","length","file","url","URL","createObjectURL","Image","onload","src","revokeObjectURL","resultMessage","messages","Grid","container","spacing","item","xs","sm","FileUpload","accept","onChange","multiline","fullWidth","maxRows","errorCorrectionLevel","maskPattern","default","errorCorrectionLevels","maskPatterns","textFieldProps","errorCorrectionLevelSelectId","v4","maskPatternSelectId","inputLabel","formatMessage","useIntl","setErrorCorrectionLevel","setMaskPattern","QRCode","current","handleErrorCorrectionLevelChange","isOneOf","Error","handleMaskPatternChange","map","n","Number","useEffect","direction","alignContent","InputLabel","ref","htmlFor","Select","native","id","level","i","key","pattern","qrCodeTools","encoder","decoder","createPage","Helmet","title","Box","padding","Typography","variant","defaultValue","textCopied","copyText","ContentCopyIcon","style","FilterNone","transform","restStyle","enqueueSnackbar","useSnackbar","handleClick","copy","disabled","setDisabled","Tooltip","disableFocusListener","disableHoverListener","disableTouchListener","IconButton","onClick","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","isSafari","Bowser","navigator","userAgent","is","className","multiple","buttonLabel","classes","propClasses","component","Component","FormLabel","ButtonProps","restInputProps","rootClassName","classnames","root","cssClasses","buttonClassName","button","defaultResultMessage","name","values","fireInputClick","dispatchEvent","MouseEvent","handleButtonClick","isDefaultPrevented","tabIndex","Button","type","browse","nFilesSelected","___CSS_LOADER_EXPORT___","push","module","locals"],"sourceRoot":""}